/* Copyright (c) 2025 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Snowflake-Labs/sansshell/auth/rpcauth (interfaces: AuthzPolicy)
//
// Generated by this command:
//
//	mockgen -destination=./rpcauth_mock.go -package=rpcauth . AuthzPolicy
//

// Package rpcauth is a generated GoMock package.
package rpcauth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthzPolicy is a mock of AuthzPolicy interface.
type MockAuthzPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzPolicyMockRecorder
	isgomock struct{}
}

// MockAuthzPolicyMockRecorder is the mock recorder for MockAuthzPolicy.
type MockAuthzPolicyMockRecorder struct {
	mock *MockAuthzPolicy
}

// NewMockAuthzPolicy creates a new mock instance.
func NewMockAuthzPolicy(ctrl *gomock.Controller) *MockAuthzPolicy {
	mock := &MockAuthzPolicy{ctrl: ctrl}
	mock.recorder = &MockAuthzPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzPolicy) EXPECT() *MockAuthzPolicyMockRecorder {
	return m.recorder
}

// DenialHints mocks base method.
func (m *MockAuthzPolicy) DenialHints(ctx context.Context, input *RPCAuthInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenialHints", ctx, input)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenialHints indicates an expected call of DenialHints.
func (mr *MockAuthzPolicyMockRecorder) DenialHints(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenialHints", reflect.TypeOf((*MockAuthzPolicy)(nil).DenialHints), ctx, input)
}

// Eval mocks base method.
func (m *MockAuthzPolicy) Eval(ctx context.Context, input *RPCAuthInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", ctx, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval.
func (mr *MockAuthzPolicyMockRecorder) Eval(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockAuthzPolicy)(nil).Eval), ctx, input)
}
