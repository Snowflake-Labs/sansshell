/* Copyright (c) 2025 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ./rpcauth.go
//
// Generated by this command:
//
//	mockgen -source=./rpcauth.go -destination=./rpcauth_mock.go -package=rpcauth AuthzPolicy
//

// Package rpcauth is a generated GoMock package.
package rpcauth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRPCAuthorizer is a mock of RPCAuthorizer interface.
type MockRPCAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCAuthorizerMockRecorder
	isgomock struct{}
}

// MockRPCAuthorizerMockRecorder is the mock recorder for MockRPCAuthorizer.
type MockRPCAuthorizerMockRecorder struct {
	mock *MockRPCAuthorizer
}

// NewMockRPCAuthorizer creates a new mock instance.
func NewMockRPCAuthorizer(ctrl *gomock.Controller) *MockRPCAuthorizer {
	mock := &MockRPCAuthorizer{ctrl: ctrl}
	mock.recorder = &MockRPCAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCAuthorizer) EXPECT() *MockRPCAuthorizerMockRecorder {
	return m.recorder
}

// AppendHooks mocks base method.
func (m *MockRPCAuthorizer) AppendHooks(hooks ...RPCAuthzHook) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range hooks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendHooks", varargs...)
}

// AppendHooks indicates an expected call of AppendHooks.
func (mr *MockRPCAuthorizerMockRecorder) AppendHooks(hooks ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHooks", reflect.TypeOf((*MockRPCAuthorizer)(nil).AppendHooks), hooks...)
}

// Authorize mocks base method.
func (m *MockRPCAuthorizer) Authorize(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, req, info, handler)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockRPCAuthorizerMockRecorder) Authorize(ctx, req, info, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockRPCAuthorizer)(nil).Authorize), ctx, req, info, handler)
}

// AuthorizeClient mocks base method.
func (m *MockRPCAuthorizer) AuthorizeClient(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, method, req, reply, cc, invoker}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeClient", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeClient indicates an expected call of AuthorizeClient.
func (mr *MockRPCAuthorizerMockRecorder) AuthorizeClient(ctx, method, req, reply, cc, invoker any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, method, req, reply, cc, invoker}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeClient", reflect.TypeOf((*MockRPCAuthorizer)(nil).AuthorizeClient), varargs...)
}

// AuthorizeClientStream mocks base method.
func (m *MockRPCAuthorizer) AuthorizeClientStream(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, desc, cc, method, streamer}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeClientStream", varargs...)
	ret0, _ := ret[0].(grpc.ClientStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeClientStream indicates an expected call of AuthorizeClientStream.
func (mr *MockRPCAuthorizerMockRecorder) AuthorizeClientStream(ctx, desc, cc, method, streamer any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, desc, cc, method, streamer}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeClientStream", reflect.TypeOf((*MockRPCAuthorizer)(nil).AuthorizeClientStream), varargs...)
}

// AuthorizeStream mocks base method.
func (m *MockRPCAuthorizer) AuthorizeStream(srv any, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeStream", srv, ss, info, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeStream indicates an expected call of AuthorizeStream.
func (mr *MockRPCAuthorizerMockRecorder) AuthorizeStream(srv, ss, info, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeStream", reflect.TypeOf((*MockRPCAuthorizer)(nil).AuthorizeStream), srv, ss, info, handler)
}

// Eval mocks base method.
func (m *MockRPCAuthorizer) Eval(ctx context.Context, input *RPCAuthInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockRPCAuthorizerMockRecorder) Eval(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockRPCAuthorizer)(nil).Eval), ctx, input)
}

// MockRPCAuthzHook is a mock of RPCAuthzHook interface.
type MockRPCAuthzHook struct {
	ctrl     *gomock.Controller
	recorder *MockRPCAuthzHookMockRecorder
	isgomock struct{}
}

// MockRPCAuthzHookMockRecorder is the mock recorder for MockRPCAuthzHook.
type MockRPCAuthzHookMockRecorder struct {
	mock *MockRPCAuthzHook
}

// NewMockRPCAuthzHook creates a new mock instance.
func NewMockRPCAuthzHook(ctrl *gomock.Controller) *MockRPCAuthzHook {
	mock := &MockRPCAuthzHook{ctrl: ctrl}
	mock.recorder = &MockRPCAuthzHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCAuthzHook) EXPECT() *MockRPCAuthzHookMockRecorder {
	return m.recorder
}

// Hook mocks base method.
func (m *MockRPCAuthzHook) Hook(arg0 context.Context, arg1 *RPCAuthInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hook indicates an expected call of Hook.
func (mr *MockRPCAuthzHookMockRecorder) Hook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hook", reflect.TypeOf((*MockRPCAuthzHook)(nil).Hook), arg0, arg1)
}

// MockAuthzPolicy is a mock of AuthzPolicy interface.
type MockAuthzPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzPolicyMockRecorder
	isgomock struct{}
}

// MockAuthzPolicyMockRecorder is the mock recorder for MockAuthzPolicy.
type MockAuthzPolicyMockRecorder struct {
	mock *MockAuthzPolicy
}

// NewMockAuthzPolicy creates a new mock instance.
func NewMockAuthzPolicy(ctrl *gomock.Controller) *MockAuthzPolicy {
	mock := &MockAuthzPolicy{ctrl: ctrl}
	mock.recorder = &MockAuthzPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzPolicy) EXPECT() *MockAuthzPolicyMockRecorder {
	return m.recorder
}

// DenialHints mocks base method.
func (m *MockAuthzPolicy) DenialHints(ctx context.Context, input any) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenialHints", ctx, input)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenialHints indicates an expected call of DenialHints.
func (mr *MockAuthzPolicyMockRecorder) DenialHints(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenialHints", reflect.TypeOf((*MockAuthzPolicy)(nil).DenialHints), ctx, input)
}

// Eval mocks base method.
func (m *MockAuthzPolicy) Eval(ctx context.Context, input any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", ctx, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval.
func (mr *MockAuthzPolicyMockRecorder) Eval(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockAuthzPolicy)(nil).Eval), ctx, input)
}
