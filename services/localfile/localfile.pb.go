// Copyright (c) 2019 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: localfile.proto

package localfile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SumType specifies a hashing function to use when calculating
// file sums.
type SumType int32

const (
	SumType_SUM_TYPE_UNKNOWN    SumType = 0
	SumType_SUM_TYPE_CRC32IEEE  SumType = 1
	SumType_SUM_TYPE_MD5        SumType = 2
	SumType_SUM_TYPE_SHA256     SumType = 3
	SumType_SUM_TYPE_SHA512_256 SumType = 4
)

// Enum value maps for SumType.
var (
	SumType_name = map[int32]string{
		0: "SUM_TYPE_UNKNOWN",
		1: "SUM_TYPE_CRC32IEEE",
		2: "SUM_TYPE_MD5",
		3: "SUM_TYPE_SHA256",
		4: "SUM_TYPE_SHA512_256",
	}
	SumType_value = map[string]int32{
		"SUM_TYPE_UNKNOWN":    0,
		"SUM_TYPE_CRC32IEEE":  1,
		"SUM_TYPE_MD5":        2,
		"SUM_TYPE_SHA256":     3,
		"SUM_TYPE_SHA512_256": 4,
	}
)

func (x SumType) Enum() *SumType {
	p := new(SumType)
	*p = x
	return p
}

func (x SumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SumType) Descriptor() protoreflect.EnumDescriptor {
	return file_localfile_proto_enumTypes[0].Descriptor()
}

func (SumType) Type() protoreflect.EnumType {
	return &file_localfile_proto_enumTypes[0]
}

func (x SumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SumType.Descriptor instead.
func (SumType) EnumDescriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{0}
}

// ReadActionRequest indicates the type of read we're performing.
// Either a file read which then terminates or a tail based read that
// continues forever (i.e. as tail -f on the command line would do).
type ReadActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*ReadActionRequest_File
	//	*ReadActionRequest_Tail
	Request isReadActionRequest_Request `protobuf_oneof:"request"`
}

func (x *ReadActionRequest) Reset() {
	*x = ReadActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadActionRequest) ProtoMessage() {}

func (x *ReadActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadActionRequest.ProtoReflect.Descriptor instead.
func (*ReadActionRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{0}
}

func (m *ReadActionRequest) GetRequest() isReadActionRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ReadActionRequest) GetFile() *ReadRequest {
	if x, ok := x.GetRequest().(*ReadActionRequest_File); ok {
		return x.File
	}
	return nil
}

func (x *ReadActionRequest) GetTail() *TailRequest {
	if x, ok := x.GetRequest().(*ReadActionRequest_Tail); ok {
		return x.Tail
	}
	return nil
}

type isReadActionRequest_Request interface {
	isReadActionRequest_Request()
}

type ReadActionRequest_File struct {
	File *ReadRequest `protobuf:"bytes,1,opt,name=file,proto3,oneof"`
}

type ReadActionRequest_Tail struct {
	Tail *TailRequest `protobuf:"bytes,2,opt,name=tail,proto3,oneof"`
}

func (*ReadActionRequest_File) isReadActionRequest_Request() {}

func (*ReadActionRequest_Tail) isReadActionRequest_Request() {}

// ReadRequest describes the filename to be read
type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// If non-zero skip N bytes into the file before returning data.
	// Negative implies based from end of file.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// If positive and non-zero return only this many total bytes.
	Length int64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{1}
}

func (x *ReadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ReadRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadRequest) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// TailRequest describes the filename to be tailed.
type TailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// If non-zero skip N bytes into the file before returning data.
	// Negative implies based from end of file.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TailRequest) Reset() {
	*x = TailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailRequest) ProtoMessage() {}

func (x *TailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailRequest.ProtoReflect.Descriptor instead.
func (*TailRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{2}
}

func (x *TailRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *TailRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// ReadResponse contains the contents of the file
type ReadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ReadReply) Reset() {
	*x = ReadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReply) ProtoMessage() {}

func (x *ReadReply) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReply.ProtoReflect.Descriptor instead.
func (*ReadReply) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{3}
}

func (x *ReadReply) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// StatRequest specifies the filename for which to retrieve metadata.
type StatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// absolute path to the target file
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// If true, use stat instead of lstat so that symlinks are followed
	FollowLinks bool `protobuf:"varint,2,opt,name=follow_links,json=followLinks,proto3" json:"follow_links,omitempty"`
}

func (x *StatRequest) Reset() {
	*x = StatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatRequest) ProtoMessage() {}

func (x *StatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatRequest.ProtoReflect.Descriptor instead.
func (*StatRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{4}
}

func (x *StatRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StatRequest) GetFollowLinks() bool {
	if x != nil {
		return x.FollowLinks
	}
	return false
}

// StatReply contains stat information for a single file.
type StatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The file path, as provided in StatRequest
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// size of the file, in bytes
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// NB: the file mode here is represented using Go's fs.FileMode scheme
	// which combines permissions with additional data such as the type
	// (directory, symlink, etc)
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// File modification time
	Modtime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modtime,proto3" json:"modtime,omitempty"`
	// UID of owner
	Uid uint32 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// GID of owner
	Gid uint32 `protobuf:"varint,6,opt,name=gid,proto3" json:"gid,omitempty"`
	// Whether the immutable flag is set.
	// This only applies to systems which support immutable file bits.
	// For systems which support multiple types (OS/X) this refers
	// only to system level immutability and not user. i.e. even root
	// is unable to modify these files.
	Immutable bool `protobuf:"varint,7,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *StatReply) Reset() {
	*x = StatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatReply) ProtoMessage() {}

func (x *StatReply) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatReply.ProtoReflect.Descriptor instead.
func (*StatReply) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{5}
}

func (x *StatReply) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StatReply) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StatReply) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *StatReply) GetModtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Modtime
	}
	return nil
}

func (x *StatReply) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *StatReply) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *StatReply) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

// SumRequest specifies a type and filename for a sum operation.
type SumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absoloute path to the target file.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// The requested sum type. If not set, or SUM_TYPE_UNKNOWN,
	// an implementation-default value will be chosen automatically,
	// and indicated in the reply.
	SumType SumType `protobuf:"varint,2,opt,name=sum_type,json=sumType,proto3,enum=LocalFile.SumType" json:"sum_type,omitempty"`
}

func (x *SumRequest) Reset() {
	*x = SumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumRequest) ProtoMessage() {}

func (x *SumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumRequest.ProtoReflect.Descriptor instead.
func (*SumRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{6}
}

func (x *SumRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SumRequest) GetSumType() SumType {
	if x != nil {
		return x.SumType
	}
	return SumType_SUM_TYPE_UNKNOWN
}

// SumReply contains the sum output for the given filename.
type SumReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filename, as provided in SumRequest
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// The type of sum used to calculate `sum`
	SumType SumType `protobuf:"varint,2,opt,name=sum_type,json=sumType,proto3,enum=LocalFile.SumType" json:"sum_type,omitempty"`
	// The sum value, as a hex-encoded string
	Sum string `protobuf:"bytes,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *SumReply) Reset() {
	*x = SumReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumReply) ProtoMessage() {}

func (x *SumReply) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumReply.ProtoReflect.Descriptor instead.
func (*SumReply) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{7}
}

func (x *SumReply) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SumReply) GetSumType() SumType {
	if x != nil {
		return x.SumType
	}
	return SumType_SUM_TYPE_UNKNOWN
}

func (x *SumReply) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

// FileAttributes describes a file/directory and
// an attributed of it. It's used together with
// repeated fields and a path to describe an entire entity.
type FileAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FileAttribute_Uid
	//	*FileAttribute_Username
	//	*FileAttribute_Gid
	//	*FileAttribute_Group
	//	*FileAttribute_Mode
	//	*FileAttribute_Immutable
	Value isFileAttribute_Value `protobuf_oneof:"value"`
}

func (x *FileAttribute) Reset() {
	*x = FileAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttribute) ProtoMessage() {}

func (x *FileAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttribute.ProtoReflect.Descriptor instead.
func (*FileAttribute) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{8}
}

func (m *FileAttribute) GetValue() isFileAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FileAttribute) GetUid() uint32 {
	if x, ok := x.GetValue().(*FileAttribute_Uid); ok {
		return x.Uid
	}
	return 0
}

func (x *FileAttribute) GetUsername() string {
	if x, ok := x.GetValue().(*FileAttribute_Username); ok {
		return x.Username
	}
	return ""
}

func (x *FileAttribute) GetGid() uint32 {
	if x, ok := x.GetValue().(*FileAttribute_Gid); ok {
		return x.Gid
	}
	return 0
}

func (x *FileAttribute) GetGroup() string {
	if x, ok := x.GetValue().(*FileAttribute_Group); ok {
		return x.Group
	}
	return ""
}

func (x *FileAttribute) GetMode() uint32 {
	if x, ok := x.GetValue().(*FileAttribute_Mode); ok {
		return x.Mode
	}
	return 0
}

func (x *FileAttribute) GetImmutable() bool {
	if x, ok := x.GetValue().(*FileAttribute_Immutable); ok {
		return x.Immutable
	}
	return false
}

type isFileAttribute_Value interface {
	isFileAttribute_Value()
}

type FileAttribute_Uid struct {
	Uid uint32 `protobuf:"varint,1,opt,name=uid,proto3,oneof"`
}

type FileAttribute_Username struct {
	Username string `protobuf:"bytes,5,opt,name=username,proto3,oneof"` // Use in place of uid and server will lookup.
}

type FileAttribute_Gid struct {
	Gid uint32 `protobuf:"varint,2,opt,name=gid,proto3,oneof"`
}

type FileAttribute_Group struct {
	Group string `protobuf:"bytes,6,opt,name=group,proto3,oneof"` // Use in place of gid and server will lookup.
}

type FileAttribute_Mode struct {
	// Only the lower 12 bits are used per unix conventions.
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3,oneof"`
}

type FileAttribute_Immutable struct {
	Immutable bool `protobuf:"varint,4,opt,name=immutable,proto3,oneof"`
}

func (*FileAttribute_Uid) isFileAttribute_Value() {}

func (*FileAttribute_Username) isFileAttribute_Value() {}

func (*FileAttribute_Gid) isFileAttribute_Value() {}

func (*FileAttribute_Group) isFileAttribute_Value() {}

func (*FileAttribute_Mode) isFileAttribute_Value() {}

func (*FileAttribute_Immutable) isFileAttribute_Value() {}

// FileAttributes describes everything about a given file/directory.
type FileAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// A given attributes (uid, gid, etc) can only be set once.
	Attributes []*FileAttribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *FileAttributes) Reset() {
	*x = FileAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttributes) ProtoMessage() {}

func (x *FileAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttributes.ProtoReflect.Descriptor instead.
func (*FileAttributes) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{9}
}

func (x *FileAttributes) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileAttributes) GetAttributes() []*FileAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// FileWrite describes everything about a file to be written.
type FileWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For a newly written file uid/gid/mode are required attributes
	// while immutable is optional.
	Attrs *FileAttributes `protobuf:"bytes,1,opt,name=attrs,proto3" json:"attrs,omitempty"`
	// If true allow to truncate and overwrite an existing file. Otherwise
	// the file must not exist. This is still subject to races as all incoming
	// data is written to a tempfile before moved to the final destination so
	// multiple system calls will take place.
	Overwrite bool `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *FileWrite) Reset() {
	*x = FileWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileWrite) ProtoMessage() {}

func (x *FileWrite) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileWrite.ProtoReflect.Descriptor instead.
func (*FileWrite) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{10}
}

func (x *FileWrite) GetAttrs() *FileAttributes {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *FileWrite) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

// WriteRequest streams the data for the filename to be written.
// The first request must contain a description and all future requests
// must contain contents. Each write request will append contents into the
// file until the stream is closed. Then the file is moved to it's final
// location.
type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*WriteRequest_Description
	//	*WriteRequest_Contents
	Request isWriteRequest_Request `protobuf_oneof:"request"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{11}
}

func (m *WriteRequest) GetRequest() isWriteRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WriteRequest) GetDescription() *FileWrite {
	if x, ok := x.GetRequest().(*WriteRequest_Description); ok {
		return x.Description
	}
	return nil
}

func (x *WriteRequest) GetContents() []byte {
	if x, ok := x.GetRequest().(*WriteRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

type isWriteRequest_Request interface {
	isWriteRequest_Request()
}

type WriteRequest_Description struct {
	Description *FileWrite `protobuf:"bytes,1,opt,name=description,proto3,oneof"`
}

type WriteRequest_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

func (*WriteRequest_Description) isWriteRequest_Request() {}

func (*WriteRequest_Contents) isWriteRequest_Request() {}

// CopyRequest contains the URL and filename destination to copy the
// file from.
type CopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *FileWrite `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// The source bucket to copy from. See implementations for details on schemes
	// but will at a minimum support file://<path> for local copies.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The key to reference inside of the bucket.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Any additional data the URL destination may need in order
	// to succeed (such as an auth token for a blob service).
	BlobData []byte `protobuf:"bytes,4,opt,name=blob_data,json=blobData,proto3" json:"blob_data,omitempty"`
}

func (x *CopyRequest) Reset() {
	*x = CopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRequest) ProtoMessage() {}

func (x *CopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRequest.ProtoReflect.Descriptor instead.
func (*CopyRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{12}
}

func (x *CopyRequest) GetDestination() *FileWrite {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *CopyRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CopyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CopyRequest) GetBlobData() []byte {
	if x != nil {
		return x.BlobData
	}
	return nil
}

// ListRequest will do an expansion on the entry given to list all things
// located there. If entry is a file only that data will be returned.
type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entry to list.
	Entry string `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{13}
}

func (x *ListRequest) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

// ListReply will begin with the entry followed by N entries (if a directory)
// until that level of the tree is exhausted.
type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *StatReply `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{14}
}

func (x *ListReply) GetEntry() *StatReply {
	if x != nil {
		return x.Entry
	}
	return nil
}

// SetFileAttributesRequest processes attrs and attempts to set the
// path given to those attributes. As this is N steps (owner, group,
// permissions, etc) it is not transactional and can leave an entity in a
// partial state if errors occur.
type SetFileAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs *FileAttributes `protobuf:"bytes,1,opt,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *SetFileAttributesRequest) Reset() {
	*x = SetFileAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFileAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFileAttributesRequest) ProtoMessage() {}

func (x *SetFileAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFileAttributesRequest.ProtoReflect.Descriptor instead.
func (*SetFileAttributesRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{15}
}

func (x *SetFileAttributesRequest) GetAttrs() *FileAttributes {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type RmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified path to the file to remove.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *RmRequest) Reset() {
	*x = RmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmRequest) ProtoMessage() {}

func (x *RmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmRequest.ProtoReflect.Descriptor instead.
func (*RmRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{16}
}

func (x *RmRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type RmdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified path to the directory to remove.
	// Must be empty of any entries.
	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *RmdirRequest) Reset() {
	*x = RmdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirRequest) ProtoMessage() {}

func (x *RmdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirRequest.ProtoReflect.Descriptor instead.
func (*RmdirRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{17}
}

func (x *RmdirRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type RenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalName    string `protobuf:"bytes,1,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	DestinationName string `protobuf:"bytes,2,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{18}
}

func (x *RenameRequest) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *RenameRequest) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

type ReadlinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified path to the file to readlink.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *ReadlinkRequest) Reset() {
	*x = ReadlinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadlinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadlinkRequest) ProtoMessage() {}

func (x *ReadlinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadlinkRequest.ProtoReflect.Descriptor instead.
func (*ReadlinkRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{19}
}

func (x *ReadlinkRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type ReadlinkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resolved link.
	Linkvalue string `protobuf:"bytes,1,opt,name=linkvalue,proto3" json:"linkvalue,omitempty"`
}

func (x *ReadlinkReply) Reset() {
	*x = ReadlinkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadlinkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadlinkReply) ProtoMessage() {}

func (x *ReadlinkReply) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadlinkReply.ProtoReflect.Descriptor instead.
func (*ReadlinkReply) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{20}
}

func (x *ReadlinkReply) GetLinkvalue() string {
	if x != nil {
		return x.Linkvalue
	}
	return ""
}

type SymlinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Linkname string `protobuf:"bytes,2,opt,name=linkname,proto3" json:"linkname,omitempty"`
}

func (x *SymlinkRequest) Reset() {
	*x = SymlinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymlinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkRequest) ProtoMessage() {}

func (x *SymlinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkRequest.ProtoReflect.Descriptor instead.
func (*SymlinkRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{21}
}

func (x *SymlinkRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SymlinkRequest) GetLinkname() string {
	if x != nil {
		return x.Linkname
	}
	return ""
}

// MkdirRequest describes the directory
type MkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirAttrs *FileAttributes `protobuf:"bytes,1,opt,name=dir_attrs,json=dirAttrs,proto3" json:"dir_attrs,omitempty"`
}

func (x *MkdirRequest) Reset() {
	*x = MkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_localfile_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirRequest) ProtoMessage() {}

func (x *MkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_localfile_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirRequest.ProtoReflect.Descriptor instead.
func (*MkdirRequest) Descriptor() ([]byte, []int) {
	return file_localfile_proto_rawDescGZIP(), []int{22}
}

func (x *MkdirRequest) GetDirAttrs() *FileAttributes {
	if x != nil {
		return x.DirAttrs
	}
	return nil
}

var File_localfile_proto protoreflect.FileDescriptor

var file_localfile_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x11, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x41, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x27, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x67,
	0x0a, 0x08, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5a,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x0c, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x37, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4b, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x09, 0x52, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2c, 0x0a, 0x0c, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x5f,
	0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d,
	0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a,
	0x0e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x08, 0x64, 0x69, 0x72, 0x41, 0x74, 0x74, 0x72, 0x73, 0x2a, 0x77, 0x0a, 0x07, 0x53,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x49, 0x45,
	0x45, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x44, 0x35, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x04, 0x32, 0xb6, 0x06, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37,
	0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x15, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x16, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x02, 0x52, 0x6d, 0x12, 0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x52, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x12, 0x17, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x05, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x17, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x61, 0x6e, 0x73, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_localfile_proto_rawDescOnce sync.Once
	file_localfile_proto_rawDescData = file_localfile_proto_rawDesc
)

func file_localfile_proto_rawDescGZIP() []byte {
	file_localfile_proto_rawDescOnce.Do(func() {
		file_localfile_proto_rawDescData = protoimpl.X.CompressGZIP(file_localfile_proto_rawDescData)
	})
	return file_localfile_proto_rawDescData
}

var file_localfile_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_localfile_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_localfile_proto_goTypes = []interface{}{
	(SumType)(0),                     // 0: LocalFile.SumType
	(*ReadActionRequest)(nil),        // 1: LocalFile.ReadActionRequest
	(*ReadRequest)(nil),              // 2: LocalFile.ReadRequest
	(*TailRequest)(nil),              // 3: LocalFile.TailRequest
	(*ReadReply)(nil),                // 4: LocalFile.ReadReply
	(*StatRequest)(nil),              // 5: LocalFile.StatRequest
	(*StatReply)(nil),                // 6: LocalFile.StatReply
	(*SumRequest)(nil),               // 7: LocalFile.SumRequest
	(*SumReply)(nil),                 // 8: LocalFile.SumReply
	(*FileAttribute)(nil),            // 9: LocalFile.FileAttribute
	(*FileAttributes)(nil),           // 10: LocalFile.FileAttributes
	(*FileWrite)(nil),                // 11: LocalFile.FileWrite
	(*WriteRequest)(nil),             // 12: LocalFile.WriteRequest
	(*CopyRequest)(nil),              // 13: LocalFile.CopyRequest
	(*ListRequest)(nil),              // 14: LocalFile.ListRequest
	(*ListReply)(nil),                // 15: LocalFile.ListReply
	(*SetFileAttributesRequest)(nil), // 16: LocalFile.SetFileAttributesRequest
	(*RmRequest)(nil),                // 17: LocalFile.RmRequest
	(*RmdirRequest)(nil),             // 18: LocalFile.RmdirRequest
	(*RenameRequest)(nil),            // 19: LocalFile.RenameRequest
	(*ReadlinkRequest)(nil),          // 20: LocalFile.ReadlinkRequest
	(*ReadlinkReply)(nil),            // 21: LocalFile.ReadlinkReply
	(*SymlinkRequest)(nil),           // 22: LocalFile.SymlinkRequest
	(*MkdirRequest)(nil),             // 23: LocalFile.MkdirRequest
	(*timestamppb.Timestamp)(nil),    // 24: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 25: google.protobuf.Empty
}
var file_localfile_proto_depIdxs = []int32{
	2,  // 0: LocalFile.ReadActionRequest.file:type_name -> LocalFile.ReadRequest
	3,  // 1: LocalFile.ReadActionRequest.tail:type_name -> LocalFile.TailRequest
	24, // 2: LocalFile.StatReply.modtime:type_name -> google.protobuf.Timestamp
	0,  // 3: LocalFile.SumRequest.sum_type:type_name -> LocalFile.SumType
	0,  // 4: LocalFile.SumReply.sum_type:type_name -> LocalFile.SumType
	9,  // 5: LocalFile.FileAttributes.attributes:type_name -> LocalFile.FileAttribute
	10, // 6: LocalFile.FileWrite.attrs:type_name -> LocalFile.FileAttributes
	11, // 7: LocalFile.WriteRequest.description:type_name -> LocalFile.FileWrite
	11, // 8: LocalFile.CopyRequest.destination:type_name -> LocalFile.FileWrite
	6,  // 9: LocalFile.ListReply.entry:type_name -> LocalFile.StatReply
	10, // 10: LocalFile.SetFileAttributesRequest.attrs:type_name -> LocalFile.FileAttributes
	10, // 11: LocalFile.MkdirRequest.dir_attrs:type_name -> LocalFile.FileAttributes
	1,  // 12: LocalFile.LocalFile.Read:input_type -> LocalFile.ReadActionRequest
	5,  // 13: LocalFile.LocalFile.Stat:input_type -> LocalFile.StatRequest
	7,  // 14: LocalFile.LocalFile.Sum:input_type -> LocalFile.SumRequest
	12, // 15: LocalFile.LocalFile.Write:input_type -> LocalFile.WriteRequest
	13, // 16: LocalFile.LocalFile.Copy:input_type -> LocalFile.CopyRequest
	14, // 17: LocalFile.LocalFile.List:input_type -> LocalFile.ListRequest
	16, // 18: LocalFile.LocalFile.SetFileAttributes:input_type -> LocalFile.SetFileAttributesRequest
	17, // 19: LocalFile.LocalFile.Rm:input_type -> LocalFile.RmRequest
	18, // 20: LocalFile.LocalFile.Rmdir:input_type -> LocalFile.RmdirRequest
	19, // 21: LocalFile.LocalFile.Rename:input_type -> LocalFile.RenameRequest
	20, // 22: LocalFile.LocalFile.Readlink:input_type -> LocalFile.ReadlinkRequest
	22, // 23: LocalFile.LocalFile.Symlink:input_type -> LocalFile.SymlinkRequest
	23, // 24: LocalFile.LocalFile.Mkdir:input_type -> LocalFile.MkdirRequest
	4,  // 25: LocalFile.LocalFile.Read:output_type -> LocalFile.ReadReply
	6,  // 26: LocalFile.LocalFile.Stat:output_type -> LocalFile.StatReply
	8,  // 27: LocalFile.LocalFile.Sum:output_type -> LocalFile.SumReply
	25, // 28: LocalFile.LocalFile.Write:output_type -> google.protobuf.Empty
	25, // 29: LocalFile.LocalFile.Copy:output_type -> google.protobuf.Empty
	15, // 30: LocalFile.LocalFile.List:output_type -> LocalFile.ListReply
	25, // 31: LocalFile.LocalFile.SetFileAttributes:output_type -> google.protobuf.Empty
	25, // 32: LocalFile.LocalFile.Rm:output_type -> google.protobuf.Empty
	25, // 33: LocalFile.LocalFile.Rmdir:output_type -> google.protobuf.Empty
	25, // 34: LocalFile.LocalFile.Rename:output_type -> google.protobuf.Empty
	21, // 35: LocalFile.LocalFile.Readlink:output_type -> LocalFile.ReadlinkReply
	25, // 36: LocalFile.LocalFile.Symlink:output_type -> google.protobuf.Empty
	25, // 37: LocalFile.LocalFile.Mkdir:output_type -> google.protobuf.Empty
	25, // [25:38] is the sub-list for method output_type
	12, // [12:25] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_localfile_proto_init() }
func file_localfile_proto_init() {
	if File_localfile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_localfile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFileAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadlinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadlinkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymlinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_localfile_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_localfile_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReadActionRequest_File)(nil),
		(*ReadActionRequest_Tail)(nil),
	}
	file_localfile_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*FileAttribute_Uid)(nil),
		(*FileAttribute_Username)(nil),
		(*FileAttribute_Gid)(nil),
		(*FileAttribute_Group)(nil),
		(*FileAttribute_Mode)(nil),
		(*FileAttribute_Immutable)(nil),
	}
	file_localfile_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*WriteRequest_Description)(nil),
		(*WriteRequest_Contents)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_localfile_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_localfile_proto_goTypes,
		DependencyIndexes: file_localfile_proto_depIdxs,
		EnumInfos:         file_localfile_proto_enumTypes,
		MessageInfos:      file_localfile_proto_msgTypes,
	}.Build()
	File_localfile_proto = out.File
	file_localfile_proto_rawDesc = nil
	file_localfile_proto_goTypes = nil
	file_localfile_proto_depIdxs = nil
}
