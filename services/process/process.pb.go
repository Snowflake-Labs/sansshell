// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: process.proto

package process

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProcessState refers to the single letter state "ps -o s" returns.
type ProcessState int32

const (
	ProcessState_PROCESS_STATE_UNKNOWN ProcessState = 0
	// D
	ProcessState_PROCESS_STATE_UNINTERRUPTIBLE_SLEEP ProcessState = 1
	// R
	ProcessState_PROCESS_STATE_RUNNING ProcessState = 2
	// S
	ProcessState_PROCESS_STATE_INTERRUPTIBLE_SLEEP ProcessState = 3
	// T
	ProcessState_PROCESS_STATE_STOPPED_JOB_CONTROL ProcessState = 4
	// t
	ProcessState_PROCESS_STATE_STOPPED_DEBUGGER ProcessState = 5
	// Z
	ProcessState_PROCESS_STATE_ZOMBIE ProcessState = 6
)

// Enum value maps for ProcessState.
var (
	ProcessState_name = map[int32]string{
		0: "PROCESS_STATE_UNKNOWN",
		1: "PROCESS_STATE_UNINTERRUPTIBLE_SLEEP",
		2: "PROCESS_STATE_RUNNING",
		3: "PROCESS_STATE_INTERRUPTIBLE_SLEEP",
		4: "PROCESS_STATE_STOPPED_JOB_CONTROL",
		5: "PROCESS_STATE_STOPPED_DEBUGGER",
		6: "PROCESS_STATE_ZOMBIE",
	}
	ProcessState_value = map[string]int32{
		"PROCESS_STATE_UNKNOWN":               0,
		"PROCESS_STATE_UNINTERRUPTIBLE_SLEEP": 1,
		"PROCESS_STATE_RUNNING":               2,
		"PROCESS_STATE_INTERRUPTIBLE_SLEEP":   3,
		"PROCESS_STATE_STOPPED_JOB_CONTROL":   4,
		"PROCESS_STATE_STOPPED_DEBUGGER":      5,
		"PROCESS_STATE_ZOMBIE":                6,
	}
)

func (x ProcessState) Enum() *ProcessState {
	p := new(ProcessState)
	*p = x
	return p
}

func (x ProcessState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessState) Descriptor() protoreflect.EnumDescriptor {
	return file_process_proto_enumTypes[0].Descriptor()
}

func (ProcessState) Type() protoreflect.EnumType {
	return &file_process_proto_enumTypes[0]
}

func (x ProcessState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessState.Descriptor instead.
func (ProcessState) EnumDescriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0}
}

// ProcessStateCode interprets the additional characters
// appened to ps -o stat output.
type ProcessStateCode int32

const (
	ProcessStateCode_PROCESS_STATE_CODE_UNKNOWN         ProcessStateCode = 0
	ProcessStateCode_PROCESS_STATE_CODE_HIGH_PRIORITY   ProcessStateCode = 1
	ProcessStateCode_PROCESS_STATE_CODE_LOW_PRIORITY    ProcessStateCode = 2
	ProcessStateCode_PROCESS_STATE_CODE_LOCKED_PAGES    ProcessStateCode = 3
	ProcessStateCode_PROCESS_STATE_CODE_SESSION_LEADER  ProcessStateCode = 4
	ProcessStateCode_PROCESS_STATE_CODE_MULTI_THREADED  ProcessStateCode = 5
	ProcessStateCode_PROCESS_STATE_CODE_FOREGROUND_PGRP ProcessStateCode = 6
)

// Enum value maps for ProcessStateCode.
var (
	ProcessStateCode_name = map[int32]string{
		0: "PROCESS_STATE_CODE_UNKNOWN",
		1: "PROCESS_STATE_CODE_HIGH_PRIORITY",
		2: "PROCESS_STATE_CODE_LOW_PRIORITY",
		3: "PROCESS_STATE_CODE_LOCKED_PAGES",
		4: "PROCESS_STATE_CODE_SESSION_LEADER",
		5: "PROCESS_STATE_CODE_MULTI_THREADED",
		6: "PROCESS_STATE_CODE_FOREGROUND_PGRP",
	}
	ProcessStateCode_value = map[string]int32{
		"PROCESS_STATE_CODE_UNKNOWN":         0,
		"PROCESS_STATE_CODE_HIGH_PRIORITY":   1,
		"PROCESS_STATE_CODE_LOW_PRIORITY":    2,
		"PROCESS_STATE_CODE_LOCKED_PAGES":    3,
		"PROCESS_STATE_CODE_SESSION_LEADER":  4,
		"PROCESS_STATE_CODE_MULTI_THREADED":  5,
		"PROCESS_STATE_CODE_FOREGROUND_PGRP": 6,
	}
)

func (x ProcessStateCode) Enum() *ProcessStateCode {
	p := new(ProcessStateCode)
	*p = x
	return p
}

func (x ProcessStateCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStateCode) Descriptor() protoreflect.EnumDescriptor {
	return file_process_proto_enumTypes[1].Descriptor()
}

func (ProcessStateCode) Type() protoreflect.EnumType {
	return &file_process_proto_enumTypes[1]
}

func (x ProcessStateCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStateCode.Descriptor instead.
func (ProcessStateCode) EnumDescriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{1}
}

type SchedulingClass int32

const (
	SchedulingClass_SCHEDULING_CLASS_UNKNOWN      SchedulingClass = 0
	SchedulingClass_SCHEDULING_CLASS_NOT_REPORTED SchedulingClass = 1
	SchedulingClass_SCHEDULING_CLASS_OTHER        SchedulingClass = 2
	SchedulingClass_SCHEDULING_CLASS_FIFO         SchedulingClass = 3
	SchedulingClass_SCHEDULING_CLASS_RR           SchedulingClass = 4
	SchedulingClass_SCHEDULING_CLASS_BATCH        SchedulingClass = 5
	SchedulingClass_SCHEDULING_CLASS_ISO          SchedulingClass = 6
	SchedulingClass_SCHEDULING_CLASS_IDLE         SchedulingClass = 7
	SchedulingClass_SCHEDULING_CLASS_DEADLINE     SchedulingClass = 8
)

// Enum value maps for SchedulingClass.
var (
	SchedulingClass_name = map[int32]string{
		0: "SCHEDULING_CLASS_UNKNOWN",
		1: "SCHEDULING_CLASS_NOT_REPORTED",
		2: "SCHEDULING_CLASS_OTHER",
		3: "SCHEDULING_CLASS_FIFO",
		4: "SCHEDULING_CLASS_RR",
		5: "SCHEDULING_CLASS_BATCH",
		6: "SCHEDULING_CLASS_ISO",
		7: "SCHEDULING_CLASS_IDLE",
		8: "SCHEDULING_CLASS_DEADLINE",
	}
	SchedulingClass_value = map[string]int32{
		"SCHEDULING_CLASS_UNKNOWN":      0,
		"SCHEDULING_CLASS_NOT_REPORTED": 1,
		"SCHEDULING_CLASS_OTHER":        2,
		"SCHEDULING_CLASS_FIFO":         3,
		"SCHEDULING_CLASS_RR":           4,
		"SCHEDULING_CLASS_BATCH":        5,
		"SCHEDULING_CLASS_ISO":          6,
		"SCHEDULING_CLASS_IDLE":         7,
		"SCHEDULING_CLASS_DEADLINE":     8,
	}
)

func (x SchedulingClass) Enum() *SchedulingClass {
	p := new(SchedulingClass)
	*p = x
	return p
}

func (x SchedulingClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingClass) Descriptor() protoreflect.EnumDescriptor {
	return file_process_proto_enumTypes[2].Descriptor()
}

func (SchedulingClass) Type() protoreflect.EnumType {
	return &file_process_proto_enumTypes[2]
}

func (x SchedulingClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingClass.Descriptor instead.
func (SchedulingClass) EnumDescriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{2}
}

type BlobDestination int32

const (
	BlobDestination_BLOB_DESTINATION_UNKNOWN BlobDestination = 0
	// Just stream it back.
	BlobDestination_BLOB_DESTINATION_STREAM BlobDestination = 1
	// This state requires an additional field to designate location.
	BlobDestination_BLOB_DESTINATION_URL BlobDestination = 2
)

// Enum value maps for BlobDestination.
var (
	BlobDestination_name = map[int32]string{
		0: "BLOB_DESTINATION_UNKNOWN",
		1: "BLOB_DESTINATION_STREAM",
		2: "BLOB_DESTINATION_URL",
	}
	BlobDestination_value = map[string]int32{
		"BLOB_DESTINATION_UNKNOWN": 0,
		"BLOB_DESTINATION_STREAM":  1,
		"BLOB_DESTINATION_URL":     2,
	}
)

func (x BlobDestination) Enum() *BlobDestination {
	p := new(BlobDestination)
	*p = x
	return p
}

func (x BlobDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_process_proto_enumTypes[3].Descriptor()
}

func (BlobDestination) Type() protoreflect.EnumType {
	return &file_process_proto_enumTypes[3]
}

func (x BlobDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobDestination.Descriptor instead.
func (BlobDestination) EnumDescriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{3}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-empty will only return data on the listed pids.
	// Otherwise all processes are returned.
	Pids []int64 `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0}
}

func (x *ListRequest) GetPids() []int64 {
	if x != nil {
		return x.Pids
	}
	return nil
}

// ProcessEntry describes a process based on ps output.
// It is modeled on the Linux ps command and on other
// OS may return a subset of these values instead.
// i.e. strings will be empty and integer values will be -1
// in those cases.
type ProcessEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid             int64           `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Ppid            int64           `protobuf:"varint,2,opt,name=ppid,proto3" json:"ppid,omitempty"`
	Command         string          `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	ThreadId        int64           `protobuf:"varint,4,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Wchan           string          `protobuf:"bytes,5,opt,name=wchan,proto3" json:"wchan,omitempty"`
	CpuPercent      float32         `protobuf:"fixed32,6,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemPercent      float32         `protobuf:"fixed32,7,opt,name=mem_percent,json=memPercent,proto3" json:"mem_percent,omitempty"`
	StartedTime     string          `protobuf:"bytes,8,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	ElapsedTime     string          `protobuf:"bytes,9,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	Rss             int64           `protobuf:"varint,10,opt,name=rss,proto3" json:"rss,omitempty"`
	Vsize           int64           `protobuf:"varint,11,opt,name=vsize,proto3" json:"vsize,omitempty"`
	Egid            int64           `protobuf:"varint,12,opt,name=egid,proto3" json:"egid,omitempty"`
	Euid            int64           `protobuf:"varint,13,opt,name=euid,proto3" json:"euid,omitempty"`
	Rgid            int64           `protobuf:"varint,14,opt,name=rgid,proto3" json:"rgid,omitempty"`
	Ruid            int64           `protobuf:"varint,15,opt,name=ruid,proto3" json:"ruid,omitempty"`
	Sgid            int64           `protobuf:"varint,16,opt,name=sgid,proto3" json:"sgid,omitempty"`
	Suid            int64           `protobuf:"varint,17,opt,name=suid,proto3" json:"suid,omitempty"`
	Nice            int32           `protobuf:"varint,18,opt,name=nice,proto3" json:"nice,omitempty"`
	Priority        int32           `protobuf:"varint,19,opt,name=priority,proto3" json:"priority,omitempty"`
	SchedulingClass SchedulingClass `protobuf:"varint,20,opt,name=scheduling_class,json=schedulingClass,proto3,enum=Process.SchedulingClass" json:"scheduling_class,omitempty"`
	// OS dependent on what this means (check man ps).
	Flags           int64              `protobuf:"varint,21,opt,name=flags,proto3" json:"flags,omitempty"`
	State           ProcessState       `protobuf:"varint,22,opt,name=state,proto3,enum=Process.ProcessState" json:"state,omitempty"`
	StateCode       []ProcessStateCode `protobuf:"varint,23,rep,packed,name=state_code,json=stateCode,proto3,enum=Process.ProcessStateCode" json:"state_code,omitempty"`
	Eip             int64              `protobuf:"varint,24,opt,name=eip,proto3" json:"eip,omitempty"`
	Esp             int64              `protobuf:"varint,25,opt,name=esp,proto3" json:"esp,omitempty"`
	BlockedSignals  int64              `protobuf:"varint,26,opt,name=blocked_signals,json=blockedSignals,proto3" json:"blocked_signals,omitempty"`
	CaughtSignals   int64              `protobuf:"varint,27,opt,name=caught_signals,json=caughtSignals,proto3" json:"caught_signals,omitempty"`
	IgnoredSignals  int64              `protobuf:"varint,28,opt,name=ignored_signals,json=ignoredSignals,proto3" json:"ignored_signals,omitempty"`
	PendingSignals  int64              `protobuf:"varint,29,opt,name=pending_signals,json=pendingSignals,proto3" json:"pending_signals,omitempty"`
	NumberOfThreads int64              `protobuf:"varint,30,opt,name=number_of_threads,json=numberOfThreads,proto3" json:"number_of_threads,omitempty"`
}

func (x *ProcessEntry) Reset() {
	*x = ProcessEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEntry) ProtoMessage() {}

func (x *ProcessEntry) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEntry.ProtoReflect.Descriptor instead.
func (*ProcessEntry) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessEntry) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessEntry) GetPpid() int64 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *ProcessEntry) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ProcessEntry) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *ProcessEntry) GetWchan() string {
	if x != nil {
		return x.Wchan
	}
	return ""
}

func (x *ProcessEntry) GetCpuPercent() float32 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *ProcessEntry) GetMemPercent() float32 {
	if x != nil {
		return x.MemPercent
	}
	return 0
}

func (x *ProcessEntry) GetStartedTime() string {
	if x != nil {
		return x.StartedTime
	}
	return ""
}

func (x *ProcessEntry) GetElapsedTime() string {
	if x != nil {
		return x.ElapsedTime
	}
	return ""
}

func (x *ProcessEntry) GetRss() int64 {
	if x != nil {
		return x.Rss
	}
	return 0
}

func (x *ProcessEntry) GetVsize() int64 {
	if x != nil {
		return x.Vsize
	}
	return 0
}

func (x *ProcessEntry) GetEgid() int64 {
	if x != nil {
		return x.Egid
	}
	return 0
}

func (x *ProcessEntry) GetEuid() int64 {
	if x != nil {
		return x.Euid
	}
	return 0
}

func (x *ProcessEntry) GetRgid() int64 {
	if x != nil {
		return x.Rgid
	}
	return 0
}

func (x *ProcessEntry) GetRuid() int64 {
	if x != nil {
		return x.Ruid
	}
	return 0
}

func (x *ProcessEntry) GetSgid() int64 {
	if x != nil {
		return x.Sgid
	}
	return 0
}

func (x *ProcessEntry) GetSuid() int64 {
	if x != nil {
		return x.Suid
	}
	return 0
}

func (x *ProcessEntry) GetNice() int32 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *ProcessEntry) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProcessEntry) GetSchedulingClass() SchedulingClass {
	if x != nil {
		return x.SchedulingClass
	}
	return SchedulingClass_SCHEDULING_CLASS_UNKNOWN
}

func (x *ProcessEntry) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ProcessEntry) GetState() ProcessState {
	if x != nil {
		return x.State
	}
	return ProcessState_PROCESS_STATE_UNKNOWN
}

func (x *ProcessEntry) GetStateCode() []ProcessStateCode {
	if x != nil {
		return x.StateCode
	}
	return nil
}

func (x *ProcessEntry) GetEip() int64 {
	if x != nil {
		return x.Eip
	}
	return 0
}

func (x *ProcessEntry) GetEsp() int64 {
	if x != nil {
		return x.Esp
	}
	return 0
}

func (x *ProcessEntry) GetBlockedSignals() int64 {
	if x != nil {
		return x.BlockedSignals
	}
	return 0
}

func (x *ProcessEntry) GetCaughtSignals() int64 {
	if x != nil {
		return x.CaughtSignals
	}
	return 0
}

func (x *ProcessEntry) GetIgnoredSignals() int64 {
	if x != nil {
		return x.IgnoredSignals
	}
	return 0
}

func (x *ProcessEntry) GetPendingSignals() int64 {
	if x != nil {
		return x.PendingSignals
	}
	return 0
}

func (x *ProcessEntry) GetNumberOfThreads() int64 {
	if x != nil {
		return x.NumberOfThreads
	}
	return 0
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of process details which may be limited to only the pids requested.
	ProcessEntries []*ProcessEntry `protobuf:"bytes,1,rep,name=process_entries,json=processEntries,proto3" json:"process_entries,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{2}
}

func (x *ListReply) GetProcessEntries() []*ProcessEntry {
	if x != nil {
		return x.ProcessEntries
	}
	return nil
}

type GetStacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *GetStacksRequest) Reset() {
	*x = GetStacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStacksRequest) ProtoMessage() {}

func (x *GetStacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStacksRequest.ProtoReflect.Descriptor instead.
func (*GetStacksRequest) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{3}
}

func (x *GetStacksRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type ThreadStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadNumber int64    `protobuf:"varint,1,opt,name=thread_number,json=threadNumber,proto3" json:"thread_number,omitempty"`
	ThreadId     int64    `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Lwp          int64    `protobuf:"varint,3,opt,name=lwp,proto3" json:"lwp,omitempty"`
	Stacks       []string `protobuf:"bytes,4,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *ThreadStack) Reset() {
	*x = ThreadStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadStack) ProtoMessage() {}

func (x *ThreadStack) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadStack.ProtoReflect.Descriptor instead.
func (*ThreadStack) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadStack) GetThreadNumber() int64 {
	if x != nil {
		return x.ThreadNumber
	}
	return 0
}

func (x *ThreadStack) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *ThreadStack) GetLwp() int64 {
	if x != nil {
		return x.Lwp
	}
	return 0
}

func (x *ThreadStack) GetStacks() []string {
	if x != nil {
		return x.Stacks
	}
	return nil
}

type GetStacksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stacks []*ThreadStack `protobuf:"bytes,1,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *GetStacksReply) Reset() {
	*x = GetStacksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStacksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStacksReply) ProtoMessage() {}

func (x *GetStacksReply) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStacksReply.ProtoReflect.Descriptor instead.
func (*GetStacksReply) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{5}
}

func (x *GetStacksReply) GetStacks() []*ThreadStack {
	if x != nil {
		return x.Stacks
	}
	return nil
}

type GetJavaStacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *GetJavaStacksRequest) Reset() {
	*x = GetJavaStacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJavaStacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJavaStacksRequest) ProtoMessage() {}

func (x *GetJavaStacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJavaStacksRequest.ProtoReflect.Descriptor instead.
func (*GetJavaStacksRequest) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{6}
}

func (x *GetJavaStacksRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type JavaThreadStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Daemon         bool     `protobuf:"varint,2,opt,name=daemon,proto3" json:"daemon,omitempty"`
	Priority       int32    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	OsPriority     int32    `protobuf:"varint,4,opt,name=os_priority,json=osPriority,proto3" json:"os_priority,omitempty"`
	CpuMs          int64    `protobuf:"varint,5,opt,name=cpu_ms,json=cpuMs,proto3" json:"cpu_ms,omitempty"`
	ElapsedSec     int64    `protobuf:"varint,6,opt,name=elapsed_sec,json=elapsedSec,proto3" json:"elapsed_sec,omitempty"`
	ThreadId       int64    `protobuf:"varint,7,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	NativeThreadId int64    `protobuf:"varint,8,opt,name=native_thread_id,json=nativeThreadId,proto3" json:"native_thread_id,omitempty"`
	State          string   `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	Pc             int64    `protobuf:"varint,10,opt,name=pc,proto3" json:"pc,omitempty"`
	ThreadState    string   `protobuf:"bytes,11,opt,name=thread_state,json=threadState,proto3" json:"thread_state,omitempty"`
	Stacks         []string `protobuf:"bytes,12,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *JavaThreadStack) Reset() {
	*x = JavaThreadStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaThreadStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaThreadStack) ProtoMessage() {}

func (x *JavaThreadStack) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaThreadStack.ProtoReflect.Descriptor instead.
func (*JavaThreadStack) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{7}
}

func (x *JavaThreadStack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JavaThreadStack) GetDaemon() bool {
	if x != nil {
		return x.Daemon
	}
	return false
}

func (x *JavaThreadStack) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JavaThreadStack) GetOsPriority() int32 {
	if x != nil {
		return x.OsPriority
	}
	return 0
}

func (x *JavaThreadStack) GetCpuMs() int64 {
	if x != nil {
		return x.CpuMs
	}
	return 0
}

func (x *JavaThreadStack) GetElapsedSec() int64 {
	if x != nil {
		return x.ElapsedSec
	}
	return 0
}

func (x *JavaThreadStack) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *JavaThreadStack) GetNativeThreadId() int64 {
	if x != nil {
		return x.NativeThreadId
	}
	return 0
}

func (x *JavaThreadStack) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *JavaThreadStack) GetPc() int64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *JavaThreadStack) GetThreadState() string {
	if x != nil {
		return x.ThreadState
	}
	return ""
}

func (x *JavaThreadStack) GetStacks() []string {
	if x != nil {
		return x.Stacks
	}
	return nil
}

type GetJavaStacksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stacks []*JavaThreadStack `protobuf:"bytes,1,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *GetJavaStacksReply) Reset() {
	*x = GetJavaStacksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJavaStacksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJavaStacksReply) ProtoMessage() {}

func (x *GetJavaStacksReply) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJavaStacksReply.ProtoReflect.Descriptor instead.
func (*GetJavaStacksReply) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{8}
}

func (x *GetJavaStacksReply) GetStacks() []*JavaThreadStack {
	if x != nil {
		return x.Stacks
	}
	return nil
}

type GetCoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         int64           `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Destination BlobDestination `protobuf:"varint,2,opt,name=destination,proto3,enum=Process.BlobDestination" json:"destination,omitempty"`
	// Only used for BLOB_DESTINATION_URL
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Any additional data BLOB_DESTINATION_URL may need in order
	// to succeed (such as an auth token for S3).
	BlobData []byte `protobuf:"bytes,4,opt,name=blob_data,json=blobData,proto3" json:"blob_data,omitempty"`
}

func (x *GetCoreRequest) Reset() {
	*x = GetCoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreRequest) ProtoMessage() {}

func (x *GetCoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreRequest.ProtoReflect.Descriptor instead.
func (*GetCoreRequest) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoreRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *GetCoreRequest) GetDestination() BlobDestination {
	if x != nil {
		return x.Destination
	}
	return BlobDestination_BLOB_DESTINATION_UNKNOWN
}

func (x *GetCoreRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetCoreRequest) GetBlobData() []byte {
	if x != nil {
		return x.BlobData
	}
	return nil
}

type GetCoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCoreReply) Reset() {
	*x = GetCoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreReply) ProtoMessage() {}

func (x *GetCoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreReply.ProtoReflect.Descriptor instead.
func (*GetCoreReply) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoreReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetJavaHeapDumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         int64           `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Destination BlobDestination `protobuf:"varint,2,opt,name=destination,proto3,enum=Process.BlobDestination" json:"destination,omitempty"`
	// Only used for BLOB_DESTINATION_URL
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Any additional data BLOB_DESTINATION_URL may need in order
	// to succeed (such as an auth token for S3).
	BlobData []byte `protobuf:"bytes,4,opt,name=blob_data,json=blobData,proto3" json:"blob_data,omitempty"`
}

func (x *GetJavaHeapDumpRequest) Reset() {
	*x = GetJavaHeapDumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJavaHeapDumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJavaHeapDumpRequest) ProtoMessage() {}

func (x *GetJavaHeapDumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJavaHeapDumpRequest.ProtoReflect.Descriptor instead.
func (*GetJavaHeapDumpRequest) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{11}
}

func (x *GetJavaHeapDumpRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *GetJavaHeapDumpRequest) GetDestination() BlobDestination {
	if x != nil {
		return x.Destination
	}
	return BlobDestination_BLOB_DESTINATION_UNKNOWN
}

func (x *GetJavaHeapDumpRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetJavaHeapDumpRequest) GetBlobData() []byte {
	if x != nil {
		return x.BlobData
	}
	return nil
}

type GetJavaHeapDumpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetJavaHeapDumpReply) Reset() {
	*x = GetJavaHeapDumpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJavaHeapDumpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJavaHeapDumpReply) ProtoMessage() {}

func (x *GetJavaHeapDumpReply) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJavaHeapDumpReply.ProtoReflect.Descriptor instead.
func (*GetJavaHeapDumpReply) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{12}
}

func (x *GetJavaHeapDumpReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_process_proto protoreflect.FileDescriptor

var file_process_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x70, 0x69, 0x64, 0x73, 0x22, 0x8d, 0x07, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x63, 0x68,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x63, 0x68, 0x61, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x67, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x65,
	0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x65, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x67, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x67, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x70,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x73, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x79,
	0x0a, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x77, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x77,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x28, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4a, 0x61, 0x76, 0x61, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x0f, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x70, 0x75, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x70, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x48,
	0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x2a, 0xf9, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x4c,
	0x45, 0x45, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f,
	0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x47, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x5a, 0x4f, 0x4d, 0x42, 0x49, 0x45, 0x10, 0x06, 0x2a, 0x98, 0x02, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x03, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x50, 0x47, 0x52, 0x50, 0x10, 0x06, 0x2a, 0x92, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x49, 0x46,
	0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x53, 0x4f,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x2a, 0x66, 0x0a, 0x0f,
	0x42, 0x6c, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c,
	0x4f, 0x42, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x52, 0x4c, 0x10, 0x02, 0x32, 0xe5, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x61,
	0x76, 0x61, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x65, 0x12, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61,
	0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x1f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75,
	0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x73, 0x61, 0x6e, 0x73, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_process_proto_rawDescOnce sync.Once
	file_process_proto_rawDescData = file_process_proto_rawDesc
)

func file_process_proto_rawDescGZIP() []byte {
	file_process_proto_rawDescOnce.Do(func() {
		file_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_process_proto_rawDescData)
	})
	return file_process_proto_rawDescData
}

var file_process_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_process_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_process_proto_goTypes = []interface{}{
	(ProcessState)(0),              // 0: Process.ProcessState
	(ProcessStateCode)(0),          // 1: Process.ProcessStateCode
	(SchedulingClass)(0),           // 2: Process.SchedulingClass
	(BlobDestination)(0),           // 3: Process.BlobDestination
	(*ListRequest)(nil),            // 4: Process.ListRequest
	(*ProcessEntry)(nil),           // 5: Process.ProcessEntry
	(*ListReply)(nil),              // 6: Process.ListReply
	(*GetStacksRequest)(nil),       // 7: Process.GetStacksRequest
	(*ThreadStack)(nil),            // 8: Process.ThreadStack
	(*GetStacksReply)(nil),         // 9: Process.GetStacksReply
	(*GetJavaStacksRequest)(nil),   // 10: Process.GetJavaStacksRequest
	(*JavaThreadStack)(nil),        // 11: Process.JavaThreadStack
	(*GetJavaStacksReply)(nil),     // 12: Process.GetJavaStacksReply
	(*GetCoreRequest)(nil),         // 13: Process.GetCoreRequest
	(*GetCoreReply)(nil),           // 14: Process.GetCoreReply
	(*GetJavaHeapDumpRequest)(nil), // 15: Process.GetJavaHeapDumpRequest
	(*GetJavaHeapDumpReply)(nil),   // 16: Process.GetJavaHeapDumpReply
}
var file_process_proto_depIdxs = []int32{
	2,  // 0: Process.ProcessEntry.scheduling_class:type_name -> Process.SchedulingClass
	0,  // 1: Process.ProcessEntry.state:type_name -> Process.ProcessState
	1,  // 2: Process.ProcessEntry.state_code:type_name -> Process.ProcessStateCode
	5,  // 3: Process.ListReply.process_entries:type_name -> Process.ProcessEntry
	8,  // 4: Process.GetStacksReply.stacks:type_name -> Process.ThreadStack
	11, // 5: Process.GetJavaStacksReply.stacks:type_name -> Process.JavaThreadStack
	3,  // 6: Process.GetCoreRequest.destination:type_name -> Process.BlobDestination
	3,  // 7: Process.GetJavaHeapDumpRequest.destination:type_name -> Process.BlobDestination
	4,  // 8: Process.Process.List:input_type -> Process.ListRequest
	7,  // 9: Process.Process.GetStacks:input_type -> Process.GetStacksRequest
	10, // 10: Process.Process.GetJavaStacks:input_type -> Process.GetJavaStacksRequest
	13, // 11: Process.Process.GetCore:input_type -> Process.GetCoreRequest
	15, // 12: Process.Process.GetJavaHeapDump:input_type -> Process.GetJavaHeapDumpRequest
	6,  // 13: Process.Process.List:output_type -> Process.ListReply
	9,  // 14: Process.Process.GetStacks:output_type -> Process.GetStacksReply
	12, // 15: Process.Process.GetJavaStacks:output_type -> Process.GetJavaStacksReply
	14, // 16: Process.Process.GetCore:output_type -> Process.GetCoreReply
	16, // 17: Process.Process.GetJavaHeapDump:output_type -> Process.GetJavaHeapDumpReply
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_process_proto_init() }
func file_process_proto_init() {
	if File_process_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_process_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStacksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJavaStacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaThreadStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJavaStacksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJavaHeapDumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJavaHeapDumpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_process_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_process_proto_goTypes,
		DependencyIndexes: file_process_proto_depIdxs,
		EnumInfos:         file_process_proto_enumTypes,
		MessageInfos:      file_process_proto_msgTypes,
	}.Build()
	File_process_proto = out.File
	file_process_proto_rawDesc = nil
	file_process_proto_goTypes = nil
	file_process_proto_depIdxs = nil
}
