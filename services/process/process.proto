/* Copyright (c) 2019 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

syntax = "proto3";

option go_package = "github.com/Snowflake-Labs/sansshell/services/process";

package Process;

// The Process service definition.
service Process {
  // List returns the output from the ps command.
  // NOTE: Since this contains the command line this can
  // contain sensitive data.
  rpc List(ListRequest) returns (ListReply) {}
  // GetStacks will return the output from pstack which generally has nothing
  // sensitive in it but depending on function names could have internal details
  // so be careful.
  rpc GetStacks(GetStacksRequest) returns (GetStacksReply) {}
  // GetJavaStacks will return the output from jstack which generally has
  // nothing sensitive in it but depending on function names could have internal
  // details so be careful.
  rpc GetJavaStacks(GetJavaStacksRequest) returns (GetJavaStacksReply) {}
  // GetMemoryDump will return the output from gcore or jmap which 100% has
  // sensitive data contained within it. Be very careful where this is
  // stored/transferred/etc.
  // NOTE: Enough disk space is required to hold the dump file before streaming
  //       the response.
  rpc GetMemoryDump(GetMemoryDumpRequest) returns (stream GetMemoryDumpReply) {}
}

message ListRequest {
  // If non-empty will only return data on the listed pids.
  // Otherwise all processes are returned.
  repeated int64 pids = 1;
}

// ProcessState refers to the single letter state "ps -o s" returns.
enum ProcessState {
  PROCESS_STATE_UNKNOWN = 0;
  // D
  PROCESS_STATE_UNINTERRUPTIBLE_SLEEP = 1;
  // R
  PROCESS_STATE_RUNNING = 2;
  // S
  PROCESS_STATE_INTERRUPTIBLE_SLEEP = 3;
  // T
  PROCESS_STATE_STOPPED_JOB_CONTROL = 4;
  // t
  PROCESS_STATE_STOPPED_DEBUGGER = 5;
  // Z
  PROCESS_STATE_ZOMBIE = 6;
}

// ProcessStateCode interprets the additional characters
// appened to ps -o stat output.
enum ProcessStateCode {
  PROCESS_STATE_CODE_UNKNOWN = 0;
  PROCESS_STATE_CODE_HIGH_PRIORITY = 1;
  PROCESS_STATE_CODE_LOW_PRIORITY = 2;
  PROCESS_STATE_CODE_LOCKED_PAGES = 3;
  PROCESS_STATE_CODE_SESSION_LEADER = 4;
  PROCESS_STATE_CODE_MULTI_THREADED = 5;
  PROCESS_STATE_CODE_FOREGROUND_PGRP = 6;
}

enum SchedulingClass {
  SCHEDULING_CLASS_UNKNOWN = 0;
  SCHEDULING_CLASS_NOT_REPORTED = 1;
  SCHEDULING_CLASS_OTHER = 2;
  SCHEDULING_CLASS_FIFO = 3;
  SCHEDULING_CLASS_RR = 4;
  SCHEDULING_CLASS_BATCH = 5;
  SCHEDULING_CLASS_ISO = 6;
  SCHEDULING_CLASS_IDLE = 7;
  SCHEDULING_CLASS_DEADLINE = 8;
}

// ProcessEntry describes a process based on ps output.
// It is modeled on the Linux ps command and on other
// OS may return a subset of these values instead.
// i.e. strings will be empty and integer values will be -1
// in those cases.
message ProcessEntry {
  int64 pid = 1;
  int64 ppid = 2;
  string command = 3;
  int64 thread_id = 4;
  string wchan = 5;
  float cpu_percent = 6;
  float mem_percent = 7;
  string started_time = 8;
  string elapsed_time = 9;
  int64 rss = 10;
  int64 vsize = 11;
  int64 egid = 12;
  int64 euid = 13;
  int64 rgid = 14;
  int64 ruid = 15;
  int64 sgid = 16;
  int64 suid = 17;
  int32 nice = 18;
  int32 priority = 19;
  SchedulingClass scheduling_class = 20;
  // OS dependent on what this means (check man ps).
  uint64 flags = 21;
  ProcessState state = 22;
  repeated ProcessStateCode state_code = 23;
  uint64 eip = 24;
  uint64 esp = 25;
  uint64 blocked_signals = 26;
  uint64 caught_signals = 27;
  uint64 ignored_signals = 28;
  uint64 pending_signals = 29;
  int64 number_of_threads = 30;
}

message ListReply {
  // A list of process details which may be limited to only the pids requested.
  repeated ProcessEntry process_entries = 1;
}

message GetStacksRequest { int64 pid = 1; }

message ThreadStack {
  int64 thread_number = 1;
  int64 thread_id = 2;
  int64 lwp = 3;
  repeated string stacks = 4;
}

message GetStacksReply { repeated ThreadStack stacks = 1; }

message GetJavaStacksRequest { int64 pid = 1; }

message JavaThreadStack {
  string name = 1;
  int64 thread_number = 2;
  bool daemon = 3;
  int32 priority = 4;
  int32 os_priority = 5;
  float cpu_ms = 6;
  float elapsed_sec = 7;
  int64 thread_id = 8;
  int64 native_thread_id = 9;
  string state = 10;
  int64 pc = 11;
  string thread_state = 12;
  repeated string stacks = 13;
}

message GetJavaStacksReply { repeated JavaThreadStack stacks = 1; }

// DumpType indicates the program to use to generate the dump.
enum DumpType {
  DUMP_TYPE_UNKNOWN = 0;
  DUMP_TYPE_GCORE = 1;
  DUMP_TYPE_JMAP = 2;
}

message DumpDestinationStream {
  // marker message
}

message DumpDestinationUrl {
  string url = 1;
  // Any additional data the URL destination may need in order
  // to succeed (such as an auth token for a blob service).
  bytes blob_data = 2;
}
message GetMemoryDumpRequest {
  int64 pid = 1;
  // Determine which program to use for dumping.
  // For URL based destinations the file will be named heapdump
  // instead of core to also indicate the difference.
  DumpType dump_type = 2;
  oneof destination {
    DumpDestinationStream stream = 3;
    DumpDestinationUrl url = 4;
  }
}

// If the destination is BLOB_DESTINATION_STREAM this will contain
// the memory dump data. If not the remote write will occur and only
// the error status on the stream will indicate success/failure.
message GetMemoryDumpReply { bytes data = 1; }
