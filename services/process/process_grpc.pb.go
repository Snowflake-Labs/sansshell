// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package process

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessClient is the client API for Process service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessClient interface {
	// List returns the output from the ps command.
	// NOTE: Since this contains the command line this can
	// contain sensitive data.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	// GetStacks will return the output from pstack which generally has nothing
	// sensitive in it but depending on function names could have internal details
	// so be careful.
	GetStacks(ctx context.Context, in *GetStacksRequest, opts ...grpc.CallOption) (*GetStacksReply, error)
	// GetJavaStacks will return the output from jstack which generally has
	// nothing sensitive in it but depending on function names could have internal
	// details so be careful.
	GetJavaStacks(ctx context.Context, in *GetJavaStacksRequest, opts ...grpc.CallOption) (*GetJavaStacksReply, error)
	// GetCore will return the output from gcore which 100% has
	// sensitive data contained within it. Be very careful where this is
	// stored/transferred/etc.
	GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (Process_GetCoreClient, error)
	// GetJavaHeapDump will return the output from jmap which 100% has
	// sensitive data contained within it. Be very careful where this is
	// stored/transferred/etc.
	GetJavaHeapDump(ctx context.Context, in *GetJavaHeapDumpRequest, opts ...grpc.CallOption) (Process_GetJavaHeapDumpClient, error)
}

type processClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessClient(cc grpc.ClientConnInterface) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/Process.Process/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) GetStacks(ctx context.Context, in *GetStacksRequest, opts ...grpc.CallOption) (*GetStacksReply, error) {
	out := new(GetStacksReply)
	err := c.cc.Invoke(ctx, "/Process.Process/GetStacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) GetJavaStacks(ctx context.Context, in *GetJavaStacksRequest, opts ...grpc.CallOption) (*GetJavaStacksReply, error) {
	out := new(GetJavaStacksReply)
	err := c.cc.Invoke(ctx, "/Process.Process/GetJavaStacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) GetCore(ctx context.Context, in *GetCoreRequest, opts ...grpc.CallOption) (Process_GetCoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[0], "/Process.Process/GetCore", opts...)
	if err != nil {
		return nil, err
	}
	x := &processGetCoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_GetCoreClient interface {
	Recv() (*GetCoreReply, error)
	grpc.ClientStream
}

type processGetCoreClient struct {
	grpc.ClientStream
}

func (x *processGetCoreClient) Recv() (*GetCoreReply, error) {
	m := new(GetCoreReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processClient) GetJavaHeapDump(ctx context.Context, in *GetJavaHeapDumpRequest, opts ...grpc.CallOption) (Process_GetJavaHeapDumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &Process_ServiceDesc.Streams[1], "/Process.Process/GetJavaHeapDump", opts...)
	if err != nil {
		return nil, err
	}
	x := &processGetJavaHeapDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Process_GetJavaHeapDumpClient interface {
	Recv() (*GetJavaHeapDumpReply, error)
	grpc.ClientStream
}

type processGetJavaHeapDumpClient struct {
	grpc.ClientStream
}

func (x *processGetJavaHeapDumpClient) Recv() (*GetJavaHeapDumpReply, error) {
	m := new(GetJavaHeapDumpReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServer is the server API for Process service.
// All implementations should embed UnimplementedProcessServer
// for forward compatibility
type ProcessServer interface {
	// List returns the output from the ps command.
	// NOTE: Since this contains the command line this can
	// contain sensitive data.
	List(context.Context, *ListRequest) (*ListReply, error)
	// GetStacks will return the output from pstack which generally has nothing
	// sensitive in it but depending on function names could have internal details
	// so be careful.
	GetStacks(context.Context, *GetStacksRequest) (*GetStacksReply, error)
	// GetJavaStacks will return the output from jstack which generally has
	// nothing sensitive in it but depending on function names could have internal
	// details so be careful.
	GetJavaStacks(context.Context, *GetJavaStacksRequest) (*GetJavaStacksReply, error)
	// GetCore will return the output from gcore which 100% has
	// sensitive data contained within it. Be very careful where this is
	// stored/transferred/etc.
	GetCore(*GetCoreRequest, Process_GetCoreServer) error
	// GetJavaHeapDump will return the output from jmap which 100% has
	// sensitive data contained within it. Be very careful where this is
	// stored/transferred/etc.
	GetJavaHeapDump(*GetJavaHeapDumpRequest, Process_GetJavaHeapDumpServer) error
}

// UnimplementedProcessServer should be embedded to have forward compatible implementations.
type UnimplementedProcessServer struct {
}

func (UnimplementedProcessServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProcessServer) GetStacks(context.Context, *GetStacksRequest) (*GetStacksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStacks not implemented")
}
func (UnimplementedProcessServer) GetJavaStacks(context.Context, *GetJavaStacksRequest) (*GetJavaStacksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJavaStacks not implemented")
}
func (UnimplementedProcessServer) GetCore(*GetCoreRequest, Process_GetCoreServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCore not implemented")
}
func (UnimplementedProcessServer) GetJavaHeapDump(*GetJavaHeapDumpRequest, Process_GetJavaHeapDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJavaHeapDump not implemented")
}

// UnsafeProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServer will
// result in compilation errors.
type UnsafeProcessServer interface {
	mustEmbedUnimplementedProcessServer()
}

func RegisterProcessServer(s grpc.ServiceRegistrar, srv ProcessServer) {
	s.RegisterService(&Process_ServiceDesc, srv)
}

func _Process_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process.Process/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_GetStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).GetStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process.Process/GetStacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).GetStacks(ctx, req.(*GetStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_GetJavaStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJavaStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).GetJavaStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Process.Process/GetJavaStacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).GetJavaStacks(ctx, req.(*GetJavaStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_GetCore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).GetCore(m, &processGetCoreServer{stream})
}

type Process_GetCoreServer interface {
	Send(*GetCoreReply) error
	grpc.ServerStream
}

type processGetCoreServer struct {
	grpc.ServerStream
}

func (x *processGetCoreServer) Send(m *GetCoreReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Process_GetJavaHeapDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJavaHeapDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServer).GetJavaHeapDump(m, &processGetJavaHeapDumpServer{stream})
}

type Process_GetJavaHeapDumpServer interface {
	Send(*GetJavaHeapDumpReply) error
	grpc.ServerStream
}

type processGetJavaHeapDumpServer struct {
	grpc.ServerStream
}

func (x *processGetJavaHeapDumpServer) Send(m *GetJavaHeapDumpReply) error {
	return x.ServerStream.SendMsg(m)
}

// Process_ServiceDesc is the grpc.ServiceDesc for Process service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Process_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Process.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Process_List_Handler,
		},
		{
			MethodName: "GetStacks",
			Handler:    _Process_GetStacks_Handler,
		},
		{
			MethodName: "GetJavaStacks",
			Handler:    _Process_GetJavaStacks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCore",
			Handler:       _Process_GetCore_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJavaHeapDump",
			Handler:       _Process_GetJavaHeapDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "process.proto",
}
