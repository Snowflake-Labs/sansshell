/* Copyright (c) 2023 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

syntax = "proto3";

option go_package = "github.com/Snowflake-Labs/sansshell/services/sysinfo";

package SysInfo;

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// The SysInfo service definition.
service SysInfo {
  // Uptime return 
  rpc Uptime(google.protobuf.Empty) returns (UptimeReply) {}
  // display kernel-related messages 
  rpc Dmesg(DmesgRequest) returns (stream DmesgReply) {}
  // Journal returns journal entries collected by systemd journald service
  rpc Journal(JournalRequest) returns (stream JournalReply) {}
}

message UptimeReply {
 // show the uptime in protobuf.Duration
  google.protobuf.Duration uptime_seconds = 1;  
}

// DmesgRequest describes the filename to be tailed.
message DmesgRequest {
 // tail the number of line from the dmesg output, negative means display all messages
 int32 tail_lines = 1;
 string grep = 2;
 bool ignore_case = 3;
 bool invert_match = 4;
}

// DmesgReply contains the messages from kernel 
message DmesgReply {
  DmsgRecord record = 1;
}

// DmesgRecord contains the specific fields about the a dmesg record
message DmsgRecord{
  google.protobuf.Timestamp time = 1;
  string message = 2;
}

message JournalRequest {
  // The start time for query, timestamp format will be YYYY-MM-DD HH:MM:SS 
  google.protobuf.Timestamp time_since = 1;
  // The end time for query
  google.protobuf.Timestamp time_until = 2;
  // Tail the latest number of log entries from the journal, negative means display all messages 
  uint32 tail_line = 3;
  // Filter messages for specified systemd units  
  string unit = 4;
  // Controls the format of the journal entries
  bool enable_json = 5;
}

message JournalReply {
  oneof response {
    JournalRecord journal = 1;
    JournalRecordRaw journalRaw = 2;
  }
}

// journal record is the default format
// and contains fields the same as journalctl output in linux 
message JournalRecord {
  google.protobuf.Timestamp realtime_timestamp = 1;
  string hostname = 2;
  string syslog_identifier = 3;
  int32 pid = 4;
  string message = 5;
}

// raw journal record will contain most fields 
// and display in specified output format
message JournalRecordRaw {
  // when output is set to json or json-pretty
  // a list of key-value pairs will be set here
  // the key-value pairs will be different with different messages
  map<string, string> entry = 1;
}
