// Copyright (c) 2019 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: fdb.proto

package fdb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Location) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *Location) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{1}
}

func (x *ReadRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Value    string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{2}
}

func (x *WriteRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *WriteRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type FdbConfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FdbConfResponse) Reset() {
	*x = FdbConfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbConfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbConfResponse) ProtoMessage() {}

func (x *FdbConfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbConfResponse.ProtoReflect.Descriptor instead.
func (*FdbConfResponse) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{4}
}

func (x *FdbConfResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FDBCLIAdvanceversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FDBCLIAdvanceversion) Reset() {
	*x = FDBCLIAdvanceversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIAdvanceversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIAdvanceversion) ProtoMessage() {}

func (x *FDBCLIAdvanceversion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIAdvanceversion.ProtoReflect.Descriptor instead.
func (*FDBCLIAdvanceversion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{5}
}

func (x *FDBCLIAdvanceversion) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FDBCLIBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIBegin) Reset() {
	*x = FDBCLIBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIBegin) ProtoMessage() {}

func (x *FDBCLIBegin) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIBegin.ProtoReflect.Descriptor instead.
func (*FDBCLIBegin) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{6}
}

type FDBCLIBlobrangeStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *FDBCLIBlobrangeStart) Reset() {
	*x = FDBCLIBlobrangeStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIBlobrangeStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIBlobrangeStart) ProtoMessage() {}

func (x *FDBCLIBlobrangeStart) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIBlobrangeStart.ProtoReflect.Descriptor instead.
func (*FDBCLIBlobrangeStart) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{7}
}

func (x *FDBCLIBlobrangeStart) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLIBlobrangeStart) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type FDBCLIBlobrangeStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *FDBCLIBlobrangeStop) Reset() {
	*x = FDBCLIBlobrangeStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIBlobrangeStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIBlobrangeStop) ProtoMessage() {}

func (x *FDBCLIBlobrangeStop) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIBlobrangeStop.ProtoReflect.Descriptor instead.
func (*FDBCLIBlobrangeStop) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{8}
}

func (x *FDBCLIBlobrangeStop) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLIBlobrangeStop) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type FDBCLIBlobrange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIBlobrange_Start
	//	*FDBCLIBlobrange_Stop
	Request isFDBCLIBlobrange_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIBlobrange) Reset() {
	*x = FDBCLIBlobrange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIBlobrange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIBlobrange) ProtoMessage() {}

func (x *FDBCLIBlobrange) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIBlobrange.ProtoReflect.Descriptor instead.
func (*FDBCLIBlobrange) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{9}
}

func (m *FDBCLIBlobrange) GetRequest() isFDBCLIBlobrange_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIBlobrange) GetStart() *FDBCLIBlobrangeStart {
	if x, ok := x.GetRequest().(*FDBCLIBlobrange_Start); ok {
		return x.Start
	}
	return nil
}

func (x *FDBCLIBlobrange) GetStop() *FDBCLIBlobrangeStop {
	if x, ok := x.GetRequest().(*FDBCLIBlobrange_Stop); ok {
		return x.Stop
	}
	return nil
}

type isFDBCLIBlobrange_Request interface {
	isFDBCLIBlobrange_Request()
}

type FDBCLIBlobrange_Start struct {
	Start *FDBCLIBlobrangeStart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type FDBCLIBlobrange_Stop struct {
	Stop *FDBCLIBlobrangeStop `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

func (*FDBCLIBlobrange_Start) isFDBCLIBlobrange_Request() {}

func (*FDBCLIBlobrange_Stop) isFDBCLIBlobrange_Request() {}

type FDBCLICacheRangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *FDBCLICacheRangeSet) Reset() {
	*x = FDBCLICacheRangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICacheRangeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICacheRangeSet) ProtoMessage() {}

func (x *FDBCLICacheRangeSet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICacheRangeSet.ProtoReflect.Descriptor instead.
func (*FDBCLICacheRangeSet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{10}
}

func (x *FDBCLICacheRangeSet) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLICacheRangeSet) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type FDBCLICacheRangeClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *FDBCLICacheRangeClear) Reset() {
	*x = FDBCLICacheRangeClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICacheRangeClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICacheRangeClear) ProtoMessage() {}

func (x *FDBCLICacheRangeClear) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICacheRangeClear.ProtoReflect.Descriptor instead.
func (*FDBCLICacheRangeClear) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{11}
}

func (x *FDBCLICacheRangeClear) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLICacheRangeClear) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type FDBCLICacheRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLICacheRange_Set
	//	*FDBCLICacheRange_Clear
	Request isFDBCLICacheRange_Request `protobuf_oneof:"request"`
}

func (x *FDBCLICacheRange) Reset() {
	*x = FDBCLICacheRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICacheRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICacheRange) ProtoMessage() {}

func (x *FDBCLICacheRange) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICacheRange.ProtoReflect.Descriptor instead.
func (*FDBCLICacheRange) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{12}
}

func (m *FDBCLICacheRange) GetRequest() isFDBCLICacheRange_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLICacheRange) GetSet() *FDBCLICacheRangeSet {
	if x, ok := x.GetRequest().(*FDBCLICacheRange_Set); ok {
		return x.Set
	}
	return nil
}

func (x *FDBCLICacheRange) GetClear() *FDBCLICacheRangeClear {
	if x, ok := x.GetRequest().(*FDBCLICacheRange_Clear); ok {
		return x.Clear
	}
	return nil
}

type isFDBCLICacheRange_Request interface {
	isFDBCLICacheRange_Request()
}

type FDBCLICacheRange_Set struct {
	Set *FDBCLICacheRangeSet `protobuf:"bytes,1,opt,name=set,proto3,oneof"`
}

type FDBCLICacheRange_Clear struct {
	Clear *FDBCLICacheRangeClear `protobuf:"bytes,2,opt,name=clear,proto3,oneof"`
}

func (*FDBCLICacheRange_Set) isFDBCLICacheRange_Request() {}

func (*FDBCLICacheRange_Clear) isFDBCLICacheRange_Request() {}

type FDBCLIChangefeedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIChangefeedList) Reset() {
	*x = FDBCLIChangefeedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedList) ProtoMessage() {}

func (x *FDBCLIChangefeedList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedList.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{13}
}

type FDBCLIChangefeedRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId string `protobuf:"bytes,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Begin   string `protobuf:"bytes,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End     string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *FDBCLIChangefeedRegister) Reset() {
	*x = FDBCLIChangefeedRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedRegister) ProtoMessage() {}

func (x *FDBCLIChangefeedRegister) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedRegister.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedRegister) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{14}
}

func (x *FDBCLIChangefeedRegister) GetRangeId() string {
	if x != nil {
		return x.RangeId
	}
	return ""
}

func (x *FDBCLIChangefeedRegister) GetBegin() string {
	if x != nil {
		return x.Begin
	}
	return ""
}

func (x *FDBCLIChangefeedRegister) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type FDBCLIChangefeedStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId string `protobuf:"bytes,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (x *FDBCLIChangefeedStop) Reset() {
	*x = FDBCLIChangefeedStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStop) ProtoMessage() {}

func (x *FDBCLIChangefeedStop) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStop.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStop) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{15}
}

func (x *FDBCLIChangefeedStop) GetRangeId() string {
	if x != nil {
		return x.RangeId
	}
	return ""
}

type FDBCLIChangefeedDestroy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId string `protobuf:"bytes,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (x *FDBCLIChangefeedDestroy) Reset() {
	*x = FDBCLIChangefeedDestroy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedDestroy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedDestroy) ProtoMessage() {}

func (x *FDBCLIChangefeedDestroy) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedDestroy.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedDestroy) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{16}
}

func (x *FDBCLIChangefeedDestroy) GetRangeId() string {
	if x != nil {
		return x.RangeId
	}
	return ""
}

type FDBCLIChangefeedStreamNoVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIChangefeedStreamNoVersion) Reset() {
	*x = FDBCLIChangefeedStreamNoVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStreamNoVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStreamNoVersion) ProtoMessage() {}

func (x *FDBCLIChangefeedStreamNoVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStreamNoVersion.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStreamNoVersion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{17}
}

type FDBCLIChangefeedStreamStartVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVersion int64 `protobuf:"varint,1,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
}

func (x *FDBCLIChangefeedStreamStartVersion) Reset() {
	*x = FDBCLIChangefeedStreamStartVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStreamStartVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStreamStartVersion) ProtoMessage() {}

func (x *FDBCLIChangefeedStreamStartVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStreamStartVersion.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStreamStartVersion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{18}
}

func (x *FDBCLIChangefeedStreamStartVersion) GetStartVersion() int64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

type FDBCLIChangefeedStreamStartEndVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVersion int64 `protobuf:"varint,1,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	EndVersion   int64 `protobuf:"varint,2,opt,name=end_version,json=endVersion,proto3" json:"end_version,omitempty"`
}

func (x *FDBCLIChangefeedStreamStartEndVersion) Reset() {
	*x = FDBCLIChangefeedStreamStartEndVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStreamStartEndVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStreamStartEndVersion) ProtoMessage() {}

func (x *FDBCLIChangefeedStreamStartEndVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStreamStartEndVersion.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStreamStartEndVersion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{19}
}

func (x *FDBCLIChangefeedStreamStartEndVersion) GetStartVersion() int64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *FDBCLIChangefeedStreamStartEndVersion) GetEndVersion() int64 {
	if x != nil {
		return x.EndVersion
	}
	return 0
}

type FDBCLIChangefeedStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId string `protobuf:"bytes,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	// Either begin only is set or begin+end. Can't just set end.
	//
	// Types that are assignable to Type:
	//
	//	*FDBCLIChangefeedStream_NoVersion
	//	*FDBCLIChangefeedStream_StartVersion
	//	*FDBCLIChangefeedStream_StartEndVersion
	Type isFDBCLIChangefeedStream_Type `protobuf_oneof:"type"`
}

func (x *FDBCLIChangefeedStream) Reset() {
	*x = FDBCLIChangefeedStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStream) ProtoMessage() {}

func (x *FDBCLIChangefeedStream) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStream.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStream) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{20}
}

func (x *FDBCLIChangefeedStream) GetRangeId() string {
	if x != nil {
		return x.RangeId
	}
	return ""
}

func (m *FDBCLIChangefeedStream) GetType() isFDBCLIChangefeedStream_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FDBCLIChangefeedStream) GetNoVersion() *FDBCLIChangefeedStreamNoVersion {
	if x, ok := x.GetType().(*FDBCLIChangefeedStream_NoVersion); ok {
		return x.NoVersion
	}
	return nil
}

func (x *FDBCLIChangefeedStream) GetStartVersion() *FDBCLIChangefeedStreamStartVersion {
	if x, ok := x.GetType().(*FDBCLIChangefeedStream_StartVersion); ok {
		return x.StartVersion
	}
	return nil
}

func (x *FDBCLIChangefeedStream) GetStartEndVersion() *FDBCLIChangefeedStreamStartEndVersion {
	if x, ok := x.GetType().(*FDBCLIChangefeedStream_StartEndVersion); ok {
		return x.StartEndVersion
	}
	return nil
}

type isFDBCLIChangefeedStream_Type interface {
	isFDBCLIChangefeedStream_Type()
}

type FDBCLIChangefeedStream_NoVersion struct {
	NoVersion *FDBCLIChangefeedStreamNoVersion `protobuf:"bytes,2,opt,name=no_version,json=noVersion,proto3,oneof"`
}

type FDBCLIChangefeedStream_StartVersion struct {
	StartVersion *FDBCLIChangefeedStreamStartVersion `protobuf:"bytes,3,opt,name=start_version,json=startVersion,proto3,oneof"`
}

type FDBCLIChangefeedStream_StartEndVersion struct {
	StartEndVersion *FDBCLIChangefeedStreamStartEndVersion `protobuf:"bytes,4,opt,name=start_end_version,json=startEndVersion,proto3,oneof"`
}

func (*FDBCLIChangefeedStream_NoVersion) isFDBCLIChangefeedStream_Type() {}

func (*FDBCLIChangefeedStream_StartVersion) isFDBCLIChangefeedStream_Type() {}

func (*FDBCLIChangefeedStream_StartEndVersion) isFDBCLIChangefeedStream_Type() {}

type FDBCLIChangefeedStreamPop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeId string `protobuf:"bytes,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FDBCLIChangefeedStreamPop) Reset() {
	*x = FDBCLIChangefeedStreamPop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeedStreamPop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeedStreamPop) ProtoMessage() {}

func (x *FDBCLIChangefeedStreamPop) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeedStreamPop.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeedStreamPop) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{21}
}

func (x *FDBCLIChangefeedStreamPop) GetRangeId() string {
	if x != nil {
		return x.RangeId
	}
	return ""
}

func (x *FDBCLIChangefeedStreamPop) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FDBCLIChangefeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIChangefeed_List
	//	*FDBCLIChangefeed_Register
	//	*FDBCLIChangefeed_Stop
	//	*FDBCLIChangefeed_Destroy
	//	*FDBCLIChangefeed_Stream
	//	*FDBCLIChangefeed_Pop
	Request isFDBCLIChangefeed_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIChangefeed) Reset() {
	*x = FDBCLIChangefeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIChangefeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIChangefeed) ProtoMessage() {}

func (x *FDBCLIChangefeed) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIChangefeed.ProtoReflect.Descriptor instead.
func (*FDBCLIChangefeed) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{22}
}

func (m *FDBCLIChangefeed) GetRequest() isFDBCLIChangefeed_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIChangefeed) GetList() *FDBCLIChangefeedList {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_List); ok {
		return x.List
	}
	return nil
}

func (x *FDBCLIChangefeed) GetRegister() *FDBCLIChangefeedRegister {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_Register); ok {
		return x.Register
	}
	return nil
}

func (x *FDBCLIChangefeed) GetStop() *FDBCLIChangefeedStop {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_Stop); ok {
		return x.Stop
	}
	return nil
}

func (x *FDBCLIChangefeed) GetDestroy() *FDBCLIChangefeedDestroy {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_Destroy); ok {
		return x.Destroy
	}
	return nil
}

func (x *FDBCLIChangefeed) GetStream() *FDBCLIChangefeedStream {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *FDBCLIChangefeed) GetPop() *FDBCLIChangefeedStreamPop {
	if x, ok := x.GetRequest().(*FDBCLIChangefeed_Pop); ok {
		return x.Pop
	}
	return nil
}

type isFDBCLIChangefeed_Request interface {
	isFDBCLIChangefeed_Request()
}

type FDBCLIChangefeed_List struct {
	List *FDBCLIChangefeedList `protobuf:"bytes,1,opt,name=list,proto3,oneof"`
}

type FDBCLIChangefeed_Register struct {
	Register *FDBCLIChangefeedRegister `protobuf:"bytes,2,opt,name=register,proto3,oneof"`
}

type FDBCLIChangefeed_Stop struct {
	Stop *FDBCLIChangefeedStop `protobuf:"bytes,3,opt,name=stop,proto3,oneof"`
}

type FDBCLIChangefeed_Destroy struct {
	Destroy *FDBCLIChangefeedDestroy `protobuf:"bytes,4,opt,name=destroy,proto3,oneof"`
}

type FDBCLIChangefeed_Stream struct {
	Stream *FDBCLIChangefeedStream `protobuf:"bytes,5,opt,name=stream,proto3,oneof"`
}

type FDBCLIChangefeed_Pop struct {
	Pop *FDBCLIChangefeedStreamPop `protobuf:"bytes,6,opt,name=pop,proto3,oneof"`
}

func (*FDBCLIChangefeed_List) isFDBCLIChangefeed_Request() {}

func (*FDBCLIChangefeed_Register) isFDBCLIChangefeed_Request() {}

func (*FDBCLIChangefeed_Stop) isFDBCLIChangefeed_Request() {}

func (*FDBCLIChangefeed_Destroy) isFDBCLIChangefeed_Request() {}

func (*FDBCLIChangefeed_Stream) isFDBCLIChangefeed_Request() {}

func (*FDBCLIChangefeed_Pop) isFDBCLIChangefeed_Request() {}

type FDBCLIClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *FDBCLIClear) Reset() {
	*x = FDBCLIClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIClear) ProtoMessage() {}

func (x *FDBCLIClear) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIClear.ProtoReflect.Descriptor instead.
func (*FDBCLIClear) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{23}
}

func (x *FDBCLIClear) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FDBCLIClearrange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *FDBCLIClearrange) Reset() {
	*x = FDBCLIClearrange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIClearrange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIClearrange) ProtoMessage() {}

func (x *FDBCLIClearrange) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIClearrange.ProtoReflect.Descriptor instead.
func (*FDBCLIClearrange) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{24}
}

func (x *FDBCLIClearrange) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLIClearrange) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

type FDBCLICommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLICommit) Reset() {
	*x = FDBCLICommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICommit) ProtoMessage() {}

func (x *FDBCLICommit) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICommit.ProtoReflect.Descriptor instead.
func (*FDBCLICommit) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{25}
}

// See
// https://apple.github.io/foundationdb/command-line-interface.html#configure
// for possible values for options.
type FDBCLIConfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewOrTss                       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=new_or_tss,json=newOrTss,proto3" json:"new_or_tss,omitempty"`
	RedundancyMode                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=redundancy_mode,json=redundancyMode,proto3" json:"redundancy_mode,omitempty"`
	StorageEngine                  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=storage_engine,json=storageEngine,proto3" json:"storage_engine,omitempty"`
	GrvProxies                     *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=grv_proxies,json=grvProxies,proto3" json:"grv_proxies,omitempty"`
	CommitProxies                  *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=commit_proxies,json=commitProxies,proto3" json:"commit_proxies,omitempty"`
	Resolvers                      *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=resolvers,proto3" json:"resolvers,omitempty"`
	Logs                           *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=logs,proto3" json:"logs,omitempty"`
	Count                          *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=count,proto3" json:"count,omitempty"`
	PerpetualStorageWiggle         *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=perpetual_storage_wiggle,json=perpetualStorageWiggle,proto3" json:"perpetual_storage_wiggle,omitempty"`
	PerpetualStorageWiggleLocality *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=perpetual_storage_wiggle_locality,json=perpetualStorageWiggleLocality,proto3" json:"perpetual_storage_wiggle_locality,omitempty"`
	StorageMigrationType           *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=storage_migration_type,json=storageMigrationType,proto3" json:"storage_migration_type,omitempty"`
	TenantMode                     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=tenant_mode,json=tenantMode,proto3" json:"tenant_mode,omitempty"`
}

func (x *FDBCLIConfigure) Reset() {
	*x = FDBCLIConfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIConfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIConfigure) ProtoMessage() {}

func (x *FDBCLIConfigure) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIConfigure.ProtoReflect.Descriptor instead.
func (*FDBCLIConfigure) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{26}
}

func (x *FDBCLIConfigure) GetNewOrTss() *wrapperspb.StringValue {
	if x != nil {
		return x.NewOrTss
	}
	return nil
}

func (x *FDBCLIConfigure) GetRedundancyMode() *wrapperspb.StringValue {
	if x != nil {
		return x.RedundancyMode
	}
	return nil
}

func (x *FDBCLIConfigure) GetStorageEngine() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageEngine
	}
	return nil
}

func (x *FDBCLIConfigure) GetGrvProxies() *wrapperspb.UInt32Value {
	if x != nil {
		return x.GrvProxies
	}
	return nil
}

func (x *FDBCLIConfigure) GetCommitProxies() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CommitProxies
	}
	return nil
}

func (x *FDBCLIConfigure) GetResolvers() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *FDBCLIConfigure) GetLogs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *FDBCLIConfigure) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FDBCLIConfigure) GetPerpetualStorageWiggle() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PerpetualStorageWiggle
	}
	return nil
}

func (x *FDBCLIConfigure) GetPerpetualStorageWiggleLocality() *wrapperspb.StringValue {
	if x != nil {
		return x.PerpetualStorageWiggleLocality
	}
	return nil
}

func (x *FDBCLIConfigure) GetStorageMigrationType() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageMigrationType
	}
	return nil
}

func (x *FDBCLIConfigure) GetTenantMode() *wrapperspb.StringValue {
	if x != nil {
		return x.TenantMode
	}
	return nil
}

type FDBCLIConsistencycheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *FDBCLIConsistencycheck) Reset() {
	*x = FDBCLIConsistencycheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIConsistencycheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIConsistencycheck) ProtoMessage() {}

func (x *FDBCLIConsistencycheck) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIConsistencycheck.ProtoReflect.Descriptor instead.
func (*FDBCLIConsistencycheck) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{27}
}

func (x *FDBCLIConsistencycheck) GetMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

type FDBCLICoordinatorsAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLICoordinatorsAuto) Reset() {
	*x = FDBCLICoordinatorsAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICoordinatorsAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICoordinatorsAuto) ProtoMessage() {}

func (x *FDBCLICoordinatorsAuto) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICoordinatorsAuto.ProtoReflect.Descriptor instead.
func (*FDBCLICoordinatorsAuto) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{28}
}

type FDBCLICoordinatorsAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLICoordinatorsAddresses) Reset() {
	*x = FDBCLICoordinatorsAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICoordinatorsAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICoordinatorsAddresses) ProtoMessage() {}

func (x *FDBCLICoordinatorsAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICoordinatorsAddresses.ProtoReflect.Descriptor instead.
func (*FDBCLICoordinatorsAddresses) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{29}
}

func (x *FDBCLICoordinatorsAddresses) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLICoordinators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLICoordinators_Auto
	//	*FDBCLICoordinators_Addresses
	Request     isFDBCLICoordinators_Request `protobuf_oneof:"request"`
	Description *wrapperspb.StringValue      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *FDBCLICoordinators) Reset() {
	*x = FDBCLICoordinators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICoordinators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICoordinators) ProtoMessage() {}

func (x *FDBCLICoordinators) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICoordinators.ProtoReflect.Descriptor instead.
func (*FDBCLICoordinators) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{30}
}

func (m *FDBCLICoordinators) GetRequest() isFDBCLICoordinators_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLICoordinators) GetAuto() *FDBCLICoordinatorsAuto {
	if x, ok := x.GetRequest().(*FDBCLICoordinators_Auto); ok {
		return x.Auto
	}
	return nil
}

func (x *FDBCLICoordinators) GetAddresses() *FDBCLICoordinatorsAddresses {
	if x, ok := x.GetRequest().(*FDBCLICoordinators_Addresses); ok {
		return x.Addresses
	}
	return nil
}

func (x *FDBCLICoordinators) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type isFDBCLICoordinators_Request interface {
	isFDBCLICoordinators_Request()
}

type FDBCLICoordinators_Auto struct {
	Auto *FDBCLICoordinatorsAuto `protobuf:"bytes,1,opt,name=auto,proto3,oneof"`
}

type FDBCLICoordinators_Addresses struct {
	Addresses *FDBCLICoordinatorsAddresses `protobuf:"bytes,2,opt,name=addresses,proto3,oneof"`
}

func (*FDBCLICoordinators_Auto) isFDBCLICoordinators_Request() {}

func (*FDBCLICoordinators_Addresses) isFDBCLICoordinators_Request() {}

type FDBCLICreatetenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FDBCLICreatetenant) Reset() {
	*x = FDBCLICreatetenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICreatetenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICreatetenant) ProtoMessage() {}

func (x *FDBCLICreatetenant) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICreatetenant.ProtoReflect.Descriptor instead.
func (*FDBCLICreatetenant) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{31}
}

func (x *FDBCLICreatetenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FDBCLIDatadistributionOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIDatadistributionOn) Reset() {
	*x = FDBCLIDatadistributionOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDatadistributionOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDatadistributionOn) ProtoMessage() {}

func (x *FDBCLIDatadistributionOn) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDatadistributionOn.ProtoReflect.Descriptor instead.
func (*FDBCLIDatadistributionOn) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{32}
}

type FDBCLIDatadistributionOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIDatadistributionOff) Reset() {
	*x = FDBCLIDatadistributionOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDatadistributionOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDatadistributionOff) ProtoMessage() {}

func (x *FDBCLIDatadistributionOff) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDatadistributionOff.ProtoReflect.Descriptor instead.
func (*FDBCLIDatadistributionOff) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{33}
}

type FDBCLIDatadistributionEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option string `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *FDBCLIDatadistributionEnable) Reset() {
	*x = FDBCLIDatadistributionEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDatadistributionEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDatadistributionEnable) ProtoMessage() {}

func (x *FDBCLIDatadistributionEnable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDatadistributionEnable.ProtoReflect.Descriptor instead.
func (*FDBCLIDatadistributionEnable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{34}
}

func (x *FDBCLIDatadistributionEnable) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

type FDBCLIDatadistributionDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option string `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *FDBCLIDatadistributionDisable) Reset() {
	*x = FDBCLIDatadistributionDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDatadistributionDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDatadistributionDisable) ProtoMessage() {}

func (x *FDBCLIDatadistributionDisable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDatadistributionDisable.ProtoReflect.Descriptor instead.
func (*FDBCLIDatadistributionDisable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{35}
}

func (x *FDBCLIDatadistributionDisable) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

type FDBCLIDatadistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIDatadistribution_On
	//	*FDBCLIDatadistribution_Off
	//	*FDBCLIDatadistribution_Enable
	//	*FDBCLIDatadistribution_Disable
	Request isFDBCLIDatadistribution_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIDatadistribution) Reset() {
	*x = FDBCLIDatadistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDatadistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDatadistribution) ProtoMessage() {}

func (x *FDBCLIDatadistribution) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDatadistribution.ProtoReflect.Descriptor instead.
func (*FDBCLIDatadistribution) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{36}
}

func (m *FDBCLIDatadistribution) GetRequest() isFDBCLIDatadistribution_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIDatadistribution) GetOn() *FDBCLIDatadistributionOn {
	if x, ok := x.GetRequest().(*FDBCLIDatadistribution_On); ok {
		return x.On
	}
	return nil
}

func (x *FDBCLIDatadistribution) GetOff() *FDBCLIDatadistributionOff {
	if x, ok := x.GetRequest().(*FDBCLIDatadistribution_Off); ok {
		return x.Off
	}
	return nil
}

func (x *FDBCLIDatadistribution) GetEnable() *FDBCLIDatadistributionEnable {
	if x, ok := x.GetRequest().(*FDBCLIDatadistribution_Enable); ok {
		return x.Enable
	}
	return nil
}

func (x *FDBCLIDatadistribution) GetDisable() *FDBCLIDatadistributionDisable {
	if x, ok := x.GetRequest().(*FDBCLIDatadistribution_Disable); ok {
		return x.Disable
	}
	return nil
}

type isFDBCLIDatadistribution_Request interface {
	isFDBCLIDatadistribution_Request()
}

type FDBCLIDatadistribution_On struct {
	On *FDBCLIDatadistributionOn `protobuf:"bytes,1,opt,name=on,proto3,oneof"`
}

type FDBCLIDatadistribution_Off struct {
	Off *FDBCLIDatadistributionOff `protobuf:"bytes,2,opt,name=off,proto3,oneof"`
}

type FDBCLIDatadistribution_Enable struct {
	Enable *FDBCLIDatadistributionEnable `protobuf:"bytes,3,opt,name=enable,proto3,oneof"`
}

type FDBCLIDatadistribution_Disable struct {
	Disable *FDBCLIDatadistributionDisable `protobuf:"bytes,4,opt,name=disable,proto3,oneof"`
}

func (*FDBCLIDatadistribution_On) isFDBCLIDatadistribution_Request() {}

func (*FDBCLIDatadistribution_Off) isFDBCLIDatadistribution_Request() {}

func (*FDBCLIDatadistribution_Enable) isFDBCLIDatadistribution_Request() {}

func (*FDBCLIDatadistribution_Disable) isFDBCLIDatadistribution_Request() {}

type FDBCLIDefaulttenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIDefaulttenant) Reset() {
	*x = FDBCLIDefaulttenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDefaulttenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDefaulttenant) ProtoMessage() {}

func (x *FDBCLIDefaulttenant) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDefaulttenant.ProtoReflect.Descriptor instead.
func (*FDBCLIDefaulttenant) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{37}
}

type FDBCLIDeletetenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FDBCLIDeletetenant) Reset() {
	*x = FDBCLIDeletetenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIDeletetenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIDeletetenant) ProtoMessage() {}

func (x *FDBCLIDeletetenant) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIDeletetenant.ProtoReflect.Descriptor instead.
func (*FDBCLIDeletetenant) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{38}
}

func (x *FDBCLIDeletetenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FDBCLIExclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed    *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=failed,proto3" json:"failed,omitempty"`
	Addresses []string              `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLIExclude) Reset() {
	*x = FDBCLIExclude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExclude) ProtoMessage() {}

func (x *FDBCLIExclude) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExclude.ProtoReflect.Descriptor instead.
func (*FDBCLIExclude) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{39}
}

func (x *FDBCLIExclude) GetFailed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *FDBCLIExclude) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLIExpensiveDataCheckInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIExpensiveDataCheckInit) Reset() {
	*x = FDBCLIExpensiveDataCheckInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExpensiveDataCheckInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExpensiveDataCheckInit) ProtoMessage() {}

func (x *FDBCLIExpensiveDataCheckInit) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExpensiveDataCheckInit.ProtoReflect.Descriptor instead.
func (*FDBCLIExpensiveDataCheckInit) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{40}
}

type FDBCLIExpensiveDataCheckList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIExpensiveDataCheckList) Reset() {
	*x = FDBCLIExpensiveDataCheckList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExpensiveDataCheckList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExpensiveDataCheckList) ProtoMessage() {}

func (x *FDBCLIExpensiveDataCheckList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExpensiveDataCheckList.ProtoReflect.Descriptor instead.
func (*FDBCLIExpensiveDataCheckList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{41}
}

type FDBCLIExpensiveDataCheckAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIExpensiveDataCheckAll) Reset() {
	*x = FDBCLIExpensiveDataCheckAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExpensiveDataCheckAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExpensiveDataCheckAll) ProtoMessage() {}

func (x *FDBCLIExpensiveDataCheckAll) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExpensiveDataCheckAll.ProtoReflect.Descriptor instead.
func (*FDBCLIExpensiveDataCheckAll) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{42}
}

type FDBCLIExpensiveDataCheckCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLIExpensiveDataCheckCheck) Reset() {
	*x = FDBCLIExpensiveDataCheckCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExpensiveDataCheckCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExpensiveDataCheckCheck) ProtoMessage() {}

func (x *FDBCLIExpensiveDataCheckCheck) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExpensiveDataCheckCheck.ProtoReflect.Descriptor instead.
func (*FDBCLIExpensiveDataCheckCheck) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{43}
}

func (x *FDBCLIExpensiveDataCheckCheck) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLIExpensiveDataCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIExpensiveDataCheck_Init
	//	*FDBCLIExpensiveDataCheck_List
	//	*FDBCLIExpensiveDataCheck_All
	//	*FDBCLIExpensiveDataCheck_Check
	Request isFDBCLIExpensiveDataCheck_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIExpensiveDataCheck) Reset() {
	*x = FDBCLIExpensiveDataCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIExpensiveDataCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIExpensiveDataCheck) ProtoMessage() {}

func (x *FDBCLIExpensiveDataCheck) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIExpensiveDataCheck.ProtoReflect.Descriptor instead.
func (*FDBCLIExpensiveDataCheck) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{44}
}

func (m *FDBCLIExpensiveDataCheck) GetRequest() isFDBCLIExpensiveDataCheck_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIExpensiveDataCheck) GetInit() *FDBCLIExpensiveDataCheckInit {
	if x, ok := x.GetRequest().(*FDBCLIExpensiveDataCheck_Init); ok {
		return x.Init
	}
	return nil
}

func (x *FDBCLIExpensiveDataCheck) GetList() *FDBCLIExpensiveDataCheckList {
	if x, ok := x.GetRequest().(*FDBCLIExpensiveDataCheck_List); ok {
		return x.List
	}
	return nil
}

func (x *FDBCLIExpensiveDataCheck) GetAll() *FDBCLIExpensiveDataCheckAll {
	if x, ok := x.GetRequest().(*FDBCLIExpensiveDataCheck_All); ok {
		return x.All
	}
	return nil
}

func (x *FDBCLIExpensiveDataCheck) GetCheck() *FDBCLIExpensiveDataCheckCheck {
	if x, ok := x.GetRequest().(*FDBCLIExpensiveDataCheck_Check); ok {
		return x.Check
	}
	return nil
}

type isFDBCLIExpensiveDataCheck_Request interface {
	isFDBCLIExpensiveDataCheck_Request()
}

type FDBCLIExpensiveDataCheck_Init struct {
	Init *FDBCLIExpensiveDataCheckInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type FDBCLIExpensiveDataCheck_List struct {
	List *FDBCLIExpensiveDataCheckList `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

type FDBCLIExpensiveDataCheck_All struct {
	All *FDBCLIExpensiveDataCheckAll `protobuf:"bytes,3,opt,name=all,proto3,oneof"`
}

type FDBCLIExpensiveDataCheck_Check struct {
	Check *FDBCLIExpensiveDataCheckCheck `protobuf:"bytes,4,opt,name=check,proto3,oneof"`
}

func (*FDBCLIExpensiveDataCheck_Init) isFDBCLIExpensiveDataCheck_Request() {}

func (*FDBCLIExpensiveDataCheck_List) isFDBCLIExpensiveDataCheck_Request() {}

func (*FDBCLIExpensiveDataCheck_All) isFDBCLIExpensiveDataCheck_Request() {}

func (*FDBCLIExpensiveDataCheck_Check) isFDBCLIExpensiveDataCheck_Request() {}

type FDBCLIFileconfigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New  *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=new,proto3" json:"new,omitempty"`
	File string                `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *FDBCLIFileconfigure) Reset() {
	*x = FDBCLIFileconfigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIFileconfigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIFileconfigure) ProtoMessage() {}

func (x *FDBCLIFileconfigure) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIFileconfigure.ProtoReflect.Descriptor instead.
func (*FDBCLIFileconfigure) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{45}
}

func (x *FDBCLIFileconfigure) GetNew() *wrapperspb.BoolValue {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *FDBCLIFileconfigure) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type FDBCLIForceRecoveryWithDataLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcid string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
}

func (x *FDBCLIForceRecoveryWithDataLoss) Reset() {
	*x = FDBCLIForceRecoveryWithDataLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIForceRecoveryWithDataLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIForceRecoveryWithDataLoss) ProtoMessage() {}

func (x *FDBCLIForceRecoveryWithDataLoss) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIForceRecoveryWithDataLoss.ProtoReflect.Descriptor instead.
func (*FDBCLIForceRecoveryWithDataLoss) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{46}
}

func (x *FDBCLIForceRecoveryWithDataLoss) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

type FDBCLIGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *FDBCLIGet) Reset() {
	*x = FDBCLIGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIGet) ProtoMessage() {}

func (x *FDBCLIGet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIGet.ProtoReflect.Descriptor instead.
func (*FDBCLIGet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{47}
}

func (x *FDBCLIGet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FDBCLIGetrange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string                  `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Limit    *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FDBCLIGetrange) Reset() {
	*x = FDBCLIGetrange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIGetrange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIGetrange) ProtoMessage() {}

func (x *FDBCLIGetrange) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIGetrange.ProtoReflect.Descriptor instead.
func (*FDBCLIGetrange) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{48}
}

func (x *FDBCLIGetrange) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLIGetrange) GetEndKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *FDBCLIGetrange) GetLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type FDBCLIGetrangekeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginKey string                  `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Limit    *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FDBCLIGetrangekeys) Reset() {
	*x = FDBCLIGetrangekeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIGetrangekeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIGetrangekeys) ProtoMessage() {}

func (x *FDBCLIGetrangekeys) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIGetrangekeys.ProtoReflect.Descriptor instead.
func (*FDBCLIGetrangekeys) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{49}
}

func (x *FDBCLIGetrangekeys) GetBeginKey() string {
	if x != nil {
		return x.BeginKey
	}
	return ""
}

func (x *FDBCLIGetrangekeys) GetEndKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *FDBCLIGetrangekeys) GetLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type FDBCLIGettenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FDBCLIGettenant) Reset() {
	*x = FDBCLIGettenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIGettenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIGettenant) ProtoMessage() {}

func (x *FDBCLIGettenant) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIGettenant.ProtoReflect.Descriptor instead.
func (*FDBCLIGettenant) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{50}
}

func (x *FDBCLIGettenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FDBCLIGetversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIGetversion) Reset() {
	*x = FDBCLIGetversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIGetversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIGetversion) ProtoMessage() {}

func (x *FDBCLIGetversion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIGetversion.ProtoReflect.Descriptor instead.
func (*FDBCLIGetversion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{51}
}

type FDBCLIHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *FDBCLIHelp) Reset() {
	*x = FDBCLIHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIHelp) ProtoMessage() {}

func (x *FDBCLIHelp) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIHelp.ProtoReflect.Descriptor instead.
func (*FDBCLIHelp) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{52}
}

func (x *FDBCLIHelp) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type FDBCLIIncludeAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLIIncludeAddresses) Reset() {
	*x = FDBCLIIncludeAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIIncludeAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIIncludeAddresses) ProtoMessage() {}

func (x *FDBCLIIncludeAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIIncludeAddresses.ProtoReflect.Descriptor instead.
func (*FDBCLIIncludeAddresses) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{53}
}

func (x *FDBCLIIncludeAddresses) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLIInclude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=failed,proto3" json:"failed,omitempty"`
	// Types that are assignable to Request:
	//
	//	*FDBCLIInclude_All
	//	*FDBCLIInclude_Addresses
	Request isFDBCLIInclude_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIInclude) Reset() {
	*x = FDBCLIInclude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIInclude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIInclude) ProtoMessage() {}

func (x *FDBCLIInclude) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIInclude.ProtoReflect.Descriptor instead.
func (*FDBCLIInclude) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{54}
}

func (x *FDBCLIInclude) GetFailed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (m *FDBCLIInclude) GetRequest() isFDBCLIInclude_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIInclude) GetAll() bool {
	if x, ok := x.GetRequest().(*FDBCLIInclude_All); ok {
		return x.All
	}
	return false
}

func (x *FDBCLIInclude) GetAddresses() *FDBCLIIncludeAddresses {
	if x, ok := x.GetRequest().(*FDBCLIInclude_Addresses); ok {
		return x.Addresses
	}
	return nil
}

type isFDBCLIInclude_Request interface {
	isFDBCLIInclude_Request()
}

type FDBCLIInclude_All struct {
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type FDBCLIInclude_Addresses struct {
	Addresses *FDBCLIIncludeAddresses `protobuf:"bytes,3,opt,name=addresses,proto3,oneof"`
}

func (*FDBCLIInclude_All) isFDBCLIInclude_Request() {}

func (*FDBCLIInclude_Addresses) isFDBCLIInclude_Request() {}

type FDBCLIKillInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIKillInit) Reset() {
	*x = FDBCLIKillInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIKillInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIKillInit) ProtoMessage() {}

func (x *FDBCLIKillInit) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIKillInit.ProtoReflect.Descriptor instead.
func (*FDBCLIKillInit) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{55}
}

type FDBCLIKillList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIKillList) Reset() {
	*x = FDBCLIKillList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIKillList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIKillList) ProtoMessage() {}

func (x *FDBCLIKillList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIKillList.ProtoReflect.Descriptor instead.
func (*FDBCLIKillList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{56}
}

type FDBCLIKillAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIKillAll) Reset() {
	*x = FDBCLIKillAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIKillAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIKillAll) ProtoMessage() {}

func (x *FDBCLIKillAll) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIKillAll.ProtoReflect.Descriptor instead.
func (*FDBCLIKillAll) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{57}
}

type FDBCLIKillTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLIKillTargets) Reset() {
	*x = FDBCLIKillTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIKillTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIKillTargets) ProtoMessage() {}

func (x *FDBCLIKillTargets) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIKillTargets.ProtoReflect.Descriptor instead.
func (*FDBCLIKillTargets) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{58}
}

func (x *FDBCLIKillTargets) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLIKill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIKill_Init
	//	*FDBCLIKill_List
	//	*FDBCLIKill_All
	//	*FDBCLIKill_Targets
	Request isFDBCLIKill_Request `protobuf_oneof:"request"`
	// Duration to sleep after sending the kill command.
	//
	// fdbcli may return before message is actually sent.
	// See https://github.com/apple/foundationdb/pull/9526
	Sleep *durationpb.Duration `protobuf:"bytes,5,opt,name=sleep,proto3" json:"sleep,omitempty"`
}

func (x *FDBCLIKill) Reset() {
	*x = FDBCLIKill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIKill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIKill) ProtoMessage() {}

func (x *FDBCLIKill) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIKill.ProtoReflect.Descriptor instead.
func (*FDBCLIKill) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{59}
}

func (m *FDBCLIKill) GetRequest() isFDBCLIKill_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIKill) GetInit() *FDBCLIKillInit {
	if x, ok := x.GetRequest().(*FDBCLIKill_Init); ok {
		return x.Init
	}
	return nil
}

func (x *FDBCLIKill) GetList() *FDBCLIKillList {
	if x, ok := x.GetRequest().(*FDBCLIKill_List); ok {
		return x.List
	}
	return nil
}

func (x *FDBCLIKill) GetAll() *FDBCLIKillAll {
	if x, ok := x.GetRequest().(*FDBCLIKill_All); ok {
		return x.All
	}
	return nil
}

func (x *FDBCLIKill) GetTargets() *FDBCLIKillTargets {
	if x, ok := x.GetRequest().(*FDBCLIKill_Targets); ok {
		return x.Targets
	}
	return nil
}

func (x *FDBCLIKill) GetSleep() *durationpb.Duration {
	if x != nil {
		return x.Sleep
	}
	return nil
}

type isFDBCLIKill_Request interface {
	isFDBCLIKill_Request()
}

type FDBCLIKill_Init struct {
	Init *FDBCLIKillInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type FDBCLIKill_List struct {
	List *FDBCLIKillList `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

type FDBCLIKill_All struct {
	All *FDBCLIKillAll `protobuf:"bytes,3,opt,name=all,proto3,oneof"`
}

type FDBCLIKill_Targets struct {
	Targets *FDBCLIKillTargets `protobuf:"bytes,4,opt,name=targets,proto3,oneof"`
}

func (*FDBCLIKill_Init) isFDBCLIKill_Request() {}

func (*FDBCLIKill_List) isFDBCLIKill_Request() {}

func (*FDBCLIKill_All) isFDBCLIKill_Request() {}

func (*FDBCLIKill_Targets) isFDBCLIKill_Request() {}

type FDBCLIListtenants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Limit *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FDBCLIListtenants) Reset() {
	*x = FDBCLIListtenants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIListtenants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIListtenants) ProtoMessage() {}

func (x *FDBCLIListtenants) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIListtenants.ProtoReflect.Descriptor instead.
func (*FDBCLIListtenants) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{60}
}

func (x *FDBCLIListtenants) GetBegin() *wrapperspb.StringValue {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *FDBCLIListtenants) GetEnd() *wrapperspb.StringValue {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *FDBCLIListtenants) GetLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type FDBCLILock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLILock) Reset() {
	*x = FDBCLILock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLILock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLILock) ProtoMessage() {}

func (x *FDBCLILock) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLILock.ProtoReflect.Descriptor instead.
func (*FDBCLILock) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{61}
}

type FDBCLIMaintenanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIMaintenanceStatus) Reset() {
	*x = FDBCLIMaintenanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIMaintenanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIMaintenanceStatus) ProtoMessage() {}

func (x *FDBCLIMaintenanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIMaintenanceStatus.ProtoReflect.Descriptor instead.
func (*FDBCLIMaintenanceStatus) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{62}
}

type FDBCLIMaintenanceOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zoneid  string `protobuf:"bytes,1,opt,name=zoneid,proto3" json:"zoneid,omitempty"`
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *FDBCLIMaintenanceOn) Reset() {
	*x = FDBCLIMaintenanceOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIMaintenanceOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIMaintenanceOn) ProtoMessage() {}

func (x *FDBCLIMaintenanceOn) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIMaintenanceOn.ProtoReflect.Descriptor instead.
func (*FDBCLIMaintenanceOn) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{63}
}

func (x *FDBCLIMaintenanceOn) GetZoneid() string {
	if x != nil {
		return x.Zoneid
	}
	return ""
}

func (x *FDBCLIMaintenanceOn) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type FDBCLIMaintenanceOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIMaintenanceOff) Reset() {
	*x = FDBCLIMaintenanceOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIMaintenanceOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIMaintenanceOff) ProtoMessage() {}

func (x *FDBCLIMaintenanceOff) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIMaintenanceOff.ProtoReflect.Descriptor instead.
func (*FDBCLIMaintenanceOff) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{64}
}

type FDBCLIMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIMaintenance_Status
	//	*FDBCLIMaintenance_On
	//	*FDBCLIMaintenance_Off
	Request isFDBCLIMaintenance_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIMaintenance) Reset() {
	*x = FDBCLIMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIMaintenance) ProtoMessage() {}

func (x *FDBCLIMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIMaintenance.ProtoReflect.Descriptor instead.
func (*FDBCLIMaintenance) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{65}
}

func (m *FDBCLIMaintenance) GetRequest() isFDBCLIMaintenance_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIMaintenance) GetStatus() *FDBCLIMaintenanceStatus {
	if x, ok := x.GetRequest().(*FDBCLIMaintenance_Status); ok {
		return x.Status
	}
	return nil
}

func (x *FDBCLIMaintenance) GetOn() *FDBCLIMaintenanceOn {
	if x, ok := x.GetRequest().(*FDBCLIMaintenance_On); ok {
		return x.On
	}
	return nil
}

func (x *FDBCLIMaintenance) GetOff() *FDBCLIMaintenanceOff {
	if x, ok := x.GetRequest().(*FDBCLIMaintenance_Off); ok {
		return x.Off
	}
	return nil
}

type isFDBCLIMaintenance_Request interface {
	isFDBCLIMaintenance_Request()
}

type FDBCLIMaintenance_Status struct {
	Status *FDBCLIMaintenanceStatus `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type FDBCLIMaintenance_On struct {
	On *FDBCLIMaintenanceOn `protobuf:"bytes,2,opt,name=on,proto3,oneof"`
}

type FDBCLIMaintenance_Off struct {
	Off *FDBCLIMaintenanceOff `protobuf:"bytes,3,opt,name=off,proto3,oneof"`
}

func (*FDBCLIMaintenance_Status) isFDBCLIMaintenance_Request() {}

func (*FDBCLIMaintenance_On) isFDBCLIMaintenance_Request() {}

func (*FDBCLIMaintenance_Off) isFDBCLIMaintenance_Request() {}

type FDBCLIOptionBlank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIOptionBlank) Reset() {
	*x = FDBCLIOptionBlank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIOptionBlank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIOptionBlank) ProtoMessage() {}

func (x *FDBCLIOptionBlank) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIOptionBlank.ProtoReflect.Descriptor instead.
func (*FDBCLIOptionBlank) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{66}
}

type FDBCLIOptionArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  string                  `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Option string                  `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
	Arg    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *FDBCLIOptionArg) Reset() {
	*x = FDBCLIOptionArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIOptionArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIOptionArg) ProtoMessage() {}

func (x *FDBCLIOptionArg) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIOptionArg.ProtoReflect.Descriptor instead.
func (*FDBCLIOptionArg) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{67}
}

func (x *FDBCLIOptionArg) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FDBCLIOptionArg) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

func (x *FDBCLIOptionArg) GetArg() *wrapperspb.StringValue {
	if x != nil {
		return x.Arg
	}
	return nil
}

type FDBCLIOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIOption_Blank
	//	*FDBCLIOption_Arg
	Request isFDBCLIOption_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIOption) Reset() {
	*x = FDBCLIOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIOption) ProtoMessage() {}

func (x *FDBCLIOption) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIOption.ProtoReflect.Descriptor instead.
func (*FDBCLIOption) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{68}
}

func (m *FDBCLIOption) GetRequest() isFDBCLIOption_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIOption) GetBlank() *FDBCLIOptionBlank {
	if x, ok := x.GetRequest().(*FDBCLIOption_Blank); ok {
		return x.Blank
	}
	return nil
}

func (x *FDBCLIOption) GetArg() *FDBCLIOptionArg {
	if x, ok := x.GetRequest().(*FDBCLIOption_Arg); ok {
		return x.Arg
	}
	return nil
}

type isFDBCLIOption_Request interface {
	isFDBCLIOption_Request()
}

type FDBCLIOption_Blank struct {
	Blank *FDBCLIOptionBlank `protobuf:"bytes,1,opt,name=blank,proto3,oneof"`
}

type FDBCLIOption_Arg struct {
	Arg *FDBCLIOptionArg `protobuf:"bytes,2,opt,name=arg,proto3,oneof"`
}

func (*FDBCLIOption_Blank) isFDBCLIOption_Request() {}

func (*FDBCLIOption_Arg) isFDBCLIOption_Request() {}

type FDBCLIProfileActionClientDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIProfileActionClientDefault) Reset() {
	*x = FDBCLIProfileActionClientDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionClientDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionClientDefault) ProtoMessage() {}

func (x *FDBCLIProfileActionClientDefault) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionClientDefault.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionClientDefault) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{69}
}

type FDBCLIProfileActionClientGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIProfileActionClientGet) Reset() {
	*x = FDBCLIProfileActionClientGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionClientGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionClientGet) ProtoMessage() {}

func (x *FDBCLIProfileActionClientGet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionClientGet.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionClientGet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{70}
}

type FDBCLIProfileActionClientSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//
	//	*FDBCLIProfileActionClientSet_DefaultRate
	//	*FDBCLIProfileActionClientSet_ValueRate
	Rate isFDBCLIProfileActionClientSet_Rate `protobuf_oneof:"rate"`
	// Types that are assignable to Size:
	//
	//	*FDBCLIProfileActionClientSet_DefaultSize
	//	*FDBCLIProfileActionClientSet_ValueSize
	Size isFDBCLIProfileActionClientSet_Size `protobuf_oneof:"size"`
}

func (x *FDBCLIProfileActionClientSet) Reset() {
	*x = FDBCLIProfileActionClientSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionClientSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionClientSet) ProtoMessage() {}

func (x *FDBCLIProfileActionClientSet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionClientSet.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionClientSet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{71}
}

func (m *FDBCLIProfileActionClientSet) GetRate() isFDBCLIProfileActionClientSet_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *FDBCLIProfileActionClientSet) GetDefaultRate() *FDBCLIProfileActionClientDefault {
	if x, ok := x.GetRate().(*FDBCLIProfileActionClientSet_DefaultRate); ok {
		return x.DefaultRate
	}
	return nil
}

func (x *FDBCLIProfileActionClientSet) GetValueRate() float64 {
	if x, ok := x.GetRate().(*FDBCLIProfileActionClientSet_ValueRate); ok {
		return x.ValueRate
	}
	return 0
}

func (m *FDBCLIProfileActionClientSet) GetSize() isFDBCLIProfileActionClientSet_Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (x *FDBCLIProfileActionClientSet) GetDefaultSize() *FDBCLIProfileActionClientDefault {
	if x, ok := x.GetSize().(*FDBCLIProfileActionClientSet_DefaultSize); ok {
		return x.DefaultSize
	}
	return nil
}

func (x *FDBCLIProfileActionClientSet) GetValueSize() uint64 {
	if x, ok := x.GetSize().(*FDBCLIProfileActionClientSet_ValueSize); ok {
		return x.ValueSize
	}
	return 0
}

type isFDBCLIProfileActionClientSet_Rate interface {
	isFDBCLIProfileActionClientSet_Rate()
}

type FDBCLIProfileActionClientSet_DefaultRate struct {
	DefaultRate *FDBCLIProfileActionClientDefault `protobuf:"bytes,1,opt,name=default_rate,json=defaultRate,proto3,oneof"`
}

type FDBCLIProfileActionClientSet_ValueRate struct {
	ValueRate float64 `protobuf:"fixed64,2,opt,name=value_rate,json=valueRate,proto3,oneof"`
}

func (*FDBCLIProfileActionClientSet_DefaultRate) isFDBCLIProfileActionClientSet_Rate() {}

func (*FDBCLIProfileActionClientSet_ValueRate) isFDBCLIProfileActionClientSet_Rate() {}

type isFDBCLIProfileActionClientSet_Size interface {
	isFDBCLIProfileActionClientSet_Size()
}

type FDBCLIProfileActionClientSet_DefaultSize struct {
	DefaultSize *FDBCLIProfileActionClientDefault `protobuf:"bytes,3,opt,name=default_size,json=defaultSize,proto3,oneof"`
}

type FDBCLIProfileActionClientSet_ValueSize struct {
	ValueSize uint64 `protobuf:"varint,4,opt,name=value_size,json=valueSize,proto3,oneof"`
}

func (*FDBCLIProfileActionClientSet_DefaultSize) isFDBCLIProfileActionClientSet_Size() {}

func (*FDBCLIProfileActionClientSet_ValueSize) isFDBCLIProfileActionClientSet_Size() {}

type FDBCLIProfileActionClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIProfileActionClient_Get
	//	*FDBCLIProfileActionClient_Set
	Request isFDBCLIProfileActionClient_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIProfileActionClient) Reset() {
	*x = FDBCLIProfileActionClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionClient) ProtoMessage() {}

func (x *FDBCLIProfileActionClient) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionClient.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionClient) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{72}
}

func (m *FDBCLIProfileActionClient) GetRequest() isFDBCLIProfileActionClient_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIProfileActionClient) GetGet() *FDBCLIProfileActionClientGet {
	if x, ok := x.GetRequest().(*FDBCLIProfileActionClient_Get); ok {
		return x.Get
	}
	return nil
}

func (x *FDBCLIProfileActionClient) GetSet() *FDBCLIProfileActionClientSet {
	if x, ok := x.GetRequest().(*FDBCLIProfileActionClient_Set); ok {
		return x.Set
	}
	return nil
}

type isFDBCLIProfileActionClient_Request interface {
	isFDBCLIProfileActionClient_Request()
}

type FDBCLIProfileActionClient_Get struct {
	Get *FDBCLIProfileActionClientGet `protobuf:"bytes,1,opt,name=get,proto3,oneof"`
}

type FDBCLIProfileActionClient_Set struct {
	Set *FDBCLIProfileActionClientSet `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

func (*FDBCLIProfileActionClient_Get) isFDBCLIProfileActionClient_Request() {}

func (*FDBCLIProfileActionClient_Set) isFDBCLIProfileActionClient_Request() {}

type FDBCLIProfileActionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIProfileActionList) Reset() {
	*x = FDBCLIProfileActionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionList) ProtoMessage() {}

func (x *FDBCLIProfileActionList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionList.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{73}
}

type FDBCLIProfileActionFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Client should simulate file. Internally
	// handled and returned in a Log below.
	Processes []string `protobuf:"bytes,2,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *FDBCLIProfileActionFlow) Reset() {
	*x = FDBCLIProfileActionFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionFlow) ProtoMessage() {}

func (x *FDBCLIProfileActionFlow) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionFlow.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionFlow) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{74}
}

func (x *FDBCLIProfileActionFlow) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FDBCLIProfileActionFlow) GetProcesses() []string {
	if x != nil {
		return x.Processes
	}
	return nil
}

type FDBCLIProfileActionHeap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process string `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *FDBCLIProfileActionHeap) Reset() {
	*x = FDBCLIProfileActionHeap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfileActionHeap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfileActionHeap) ProtoMessage() {}

func (x *FDBCLIProfileActionHeap) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfileActionHeap.ProtoReflect.Descriptor instead.
func (*FDBCLIProfileActionHeap) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{75}
}

func (x *FDBCLIProfileActionHeap) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

type FDBCLIProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIProfile_Client
	//	*FDBCLIProfile_List
	//	*FDBCLIProfile_Flow
	//	*FDBCLIProfile_Heap
	Request isFDBCLIProfile_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIProfile) Reset() {
	*x = FDBCLIProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIProfile) ProtoMessage() {}

func (x *FDBCLIProfile) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIProfile.ProtoReflect.Descriptor instead.
func (*FDBCLIProfile) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{76}
}

func (m *FDBCLIProfile) GetRequest() isFDBCLIProfile_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIProfile) GetClient() *FDBCLIProfileActionClient {
	if x, ok := x.GetRequest().(*FDBCLIProfile_Client); ok {
		return x.Client
	}
	return nil
}

func (x *FDBCLIProfile) GetList() *FDBCLIProfileActionList {
	if x, ok := x.GetRequest().(*FDBCLIProfile_List); ok {
		return x.List
	}
	return nil
}

func (x *FDBCLIProfile) GetFlow() *FDBCLIProfileActionFlow {
	if x, ok := x.GetRequest().(*FDBCLIProfile_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *FDBCLIProfile) GetHeap() *FDBCLIProfileActionHeap {
	if x, ok := x.GetRequest().(*FDBCLIProfile_Heap); ok {
		return x.Heap
	}
	return nil
}

type isFDBCLIProfile_Request interface {
	isFDBCLIProfile_Request()
}

type FDBCLIProfile_Client struct {
	Client *FDBCLIProfileActionClient `protobuf:"bytes,1,opt,name=client,proto3,oneof"`
}

type FDBCLIProfile_List struct {
	List *FDBCLIProfileActionList `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

type FDBCLIProfile_Flow struct {
	Flow *FDBCLIProfileActionFlow `protobuf:"bytes,3,opt,name=flow,proto3,oneof"`
}

type FDBCLIProfile_Heap struct {
	Heap *FDBCLIProfileActionHeap `protobuf:"bytes,4,opt,name=heap,proto3,oneof"`
}

func (*FDBCLIProfile_Client) isFDBCLIProfile_Request() {}

func (*FDBCLIProfile_List) isFDBCLIProfile_Request() {}

func (*FDBCLIProfile_Flow) isFDBCLIProfile_Request() {}

func (*FDBCLIProfile_Heap) isFDBCLIProfile_Request() {}

type FDBCLISet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FDBCLISet) Reset() {
	*x = FDBCLISet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISet) ProtoMessage() {}

func (x *FDBCLISet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISet.ProtoReflect.Descriptor instead.
func (*FDBCLISet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{77}
}

func (x *FDBCLISet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FDBCLISet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FDBCLISetclassArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Class   string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *FDBCLISetclassArg) Reset() {
	*x = FDBCLISetclassArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISetclassArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISetclassArg) ProtoMessage() {}

func (x *FDBCLISetclassArg) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISetclassArg.ProtoReflect.Descriptor instead.
func (*FDBCLISetclassArg) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{78}
}

func (x *FDBCLISetclassArg) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FDBCLISetclassArg) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

// Use this message to indicate no arguments to setclass
type FDBCLISetclassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLISetclassList) Reset() {
	*x = FDBCLISetclassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISetclassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISetclassList) ProtoMessage() {}

func (x *FDBCLISetclassList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISetclassList.ProtoReflect.Descriptor instead.
func (*FDBCLISetclassList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{79}
}

type FDBCLISetclass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLISetclass_List
	//	*FDBCLISetclass_Arg
	Request isFDBCLISetclass_Request `protobuf_oneof:"request"`
}

func (x *FDBCLISetclass) Reset() {
	*x = FDBCLISetclass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISetclass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISetclass) ProtoMessage() {}

func (x *FDBCLISetclass) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISetclass.ProtoReflect.Descriptor instead.
func (*FDBCLISetclass) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{80}
}

func (m *FDBCLISetclass) GetRequest() isFDBCLISetclass_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLISetclass) GetList() *FDBCLISetclassList {
	if x, ok := x.GetRequest().(*FDBCLISetclass_List); ok {
		return x.List
	}
	return nil
}

func (x *FDBCLISetclass) GetArg() *FDBCLISetclassArg {
	if x, ok := x.GetRequest().(*FDBCLISetclass_Arg); ok {
		return x.Arg
	}
	return nil
}

type isFDBCLISetclass_Request interface {
	isFDBCLISetclass_Request()
}

type FDBCLISetclass_List struct {
	List *FDBCLISetclassList `protobuf:"bytes,1,opt,name=list,proto3,oneof"`
}

type FDBCLISetclass_Arg struct {
	Arg *FDBCLISetclassArg `protobuf:"bytes,2,opt,name=arg,proto3,oneof"`
}

func (*FDBCLISetclass_List) isFDBCLISetclass_Request() {}

func (*FDBCLISetclass_Arg) isFDBCLISetclass_Request() {}

type FDBCLISleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *FDBCLISleep) Reset() {
	*x = FDBCLISleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISleep) ProtoMessage() {}

func (x *FDBCLISleep) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISleep.ProtoReflect.Descriptor instead.
func (*FDBCLISleep) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{81}
}

func (x *FDBCLISleep) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type FDBCLISnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Options []string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *FDBCLISnapshot) Reset() {
	*x = FDBCLISnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISnapshot) ProtoMessage() {}

func (x *FDBCLISnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISnapshot.ProtoReflect.Descriptor instead.
func (*FDBCLISnapshot) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{82}
}

func (x *FDBCLISnapshot) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *FDBCLISnapshot) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type FDBCLIStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *FDBCLIStatus) Reset() {
	*x = FDBCLIStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIStatus) ProtoMessage() {}

func (x *FDBCLIStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIStatus.ProtoReflect.Descriptor instead.
func (*FDBCLIStatus) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{83}
}

func (x *FDBCLIStatus) GetStyle() *wrapperspb.StringValue {
	if x != nil {
		return x.Style
	}
	return nil
}

type FDBCLISuspendInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLISuspendInit) Reset() {
	*x = FDBCLISuspendInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISuspendInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISuspendInit) ProtoMessage() {}

func (x *FDBCLISuspendInit) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISuspendInit.ProtoReflect.Descriptor instead.
func (*FDBCLISuspendInit) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{84}
}

type FDBCLISuspendSuspend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds   float64  `protobuf:"fixed64,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *FDBCLISuspendSuspend) Reset() {
	*x = FDBCLISuspendSuspend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISuspendSuspend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISuspendSuspend) ProtoMessage() {}

func (x *FDBCLISuspendSuspend) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISuspendSuspend.ProtoReflect.Descriptor instead.
func (*FDBCLISuspendSuspend) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{85}
}

func (x *FDBCLISuspendSuspend) GetSeconds() float64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FDBCLISuspendSuspend) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type FDBCLISuspend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLISuspend_Init
	//	*FDBCLISuspend_Suspend
	Request isFDBCLISuspend_Request `protobuf_oneof:"request"`
}

func (x *FDBCLISuspend) Reset() {
	*x = FDBCLISuspend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLISuspend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLISuspend) ProtoMessage() {}

func (x *FDBCLISuspend) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLISuspend.ProtoReflect.Descriptor instead.
func (*FDBCLISuspend) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{86}
}

func (m *FDBCLISuspend) GetRequest() isFDBCLISuspend_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLISuspend) GetInit() *FDBCLISuspendInit {
	if x, ok := x.GetRequest().(*FDBCLISuspend_Init); ok {
		return x.Init
	}
	return nil
}

func (x *FDBCLISuspend) GetSuspend() *FDBCLISuspendSuspend {
	if x, ok := x.GetRequest().(*FDBCLISuspend_Suspend); ok {
		return x.Suspend
	}
	return nil
}

type isFDBCLISuspend_Request interface {
	isFDBCLISuspend_Request()
}

type FDBCLISuspend_Init struct {
	Init *FDBCLISuspendInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type FDBCLISuspend_Suspend struct {
	Suspend *FDBCLISuspendSuspend `protobuf:"bytes,2,opt,name=suspend,proto3,oneof"`
}

func (*FDBCLISuspend_Init) isFDBCLISuspend_Request() {}

func (*FDBCLISuspend_Suspend) isFDBCLISuspend_Request() {}

type FDBCLIThrottleActionOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      string                  `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Rate     *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Duration *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Priority *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *FDBCLIThrottleActionOn) Reset() {
	*x = FDBCLIThrottleActionOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottleActionOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottleActionOn) ProtoMessage() {}

func (x *FDBCLIThrottleActionOn) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottleActionOn.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottleActionOn) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{87}
}

func (x *FDBCLIThrottleActionOn) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FDBCLIThrottleActionOn) GetRate() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *FDBCLIThrottleActionOn) GetDuration() *wrapperspb.StringValue {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *FDBCLIThrottleActionOn) GetPriority() *wrapperspb.StringValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

type FDBCLIThrottleActionOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tag      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Priority *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *FDBCLIThrottleActionOff) Reset() {
	*x = FDBCLIThrottleActionOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottleActionOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottleActionOff) ProtoMessage() {}

func (x *FDBCLIThrottleActionOff) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottleActionOff.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottleActionOff) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{88}
}

func (x *FDBCLIThrottleActionOff) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FDBCLIThrottleActionOff) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *FDBCLIThrottleActionOff) GetPriority() *wrapperspb.StringValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

type FDBCLIThrottleActionEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIThrottleActionEnable) Reset() {
	*x = FDBCLIThrottleActionEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottleActionEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottleActionEnable) ProtoMessage() {}

func (x *FDBCLIThrottleActionEnable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottleActionEnable.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottleActionEnable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{89}
}

type FDBCLIThrottleActionDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIThrottleActionDisable) Reset() {
	*x = FDBCLIThrottleActionDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottleActionDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottleActionDisable) ProtoMessage() {}

func (x *FDBCLIThrottleActionDisable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottleActionDisable.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottleActionDisable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{90}
}

type FDBCLIThrottleActionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Limit *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FDBCLIThrottleActionList) Reset() {
	*x = FDBCLIThrottleActionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottleActionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottleActionList) ProtoMessage() {}

func (x *FDBCLIThrottleActionList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottleActionList.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottleActionList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{91}
}

func (x *FDBCLIThrottleActionList) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FDBCLIThrottleActionList) GetLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type FDBCLIThrottle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIThrottle_On
	//	*FDBCLIThrottle_Off
	//	*FDBCLIThrottle_Enable
	//	*FDBCLIThrottle_Disable
	//	*FDBCLIThrottle_List
	Request isFDBCLIThrottle_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIThrottle) Reset() {
	*x = FDBCLIThrottle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIThrottle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIThrottle) ProtoMessage() {}

func (x *FDBCLIThrottle) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIThrottle.ProtoReflect.Descriptor instead.
func (*FDBCLIThrottle) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{92}
}

func (m *FDBCLIThrottle) GetRequest() isFDBCLIThrottle_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIThrottle) GetOn() *FDBCLIThrottleActionOn {
	if x, ok := x.GetRequest().(*FDBCLIThrottle_On); ok {
		return x.On
	}
	return nil
}

func (x *FDBCLIThrottle) GetOff() *FDBCLIThrottleActionOff {
	if x, ok := x.GetRequest().(*FDBCLIThrottle_Off); ok {
		return x.Off
	}
	return nil
}

func (x *FDBCLIThrottle) GetEnable() *FDBCLIThrottleActionEnable {
	if x, ok := x.GetRequest().(*FDBCLIThrottle_Enable); ok {
		return x.Enable
	}
	return nil
}

func (x *FDBCLIThrottle) GetDisable() *FDBCLIThrottleActionDisable {
	if x, ok := x.GetRequest().(*FDBCLIThrottle_Disable); ok {
		return x.Disable
	}
	return nil
}

func (x *FDBCLIThrottle) GetList() *FDBCLIThrottleActionList {
	if x, ok := x.GetRequest().(*FDBCLIThrottle_List); ok {
		return x.List
	}
	return nil
}

type isFDBCLIThrottle_Request interface {
	isFDBCLIThrottle_Request()
}

type FDBCLIThrottle_On struct {
	On *FDBCLIThrottleActionOn `protobuf:"bytes,1,opt,name=on,proto3,oneof"`
}

type FDBCLIThrottle_Off struct {
	Off *FDBCLIThrottleActionOff `protobuf:"bytes,2,opt,name=off,proto3,oneof"`
}

type FDBCLIThrottle_Enable struct {
	Enable *FDBCLIThrottleActionEnable `protobuf:"bytes,3,opt,name=enable,proto3,oneof"`
}

type FDBCLIThrottle_Disable struct {
	Disable *FDBCLIThrottleActionDisable `protobuf:"bytes,4,opt,name=disable,proto3,oneof"`
}

type FDBCLIThrottle_List struct {
	List *FDBCLIThrottleActionList `protobuf:"bytes,5,opt,name=list,proto3,oneof"`
}

func (*FDBCLIThrottle_On) isFDBCLIThrottle_Request() {}

func (*FDBCLIThrottle_Off) isFDBCLIThrottle_Request() {}

func (*FDBCLIThrottle_Enable) isFDBCLIThrottle_Request() {}

func (*FDBCLIThrottle_Disable) isFDBCLIThrottle_Request() {}

func (*FDBCLIThrottle_List) isFDBCLIThrottle_Request() {}

type FDBCLITriggerddteaminfolog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLITriggerddteaminfolog) Reset() {
	*x = FDBCLITriggerddteaminfolog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLITriggerddteaminfolog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLITriggerddteaminfolog) ProtoMessage() {}

func (x *FDBCLITriggerddteaminfolog) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLITriggerddteaminfolog.ProtoReflect.Descriptor instead.
func (*FDBCLITriggerddteaminfolog) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{93}
}

type FDBCLITssqStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageUid string `protobuf:"bytes,1,opt,name=storage_uid,json=storageUid,proto3" json:"storage_uid,omitempty"`
}

func (x *FDBCLITssqStart) Reset() {
	*x = FDBCLITssqStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLITssqStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLITssqStart) ProtoMessage() {}

func (x *FDBCLITssqStart) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLITssqStart.ProtoReflect.Descriptor instead.
func (*FDBCLITssqStart) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{94}
}

func (x *FDBCLITssqStart) GetStorageUid() string {
	if x != nil {
		return x.StorageUid
	}
	return ""
}

type FDBCLITssqStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageUid string `protobuf:"bytes,1,opt,name=storage_uid,json=storageUid,proto3" json:"storage_uid,omitempty"`
}

func (x *FDBCLITssqStop) Reset() {
	*x = FDBCLITssqStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLITssqStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLITssqStop) ProtoMessage() {}

func (x *FDBCLITssqStop) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLITssqStop.ProtoReflect.Descriptor instead.
func (*FDBCLITssqStop) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{95}
}

func (x *FDBCLITssqStop) GetStorageUid() string {
	if x != nil {
		return x.StorageUid
	}
	return ""
}

type FDBCLITssqList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLITssqList) Reset() {
	*x = FDBCLITssqList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLITssqList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLITssqList) ProtoMessage() {}

func (x *FDBCLITssqList) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLITssqList.ProtoReflect.Descriptor instead.
func (*FDBCLITssqList) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{96}
}

type FDBCLITssq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLITssq_Start
	//	*FDBCLITssq_Stop
	//	*FDBCLITssq_List
	Request isFDBCLITssq_Request `protobuf_oneof:"request"`
}

func (x *FDBCLITssq) Reset() {
	*x = FDBCLITssq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLITssq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLITssq) ProtoMessage() {}

func (x *FDBCLITssq) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLITssq.ProtoReflect.Descriptor instead.
func (*FDBCLITssq) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{97}
}

func (m *FDBCLITssq) GetRequest() isFDBCLITssq_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLITssq) GetStart() *FDBCLITssqStart {
	if x, ok := x.GetRequest().(*FDBCLITssq_Start); ok {
		return x.Start
	}
	return nil
}

func (x *FDBCLITssq) GetStop() *FDBCLITssqStop {
	if x, ok := x.GetRequest().(*FDBCLITssq_Stop); ok {
		return x.Stop
	}
	return nil
}

func (x *FDBCLITssq) GetList() *FDBCLITssqList {
	if x, ok := x.GetRequest().(*FDBCLITssq_List); ok {
		return x.List
	}
	return nil
}

type isFDBCLITssq_Request interface {
	isFDBCLITssq_Request()
}

type FDBCLITssq_Start struct {
	Start *FDBCLITssqStart `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type FDBCLITssq_Stop struct {
	Stop *FDBCLITssqStop `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

type FDBCLITssq_List struct {
	List *FDBCLITssqList `protobuf:"bytes,3,opt,name=list,proto3,oneof"`
}

func (*FDBCLITssq_Start) isFDBCLITssq_Request() {}

func (*FDBCLITssq_Stop) isFDBCLITssq_Request() {}

func (*FDBCLITssq_List) isFDBCLITssq_Request() {}

type FDBCLIUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *FDBCLIUnlock) Reset() {
	*x = FDBCLIUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIUnlock) ProtoMessage() {}

func (x *FDBCLIUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIUnlock.ProtoReflect.Descriptor instead.
func (*FDBCLIUnlock) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{98}
}

func (x *FDBCLIUnlock) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type FDBCLIUsetenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FDBCLIUsetenant) Reset() {
	*x = FDBCLIUsetenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIUsetenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIUsetenant) ProtoMessage() {}

func (x *FDBCLIUsetenant) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIUsetenant.ProtoReflect.Descriptor instead.
func (*FDBCLIUsetenant) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{99}
}

func (x *FDBCLIUsetenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FDBCLIWritemode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *FDBCLIWritemode) Reset() {
	*x = FDBCLIWritemode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIWritemode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIWritemode) ProtoMessage() {}

func (x *FDBCLIWritemode) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIWritemode.ProtoReflect.Descriptor instead.
func (*FDBCLIWritemode) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{100}
}

func (x *FDBCLIWritemode) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type FDBCLIVersionepochInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIVersionepochInfo) Reset() {
	*x = FDBCLIVersionepochInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochInfo) ProtoMessage() {}

func (x *FDBCLIVersionepochInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochInfo.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochInfo) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{101}
}

type FDBCLIVersionepochGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIVersionepochGet) Reset() {
	*x = FDBCLIVersionepochGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochGet) ProtoMessage() {}

func (x *FDBCLIVersionepochGet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochGet.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochGet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{102}
}

type FDBCLIVersionepochDisable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIVersionepochDisable) Reset() {
	*x = FDBCLIVersionepochDisable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochDisable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochDisable) ProtoMessage() {}

func (x *FDBCLIVersionepochDisable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochDisable.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochDisable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{103}
}

type FDBCLIVersionepochEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIVersionepochEnable) Reset() {
	*x = FDBCLIVersionepochEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochEnable) ProtoMessage() {}

func (x *FDBCLIVersionepochEnable) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochEnable.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochEnable) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{104}
}

type FDBCLIVersionepochCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIVersionepochCommit) Reset() {
	*x = FDBCLIVersionepochCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochCommit) ProtoMessage() {}

func (x *FDBCLIVersionepochCommit) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochCommit.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochCommit) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{105}
}

type FDBCLIVersionepochSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *FDBCLIVersionepochSet) Reset() {
	*x = FDBCLIVersionepochSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepochSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepochSet) ProtoMessage() {}

func (x *FDBCLIVersionepochSet) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepochSet.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepochSet) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{106}
}

func (x *FDBCLIVersionepochSet) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type FDBCLIVersionepoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*FDBCLIVersionepoch_Info
	//	*FDBCLIVersionepoch_Get
	//	*FDBCLIVersionepoch_Disable
	//	*FDBCLIVersionepoch_Enable
	//	*FDBCLIVersionepoch_Commit
	//	*FDBCLIVersionepoch_Set
	Request isFDBCLIVersionepoch_Request `protobuf_oneof:"request"`
}

func (x *FDBCLIVersionepoch) Reset() {
	*x = FDBCLIVersionepoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIVersionepoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIVersionepoch) ProtoMessage() {}

func (x *FDBCLIVersionepoch) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIVersionepoch.ProtoReflect.Descriptor instead.
func (*FDBCLIVersionepoch) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{107}
}

func (m *FDBCLIVersionepoch) GetRequest() isFDBCLIVersionepoch_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetInfo() *FDBCLIVersionepochInfo {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Info); ok {
		return x.Info
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetGet() *FDBCLIVersionepochGet {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Get); ok {
		return x.Get
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetDisable() *FDBCLIVersionepochDisable {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Disable); ok {
		return x.Disable
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetEnable() *FDBCLIVersionepochEnable {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Enable); ok {
		return x.Enable
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetCommit() *FDBCLIVersionepochCommit {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *FDBCLIVersionepoch) GetSet() *FDBCLIVersionepochSet {
	if x, ok := x.GetRequest().(*FDBCLIVersionepoch_Set); ok {
		return x.Set
	}
	return nil
}

type isFDBCLIVersionepoch_Request interface {
	isFDBCLIVersionepoch_Request()
}

type FDBCLIVersionepoch_Info struct {
	Info *FDBCLIVersionepochInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type FDBCLIVersionepoch_Get struct {
	Get *FDBCLIVersionepochGet `protobuf:"bytes,2,opt,name=get,proto3,oneof"`
}

type FDBCLIVersionepoch_Disable struct {
	Disable *FDBCLIVersionepochDisable `protobuf:"bytes,3,opt,name=disable,proto3,oneof"`
}

type FDBCLIVersionepoch_Enable struct {
	Enable *FDBCLIVersionepochEnable `protobuf:"bytes,4,opt,name=enable,proto3,oneof"`
}

type FDBCLIVersionepoch_Commit struct {
	Commit *FDBCLIVersionepochCommit `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}

type FDBCLIVersionepoch_Set struct {
	Set *FDBCLIVersionepochSet `protobuf:"bytes,6,opt,name=set,proto3,oneof"`
}

func (*FDBCLIVersionepoch_Info) isFDBCLIVersionepoch_Request() {}

func (*FDBCLIVersionepoch_Get) isFDBCLIVersionepoch_Request() {}

func (*FDBCLIVersionepoch_Disable) isFDBCLIVersionepoch_Request() {}

func (*FDBCLIVersionepoch_Enable) isFDBCLIVersionepoch_Request() {}

func (*FDBCLIVersionepoch_Commit) isFDBCLIVersionepoch_Request() {}

func (*FDBCLIVersionepoch_Set) isFDBCLIVersionepoch_Request() {}

type FDBCLIWaitconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIWaitconnected) Reset() {
	*x = FDBCLIWaitconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIWaitconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIWaitconnected) ProtoMessage() {}

func (x *FDBCLIWaitconnected) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIWaitconnected.ProtoReflect.Descriptor instead.
func (*FDBCLIWaitconnected) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{108}
}

type FDBCLIWaitopen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIWaitopen) Reset() {
	*x = FDBCLIWaitopen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIWaitopen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIWaitopen) ProtoMessage() {}

func (x *FDBCLIWaitopen) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIWaitopen.ProtoReflect.Descriptor instead.
func (*FDBCLIWaitopen) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{109}
}

// FDBCLICommand defines all of the fdbcli commands supported.
// Certain items are excluded that don't make sense in a non-interactive
// session such as reset or rollback.
// This message is broken out separately for ease of use since it has
// gotten so large.
// NEXT: 49
type FDBCLICommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*FDBCLICommand_Advanceversion
	//	*FDBCLICommand_Begin
	//	*FDBCLICommand_Blobrange
	//	*FDBCLICommand_CacheRange
	//	*FDBCLICommand_Changefeed
	//	*FDBCLICommand_Clear
	//	*FDBCLICommand_Clearrange
	//	*FDBCLICommand_Commit
	//	*FDBCLICommand_Configure
	//	*FDBCLICommand_Consistencycheck
	//	*FDBCLICommand_Coordinators
	//	*FDBCLICommand_Createtenant
	//	*FDBCLICommand_Datadistribution
	//	*FDBCLICommand_Defaulttenant
	//	*FDBCLICommand_Deletetenant
	//	*FDBCLICommand_Exclude
	//	*FDBCLICommand_ExpensiveDataCheck
	//	*FDBCLICommand_Fileconfigure
	//	*FDBCLICommand_ForceRecoveryWithDataLoss
	//	*FDBCLICommand_Get
	//	*FDBCLICommand_Getrange
	//	*FDBCLICommand_Getrangekeys
	//	*FDBCLICommand_Gettenant
	//	*FDBCLICommand_Getversion
	//	*FDBCLICommand_Help
	//	*FDBCLICommand_Include
	//	*FDBCLICommand_Kill
	//	*FDBCLICommand_Listtenants
	//	*FDBCLICommand_Lock
	//	*FDBCLICommand_Maintenance
	//	*FDBCLICommand_Option
	//	*FDBCLICommand_Profile
	//	*FDBCLICommand_Set
	//	*FDBCLICommand_Setclass
	//	*FDBCLICommand_Snapshot
	//	*FDBCLICommand_Sleep
	//	*FDBCLICommand_Status
	//	*FDBCLICommand_Suspend
	//	*FDBCLICommand_Throttle
	//	*FDBCLICommand_Triggerddteaminfolog
	//	*FDBCLICommand_Tssq
	//	*FDBCLICommand_Unlock
	//	*FDBCLICommand_Usetenant
	//	*FDBCLICommand_Writemode
	//	*FDBCLICommand_Versionepoch
	//	*FDBCLICommand_Waitconnected
	//	*FDBCLICommand_Waitopen
	//	*FDBCLICommand_Unknown
	Command isFDBCLICommand_Command `protobuf_oneof:"command"`
}

func (x *FDBCLICommand) Reset() {
	*x = FDBCLICommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLICommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLICommand) ProtoMessage() {}

func (x *FDBCLICommand) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLICommand.ProtoReflect.Descriptor instead.
func (*FDBCLICommand) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{110}
}

func (m *FDBCLICommand) GetCommand() isFDBCLICommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *FDBCLICommand) GetAdvanceversion() *FDBCLIAdvanceversion {
	if x, ok := x.GetCommand().(*FDBCLICommand_Advanceversion); ok {
		return x.Advanceversion
	}
	return nil
}

func (x *FDBCLICommand) GetBegin() *FDBCLIBegin {
	if x, ok := x.GetCommand().(*FDBCLICommand_Begin); ok {
		return x.Begin
	}
	return nil
}

func (x *FDBCLICommand) GetBlobrange() *FDBCLIBlobrange {
	if x, ok := x.GetCommand().(*FDBCLICommand_Blobrange); ok {
		return x.Blobrange
	}
	return nil
}

func (x *FDBCLICommand) GetCacheRange() *FDBCLICacheRange {
	if x, ok := x.GetCommand().(*FDBCLICommand_CacheRange); ok {
		return x.CacheRange
	}
	return nil
}

func (x *FDBCLICommand) GetChangefeed() *FDBCLIChangefeed {
	if x, ok := x.GetCommand().(*FDBCLICommand_Changefeed); ok {
		return x.Changefeed
	}
	return nil
}

func (x *FDBCLICommand) GetClear() *FDBCLIClear {
	if x, ok := x.GetCommand().(*FDBCLICommand_Clear); ok {
		return x.Clear
	}
	return nil
}

func (x *FDBCLICommand) GetClearrange() *FDBCLIClearrange {
	if x, ok := x.GetCommand().(*FDBCLICommand_Clearrange); ok {
		return x.Clearrange
	}
	return nil
}

func (x *FDBCLICommand) GetCommit() *FDBCLICommit {
	if x, ok := x.GetCommand().(*FDBCLICommand_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *FDBCLICommand) GetConfigure() *FDBCLIConfigure {
	if x, ok := x.GetCommand().(*FDBCLICommand_Configure); ok {
		return x.Configure
	}
	return nil
}

func (x *FDBCLICommand) GetConsistencycheck() *FDBCLIConsistencycheck {
	if x, ok := x.GetCommand().(*FDBCLICommand_Consistencycheck); ok {
		return x.Consistencycheck
	}
	return nil
}

func (x *FDBCLICommand) GetCoordinators() *FDBCLICoordinators {
	if x, ok := x.GetCommand().(*FDBCLICommand_Coordinators); ok {
		return x.Coordinators
	}
	return nil
}

func (x *FDBCLICommand) GetCreatetenant() *FDBCLICreatetenant {
	if x, ok := x.GetCommand().(*FDBCLICommand_Createtenant); ok {
		return x.Createtenant
	}
	return nil
}

func (x *FDBCLICommand) GetDatadistribution() *FDBCLIDatadistribution {
	if x, ok := x.GetCommand().(*FDBCLICommand_Datadistribution); ok {
		return x.Datadistribution
	}
	return nil
}

func (x *FDBCLICommand) GetDefaulttenant() *FDBCLIDefaulttenant {
	if x, ok := x.GetCommand().(*FDBCLICommand_Defaulttenant); ok {
		return x.Defaulttenant
	}
	return nil
}

func (x *FDBCLICommand) GetDeletetenant() *FDBCLIDeletetenant {
	if x, ok := x.GetCommand().(*FDBCLICommand_Deletetenant); ok {
		return x.Deletetenant
	}
	return nil
}

func (x *FDBCLICommand) GetExclude() *FDBCLIExclude {
	if x, ok := x.GetCommand().(*FDBCLICommand_Exclude); ok {
		return x.Exclude
	}
	return nil
}

func (x *FDBCLICommand) GetExpensiveDataCheck() *FDBCLIExpensiveDataCheck {
	if x, ok := x.GetCommand().(*FDBCLICommand_ExpensiveDataCheck); ok {
		return x.ExpensiveDataCheck
	}
	return nil
}

func (x *FDBCLICommand) GetFileconfigure() *FDBCLIFileconfigure {
	if x, ok := x.GetCommand().(*FDBCLICommand_Fileconfigure); ok {
		return x.Fileconfigure
	}
	return nil
}

func (x *FDBCLICommand) GetForceRecoveryWithDataLoss() *FDBCLIForceRecoveryWithDataLoss {
	if x, ok := x.GetCommand().(*FDBCLICommand_ForceRecoveryWithDataLoss); ok {
		return x.ForceRecoveryWithDataLoss
	}
	return nil
}

func (x *FDBCLICommand) GetGet() *FDBCLIGet {
	if x, ok := x.GetCommand().(*FDBCLICommand_Get); ok {
		return x.Get
	}
	return nil
}

func (x *FDBCLICommand) GetGetrange() *FDBCLIGetrange {
	if x, ok := x.GetCommand().(*FDBCLICommand_Getrange); ok {
		return x.Getrange
	}
	return nil
}

func (x *FDBCLICommand) GetGetrangekeys() *FDBCLIGetrangekeys {
	if x, ok := x.GetCommand().(*FDBCLICommand_Getrangekeys); ok {
		return x.Getrangekeys
	}
	return nil
}

func (x *FDBCLICommand) GetGettenant() *FDBCLIGettenant {
	if x, ok := x.GetCommand().(*FDBCLICommand_Gettenant); ok {
		return x.Gettenant
	}
	return nil
}

func (x *FDBCLICommand) GetGetversion() *FDBCLIGetversion {
	if x, ok := x.GetCommand().(*FDBCLICommand_Getversion); ok {
		return x.Getversion
	}
	return nil
}

func (x *FDBCLICommand) GetHelp() *FDBCLIHelp {
	if x, ok := x.GetCommand().(*FDBCLICommand_Help); ok {
		return x.Help
	}
	return nil
}

func (x *FDBCLICommand) GetInclude() *FDBCLIInclude {
	if x, ok := x.GetCommand().(*FDBCLICommand_Include); ok {
		return x.Include
	}
	return nil
}

func (x *FDBCLICommand) GetKill() *FDBCLIKill {
	if x, ok := x.GetCommand().(*FDBCLICommand_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *FDBCLICommand) GetListtenants() *FDBCLIListtenants {
	if x, ok := x.GetCommand().(*FDBCLICommand_Listtenants); ok {
		return x.Listtenants
	}
	return nil
}

func (x *FDBCLICommand) GetLock() *FDBCLILock {
	if x, ok := x.GetCommand().(*FDBCLICommand_Lock); ok {
		return x.Lock
	}
	return nil
}

func (x *FDBCLICommand) GetMaintenance() *FDBCLIMaintenance {
	if x, ok := x.GetCommand().(*FDBCLICommand_Maintenance); ok {
		return x.Maintenance
	}
	return nil
}

func (x *FDBCLICommand) GetOption() *FDBCLIOption {
	if x, ok := x.GetCommand().(*FDBCLICommand_Option); ok {
		return x.Option
	}
	return nil
}

func (x *FDBCLICommand) GetProfile() *FDBCLIProfile {
	if x, ok := x.GetCommand().(*FDBCLICommand_Profile); ok {
		return x.Profile
	}
	return nil
}

func (x *FDBCLICommand) GetSet() *FDBCLISet {
	if x, ok := x.GetCommand().(*FDBCLICommand_Set); ok {
		return x.Set
	}
	return nil
}

func (x *FDBCLICommand) GetSetclass() *FDBCLISetclass {
	if x, ok := x.GetCommand().(*FDBCLICommand_Setclass); ok {
		return x.Setclass
	}
	return nil
}

func (x *FDBCLICommand) GetSnapshot() *FDBCLISnapshot {
	if x, ok := x.GetCommand().(*FDBCLICommand_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *FDBCLICommand) GetSleep() *FDBCLISleep {
	if x, ok := x.GetCommand().(*FDBCLICommand_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *FDBCLICommand) GetStatus() *FDBCLIStatus {
	if x, ok := x.GetCommand().(*FDBCLICommand_Status); ok {
		return x.Status
	}
	return nil
}

func (x *FDBCLICommand) GetSuspend() *FDBCLISuspend {
	if x, ok := x.GetCommand().(*FDBCLICommand_Suspend); ok {
		return x.Suspend
	}
	return nil
}

func (x *FDBCLICommand) GetThrottle() *FDBCLIThrottle {
	if x, ok := x.GetCommand().(*FDBCLICommand_Throttle); ok {
		return x.Throttle
	}
	return nil
}

func (x *FDBCLICommand) GetTriggerddteaminfolog() *FDBCLITriggerddteaminfolog {
	if x, ok := x.GetCommand().(*FDBCLICommand_Triggerddteaminfolog); ok {
		return x.Triggerddteaminfolog
	}
	return nil
}

func (x *FDBCLICommand) GetTssq() *FDBCLITssq {
	if x, ok := x.GetCommand().(*FDBCLICommand_Tssq); ok {
		return x.Tssq
	}
	return nil
}

func (x *FDBCLICommand) GetUnlock() *FDBCLIUnlock {
	if x, ok := x.GetCommand().(*FDBCLICommand_Unlock); ok {
		return x.Unlock
	}
	return nil
}

func (x *FDBCLICommand) GetUsetenant() *FDBCLIUsetenant {
	if x, ok := x.GetCommand().(*FDBCLICommand_Usetenant); ok {
		return x.Usetenant
	}
	return nil
}

func (x *FDBCLICommand) GetWritemode() *FDBCLIWritemode {
	if x, ok := x.GetCommand().(*FDBCLICommand_Writemode); ok {
		return x.Writemode
	}
	return nil
}

func (x *FDBCLICommand) GetVersionepoch() *FDBCLIVersionepoch {
	if x, ok := x.GetCommand().(*FDBCLICommand_Versionepoch); ok {
		return x.Versionepoch
	}
	return nil
}

func (x *FDBCLICommand) GetWaitconnected() *FDBCLIWaitconnected {
	if x, ok := x.GetCommand().(*FDBCLICommand_Waitconnected); ok {
		return x.Waitconnected
	}
	return nil
}

func (x *FDBCLICommand) GetWaitopen() *FDBCLIWaitopen {
	if x, ok := x.GetCommand().(*FDBCLICommand_Waitopen); ok {
		return x.Waitopen
	}
	return nil
}

func (x *FDBCLICommand) GetUnknown() *FDBCLIUnknownAction {
	if x, ok := x.GetCommand().(*FDBCLICommand_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isFDBCLICommand_Command interface {
	isFDBCLICommand_Command()
}

type FDBCLICommand_Advanceversion struct {
	// Does not include begin, commit, exit, help, reset, or rollback.
	Advanceversion *FDBCLIAdvanceversion `protobuf:"bytes,1,opt,name=advanceversion,proto3,oneof"`
}

type FDBCLICommand_Begin struct {
	Begin *FDBCLIBegin `protobuf:"bytes,47,opt,name=begin,proto3,oneof"`
}

type FDBCLICommand_Blobrange struct {
	Blobrange *FDBCLIBlobrange `protobuf:"bytes,41,opt,name=blobrange,proto3,oneof"`
}

type FDBCLICommand_CacheRange struct {
	CacheRange *FDBCLICacheRange `protobuf:"bytes,46,opt,name=cache_range,json=cacheRange,proto3,oneof"`
}

type FDBCLICommand_Changefeed struct {
	Changefeed *FDBCLIChangefeed `protobuf:"bytes,40,opt,name=changefeed,proto3,oneof"`
}

type FDBCLICommand_Clear struct {
	Clear *FDBCLIClear `protobuf:"bytes,2,opt,name=clear,proto3,oneof"`
}

type FDBCLICommand_Clearrange struct {
	Clearrange *FDBCLIClearrange `protobuf:"bytes,3,opt,name=clearrange,proto3,oneof"`
}

type FDBCLICommand_Commit struct {
	Commit *FDBCLICommit `protobuf:"bytes,48,opt,name=commit,proto3,oneof"`
}

type FDBCLICommand_Configure struct {
	Configure *FDBCLIConfigure `protobuf:"bytes,4,opt,name=configure,proto3,oneof"`
}

type FDBCLICommand_Consistencycheck struct {
	Consistencycheck *FDBCLIConsistencycheck `protobuf:"bytes,5,opt,name=consistencycheck,proto3,oneof"`
}

type FDBCLICommand_Coordinators struct {
	Coordinators *FDBCLICoordinators `protobuf:"bytes,6,opt,name=coordinators,proto3,oneof"`
}

type FDBCLICommand_Createtenant struct {
	Createtenant *FDBCLICreatetenant `protobuf:"bytes,29,opt,name=createtenant,proto3,oneof"`
}

type FDBCLICommand_Datadistribution struct {
	Datadistribution *FDBCLIDatadistribution `protobuf:"bytes,45,opt,name=datadistribution,proto3,oneof"`
}

type FDBCLICommand_Defaulttenant struct {
	Defaulttenant *FDBCLIDefaulttenant `protobuf:"bytes,30,opt,name=defaulttenant,proto3,oneof"`
}

type FDBCLICommand_Deletetenant struct {
	Deletetenant *FDBCLIDeletetenant `protobuf:"bytes,31,opt,name=deletetenant,proto3,oneof"`
}

type FDBCLICommand_Exclude struct {
	Exclude *FDBCLIExclude `protobuf:"bytes,7,opt,name=exclude,proto3,oneof"`
}

type FDBCLICommand_ExpensiveDataCheck struct {
	ExpensiveDataCheck *FDBCLIExpensiveDataCheck `protobuf:"bytes,44,opt,name=expensive_data_check,json=expensiveDataCheck,proto3,oneof"`
}

type FDBCLICommand_Fileconfigure struct {
	Fileconfigure *FDBCLIFileconfigure `protobuf:"bytes,8,opt,name=fileconfigure,proto3,oneof"`
}

type FDBCLICommand_ForceRecoveryWithDataLoss struct {
	ForceRecoveryWithDataLoss *FDBCLIForceRecoveryWithDataLoss `protobuf:"bytes,9,opt,name=force_recovery_with_data_loss,json=forceRecoveryWithDataLoss,proto3,oneof"`
}

type FDBCLICommand_Get struct {
	Get *FDBCLIGet `protobuf:"bytes,10,opt,name=get,proto3,oneof"`
}

type FDBCLICommand_Getrange struct {
	Getrange *FDBCLIGetrange `protobuf:"bytes,11,opt,name=getrange,proto3,oneof"`
}

type FDBCLICommand_Getrangekeys struct {
	Getrangekeys *FDBCLIGetrangekeys `protobuf:"bytes,12,opt,name=getrangekeys,proto3,oneof"`
}

type FDBCLICommand_Gettenant struct {
	Gettenant *FDBCLIGettenant `protobuf:"bytes,33,opt,name=gettenant,proto3,oneof"`
}

type FDBCLICommand_Getversion struct {
	Getversion *FDBCLIGetversion `protobuf:"bytes,13,opt,name=getversion,proto3,oneof"`
}

type FDBCLICommand_Help struct {
	Help *FDBCLIHelp `protobuf:"bytes,32,opt,name=help,proto3,oneof"`
}

type FDBCLICommand_Include struct {
	Include *FDBCLIInclude `protobuf:"bytes,14,opt,name=include,proto3,oneof"`
}

type FDBCLICommand_Kill struct {
	Kill *FDBCLIKill `protobuf:"bytes,15,opt,name=kill,proto3,oneof"`
}

type FDBCLICommand_Listtenants struct {
	Listtenants *FDBCLIListtenants `protobuf:"bytes,36,opt,name=listtenants,proto3,oneof"`
}

type FDBCLICommand_Lock struct {
	Lock *FDBCLILock `protobuf:"bytes,16,opt,name=lock,proto3,oneof"`
}

type FDBCLICommand_Maintenance struct {
	Maintenance *FDBCLIMaintenance `protobuf:"bytes,17,opt,name=maintenance,proto3,oneof"`
}

type FDBCLICommand_Option struct {
	Option *FDBCLIOption `protobuf:"bytes,18,opt,name=option,proto3,oneof"`
}

type FDBCLICommand_Profile struct {
	Profile *FDBCLIProfile `protobuf:"bytes,19,opt,name=profile,proto3,oneof"`
}

type FDBCLICommand_Set struct {
	Set *FDBCLISet `protobuf:"bytes,20,opt,name=set,proto3,oneof"`
}

type FDBCLICommand_Setclass struct {
	Setclass *FDBCLISetclass `protobuf:"bytes,21,opt,name=setclass,proto3,oneof"`
}

type FDBCLICommand_Snapshot struct {
	Snapshot *FDBCLISnapshot `protobuf:"bytes,39,opt,name=snapshot,proto3,oneof"`
}

type FDBCLICommand_Sleep struct {
	Sleep *FDBCLISleep `protobuf:"bytes,22,opt,name=sleep,proto3,oneof"`
}

type FDBCLICommand_Status struct {
	Status *FDBCLIStatus `protobuf:"bytes,23,opt,name=status,proto3,oneof"`
}

type FDBCLICommand_Suspend struct {
	Suspend *FDBCLISuspend `protobuf:"bytes,43,opt,name=suspend,proto3,oneof"`
}

type FDBCLICommand_Throttle struct {
	Throttle *FDBCLIThrottle `protobuf:"bytes,24,opt,name=throttle,proto3,oneof"`
}

type FDBCLICommand_Triggerddteaminfolog struct {
	Triggerddteaminfolog *FDBCLITriggerddteaminfolog `protobuf:"bytes,25,opt,name=triggerddteaminfolog,proto3,oneof"`
}

type FDBCLICommand_Tssq struct {
	Tssq *FDBCLITssq `protobuf:"bytes,35,opt,name=tssq,proto3,oneof"`
}

type FDBCLICommand_Unlock struct {
	Unlock *FDBCLIUnlock `protobuf:"bytes,26,opt,name=unlock,proto3,oneof"`
}

type FDBCLICommand_Usetenant struct {
	Usetenant *FDBCLIUsetenant `protobuf:"bytes,34,opt,name=usetenant,proto3,oneof"`
}

type FDBCLICommand_Writemode struct {
	Writemode *FDBCLIWritemode `protobuf:"bytes,27,opt,name=writemode,proto3,oneof"`
}

type FDBCLICommand_Versionepoch struct {
	Versionepoch *FDBCLIVersionepoch `protobuf:"bytes,42,opt,name=versionepoch,proto3,oneof"`
}

type FDBCLICommand_Waitconnected struct {
	Waitconnected *FDBCLIWaitconnected `protobuf:"bytes,37,opt,name=waitconnected,proto3,oneof"`
}

type FDBCLICommand_Waitopen struct {
	Waitopen *FDBCLIWaitopen `protobuf:"bytes,38,opt,name=waitopen,proto3,oneof"`
}

type FDBCLICommand_Unknown struct {
	// This one isn't used but defined so tests can trigger the unknown type
	// check.
	Unknown *FDBCLIUnknownAction `protobuf:"bytes,28,opt,name=unknown,proto3,oneof"`
}

func (*FDBCLICommand_Advanceversion) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Begin) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Blobrange) isFDBCLICommand_Command() {}

func (*FDBCLICommand_CacheRange) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Changefeed) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Clear) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Clearrange) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Commit) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Configure) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Consistencycheck) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Coordinators) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Createtenant) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Datadistribution) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Defaulttenant) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Deletetenant) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Exclude) isFDBCLICommand_Command() {}

func (*FDBCLICommand_ExpensiveDataCheck) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Fileconfigure) isFDBCLICommand_Command() {}

func (*FDBCLICommand_ForceRecoveryWithDataLoss) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Get) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Getrange) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Getrangekeys) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Gettenant) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Getversion) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Help) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Include) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Kill) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Listtenants) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Lock) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Maintenance) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Option) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Profile) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Set) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Setclass) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Snapshot) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Sleep) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Status) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Suspend) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Throttle) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Triggerddteaminfolog) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Tssq) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Unlock) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Usetenant) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Writemode) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Versionepoch) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Waitconnected) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Waitopen) isFDBCLICommand_Command() {}

func (*FDBCLICommand_Unknown) isFDBCLICommand_Command() {}

type FDBCLIUnknownAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBCLIUnknownAction) Reset() {
	*x = FDBCLIUnknownAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIUnknownAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIUnknownAction) ProtoMessage() {}

func (x *FDBCLIUnknownAction) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIUnknownAction.ProtoReflect.Descriptor instead.
func (*FDBCLIUnknownAction) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{111}
}

// FDBCLIRequest defines the fdbcli command(s) to run.
// This will replicate fdbcli --exec "command(s)" (where N commands are
// separated by ;)
// NEXT: 19
type FDBCLIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: Doesn't include status-from-json as that just prints a status
	//
	//	from a given json file which would require uploading and seems
	//	unneeded today.
	//
	// Maps to -C|--cluster-file
	Config *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Maps to –-log (if set implies --log-dir which is handled automatically)
	Log *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	// Maps to –-trace-format
	TraceFormat *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=trace_format,json=traceFormat,proto3" json:"trace_format,omitempty"`
	// Maps to –-tls_certificate_file
	TlsCertificateFile *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=tls_certificate_file,json=tlsCertificateFile,proto3" json:"tls_certificate_file,omitempty"`
	// Maps to –-tls_ca_file
	TlsCaFile *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=tls_ca_file,json=tlsCaFile,proto3" json:"tls_ca_file,omitempty"`
	// Maps to –-tls_key_file
	TlsKeyFile *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=tls_key_file,json=tlsKeyFile,proto3" json:"tls_key_file,omitempty"`
	// Maps to –-tls_password
	TlsPassword *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=tls_password,json=tlsPassword,proto3" json:"tls_password,omitempty"`
	// Maps to –-tls_verify_peers
	TlsVerifyPeers *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=tls_verify_peers,json=tlsVerifyPeers,proto3" json:"tls_verify_peers,omitempty"`
	// Maps to –-debug-tls
	DebugTls *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=debug_tls,json=debugTls,proto3" json:"debug_tls,omitempty"`
	// Maps to -v|--version
	Version *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Maps to --log-group
	LogGroup *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=log_group,json=logGroup,proto3" json:"log_group,omitempty"`
	// Maps to --no-status
	NoStatus *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=no_status,json=noStatus,proto3" json:"no_status,omitempty"`
	// Maps to --memory
	Memory *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=memory,proto3" json:"memory,omitempty"`
	// Maps to --build-flags
	BuildFlags *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=build_flags,json=buildFlags,proto3" json:"build_flags,omitempty"`
	// Maps to --timeout
	Timeout  *wrapperspb.Int32Value `protobuf:"bytes,18,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Commands []*FDBCLICommand       `protobuf:"bytes,19,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *FDBCLIRequest) Reset() {
	*x = FDBCLIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIRequest) ProtoMessage() {}

func (x *FDBCLIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIRequest.ProtoReflect.Descriptor instead.
func (*FDBCLIRequest) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{112}
}

func (x *FDBCLIRequest) GetConfig() *wrapperspb.StringValue {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FDBCLIRequest) GetLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *FDBCLIRequest) GetTraceFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.TraceFormat
	}
	return nil
}

func (x *FDBCLIRequest) GetTlsCertificateFile() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsCertificateFile
	}
	return nil
}

func (x *FDBCLIRequest) GetTlsCaFile() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsCaFile
	}
	return nil
}

func (x *FDBCLIRequest) GetTlsKeyFile() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsKeyFile
	}
	return nil
}

func (x *FDBCLIRequest) GetTlsPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsPassword
	}
	return nil
}

func (x *FDBCLIRequest) GetTlsVerifyPeers() *wrapperspb.StringValue {
	if x != nil {
		return x.TlsVerifyPeers
	}
	return nil
}

func (x *FDBCLIRequest) GetDebugTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.DebugTls
	}
	return nil
}

func (x *FDBCLIRequest) GetVersion() *wrapperspb.BoolValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FDBCLIRequest) GetLogGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.LogGroup
	}
	return nil
}

func (x *FDBCLIRequest) GetNoStatus() *wrapperspb.BoolValue {
	if x != nil {
		return x.NoStatus
	}
	return nil
}

func (x *FDBCLIRequest) GetMemory() *wrapperspb.StringValue {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *FDBCLIRequest) GetBuildFlags() *wrapperspb.BoolValue {
	if x != nil {
		return x.BuildFlags
	}
	return nil
}

func (x *FDBCLIRequest) GetTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *FDBCLIRequest) GetCommands() []*FDBCLICommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{113}
}

func (x *Log) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Log) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type FDBCLIResponseOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout  []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr  []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	RetCode int32  `protobuf:"varint,3,opt,name=retCode,proto3" json:"retCode,omitempty"`
}

func (x *FDBCLIResponseOutput) Reset() {
	*x = FDBCLIResponseOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIResponseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIResponseOutput) ProtoMessage() {}

func (x *FDBCLIResponseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIResponseOutput.ProtoReflect.Descriptor instead.
func (*FDBCLIResponseOutput) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{114}
}

func (x *FDBCLIResponseOutput) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *FDBCLIResponseOutput) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *FDBCLIResponseOutput) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

type FDBCLIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*FDBCLIResponse_Output
	//	*FDBCLIResponse_Log
	Response isFDBCLIResponse_Response `protobuf_oneof:"response"`
}

func (x *FDBCLIResponse) Reset() {
	*x = FDBCLIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBCLIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBCLIResponse) ProtoMessage() {}

func (x *FDBCLIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBCLIResponse.ProtoReflect.Descriptor instead.
func (*FDBCLIResponse) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{115}
}

func (m *FDBCLIResponse) GetResponse() isFDBCLIResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FDBCLIResponse) GetOutput() *FDBCLIResponseOutput {
	if x, ok := x.GetResponse().(*FDBCLIResponse_Output); ok {
		return x.Output
	}
	return nil
}

func (x *FDBCLIResponse) GetLog() *Log {
	if x, ok := x.GetResponse().(*FDBCLIResponse_Log); ok {
		return x.Log
	}
	return nil
}

type isFDBCLIResponse_Response interface {
	isFDBCLIResponse_Response()
}

type FDBCLIResponse_Output struct {
	Output *FDBCLIResponseOutput `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type FDBCLIResponse_Log struct {
	// Log will steam back any logfiles generated sequentially.
	// When filename changes a new log has begun and the previous completed.
	Log *Log `protobuf:"bytes,2,opt,name=log,proto3,oneof"`
}

func (*FDBCLIResponse_Output) isFDBCLIResponse_Response() {}

func (*FDBCLIResponse_Log) isFDBCLIResponse_Response() {}

type FDBServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*FDBServerCommand `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *FDBServerRequest) Reset() {
	*x = FDBServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBServerRequest) ProtoMessage() {}

func (x *FDBServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBServerRequest.ProtoReflect.Descriptor instead.
func (*FDBServerRequest) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{116}
}

func (x *FDBServerRequest) GetCommands() []*FDBServerCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

// FDBServerCommand defines all of the fdbserver commands supported.
type FDBServerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*FDBServerCommand_Version
	//	*FDBServerCommand_Unknown
	Command isFDBServerCommand_Command `protobuf_oneof:"command"`
}

func (x *FDBServerCommand) Reset() {
	*x = FDBServerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBServerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBServerCommand) ProtoMessage() {}

func (x *FDBServerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBServerCommand.ProtoReflect.Descriptor instead.
func (*FDBServerCommand) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{117}
}

func (m *FDBServerCommand) GetCommand() isFDBServerCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *FDBServerCommand) GetVersion() *FDBServerVersion {
	if x, ok := x.GetCommand().(*FDBServerCommand_Version); ok {
		return x.Version
	}
	return nil
}

func (x *FDBServerCommand) GetUnknown() *FDBServerUnknownAction {
	if x, ok := x.GetCommand().(*FDBServerCommand_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isFDBServerCommand_Command interface {
	isFDBServerCommand_Command()
}

type FDBServerCommand_Version struct {
	Version *FDBServerVersion `protobuf:"bytes,1,opt,name=version,proto3,oneof"`
}

type FDBServerCommand_Unknown struct {
	// just for test purpose
	Unknown *FDBServerUnknownAction `protobuf:"bytes,2,opt,name=unknown,proto3,oneof"`
}

func (*FDBServerCommand_Version) isFDBServerCommand_Command() {}

func (*FDBServerCommand_Unknown) isFDBServerCommand_Command() {}

type FDBServerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBServerVersion) Reset() {
	*x = FDBServerVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBServerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBServerVersion) ProtoMessage() {}

func (x *FDBServerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBServerVersion.ProtoReflect.Descriptor instead.
func (*FDBServerVersion) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{118}
}

type FDBServerUnknownAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FDBServerUnknownAction) Reset() {
	*x = FDBServerUnknownAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBServerUnknownAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBServerUnknownAction) ProtoMessage() {}

func (x *FDBServerUnknownAction) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBServerUnknownAction.ProtoReflect.Descriptor instead.
func (*FDBServerUnknownAction) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{119}
}

type FDBServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout  []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr  []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	RetCode int32  `protobuf:"varint,3,opt,name=retCode,proto3" json:"retCode,omitempty"`
}

func (x *FDBServerResponse) Reset() {
	*x = FDBServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fdb_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FDBServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FDBServerResponse) ProtoMessage() {}

func (x *FDBServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fdb_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FDBServerResponse.ProtoReflect.Descriptor instead.
func (*FDBServerResponse) Descriptor() ([]byte, []int) {
	return file_fdb_proto_rawDescGZIP(), []int{120}
}

func (x *FDBServerResponse) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *FDBServerResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *FDBServerResponse) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

var File_fdb_proto protoreflect.FileDescriptor

var file_fdb_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x46, 0x64, 0x62,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x0b, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x27, 0x0a, 0x0f, 0x46, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x22, 0x4c, 0x0a, 0x14, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x42, 0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x42, 0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x42,
	0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x42, 0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x42, 0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x15, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b,
	0x65, 0x79, 0x22, 0x7f, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x18, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x14, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x17, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x22, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6d, 0x0a, 0x25, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xac, 0x02, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x50, 0x0a, 0x19, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x03, 0x70, 0x6f, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x0b, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x48, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79,
	0x22, 0x0e, 0x0a, 0x0c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0xd3, 0x06, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x5f, 0x74,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x54, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x67, 0x72, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x67, 0x72, 0x76, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x57, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x21, 0x70, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x1b, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28,
	0x0a, 0x12, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61,
	0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x22, 0x36, 0x0a, 0x1c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1d, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74,
	0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x64,
	0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x48, 0x00, 0x52, 0x03, 0x6f,
	0x66, 0x66, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44,
	0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74,
	0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x22, 0x28, 0x0a, 0x12, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x1e,
	0x0a, 0x1c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x1e,
	0x0a, 0x1c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1d,
	0x0a, 0x1b, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x22, 0x3d, 0x0a,
	0x1d, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a,
	0x18, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x35, 0x0a, 0x1f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x47, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x47, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x47, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x47, 0x65, 0x74, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x47, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0a,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x0d, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10,
	0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x69, 0x74,
	0x22, 0x10, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c,
	0x41, 0x6c, 0x6c, 0x22, 0x31, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0a, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4c, 0x69,
	0x73, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4c, 0x6f, 0x63, 0x6b, 0x22,
	0x19, 0x0a, 0x17, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x13, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x22, 0xb1, 0x01, 0x0a, 0x11,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x48,
	0x00, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x03, 0x6f, 0x66, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x13, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x6f, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x61, 0x72, 0x67, 0x22, 0x73, 0x0a, 0x0c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x1e,
	0x0a, 0x1c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x22, 0x88,
	0x02, 0x0a, 0x1c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x64,
	0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x19, 0x0a, 0x17, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x33, 0x0a, 0x17, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x65, 0x61, 0x70, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a,
	0x11, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x41,
	0x72, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x65, 0x74, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x72, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x53, 0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x72, 0x67, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x72, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x27, 0x0a, 0x0b, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x42, 0x0a, 0x0c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x14, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb5, 0x01, 0x0a,
	0x17, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x48, 0x00, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x64, 0x64, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x6f, 0x67, 0x22,
	0x32, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x73, 0x73, 0x71, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x73, 0x73,
	0x71, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x54, 0x73, 0x73, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x54, 0x73, 0x73, 0x71, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x54, 0x73, 0x73, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x54, 0x73, 0x73, 0x71, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x73, 0x73, 0x71, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0c, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x55, 0x73, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x25, 0x0a, 0x0f, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x17, 0x0a, 0x15, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x65, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x2d,
	0x0a, 0x15, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xe0, 0x02,
	0x0a, 0x12, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x57, 0x61, 0x69, 0x74, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x57, 0x61, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x80, 0x15, 0x0a, 0x0d, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x42, 0x6c, 0x6f, 0x62, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x66, 0x65, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x66, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66,
	0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x44, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x51,
	0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x47, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x47, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x47, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6b,
	0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42,
	0x43, 0x4c, 0x49, 0x47, 0x65, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x65, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x47, 0x65, 0x74, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x48, 0x65, 0x6c,
	0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x43, 0x4c, 0x49, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x43, 0x4c, 0x49, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x64, 0x62, 0x2e,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53,
	0x65, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a,
	0x08, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x55, 0x0a, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x64, 0x64, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x6f, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x64, 0x64, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x6f, 0x67, 0x48,
	0x00, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x64, 0x64, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x73, 0x73, 0x71, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43,
	0x4c, 0x49, 0x54, 0x73, 0x73, 0x71, 0x48, 0x00, 0x52, 0x04, 0x74, 0x73, 0x73, 0x71, 0x12, 0x2b,
	0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x55, 0x73, 0x65, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c,
	0x49, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x57, 0x61, 0x69, 0x74, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x64, 0x62,
	0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x57, 0x61, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xda, 0x07, 0x0a, 0x0d, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x43, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6c,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x6c, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x6e,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e,
	0x22, 0x3d, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x14, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x6f, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46,
	0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x46, 0x44,
	0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x44, 0x42,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0xa6, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x30, 0x0a, 0x04, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x10, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x64, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x2e,
	0x46, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x3c, 0x0a, 0x03, 0x43,
	0x4c, 0x49, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x12, 0x12, 0x2e, 0x46,
	0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x43, 0x4c, 0x49, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x46, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x15, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x46, 0x64, 0x62, 0x2e, 0x46, 0x44,
	0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x73,
	0x61, 0x6e, 0x73, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x66, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fdb_proto_rawDescOnce sync.Once
	file_fdb_proto_rawDescData = file_fdb_proto_rawDesc
)

func file_fdb_proto_rawDescGZIP() []byte {
	file_fdb_proto_rawDescOnce.Do(func() {
		file_fdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_fdb_proto_rawDescData)
	})
	return file_fdb_proto_rawDescData
}

var file_fdb_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_fdb_proto_goTypes = []interface{}{
	(*Location)(nil),                              // 0: Fdb.Location
	(*ReadRequest)(nil),                           // 1: Fdb.ReadRequest
	(*WriteRequest)(nil),                          // 2: Fdb.WriteRequest
	(*DeleteRequest)(nil),                         // 3: Fdb.DeleteRequest
	(*FdbConfResponse)(nil),                       // 4: Fdb.FdbConfResponse
	(*FDBCLIAdvanceversion)(nil),                  // 5: Fdb.FDBCLIAdvanceversion
	(*FDBCLIBegin)(nil),                           // 6: Fdb.FDBCLIBegin
	(*FDBCLIBlobrangeStart)(nil),                  // 7: Fdb.FDBCLIBlobrangeStart
	(*FDBCLIBlobrangeStop)(nil),                   // 8: Fdb.FDBCLIBlobrangeStop
	(*FDBCLIBlobrange)(nil),                       // 9: Fdb.FDBCLIBlobrange
	(*FDBCLICacheRangeSet)(nil),                   // 10: Fdb.FDBCLICacheRangeSet
	(*FDBCLICacheRangeClear)(nil),                 // 11: Fdb.FDBCLICacheRangeClear
	(*FDBCLICacheRange)(nil),                      // 12: Fdb.FDBCLICacheRange
	(*FDBCLIChangefeedList)(nil),                  // 13: Fdb.FDBCLIChangefeedList
	(*FDBCLIChangefeedRegister)(nil),              // 14: Fdb.FDBCLIChangefeedRegister
	(*FDBCLIChangefeedStop)(nil),                  // 15: Fdb.FDBCLIChangefeedStop
	(*FDBCLIChangefeedDestroy)(nil),               // 16: Fdb.FDBCLIChangefeedDestroy
	(*FDBCLIChangefeedStreamNoVersion)(nil),       // 17: Fdb.FDBCLIChangefeedStreamNoVersion
	(*FDBCLIChangefeedStreamStartVersion)(nil),    // 18: Fdb.FDBCLIChangefeedStreamStartVersion
	(*FDBCLIChangefeedStreamStartEndVersion)(nil), // 19: Fdb.FDBCLIChangefeedStreamStartEndVersion
	(*FDBCLIChangefeedStream)(nil),                // 20: Fdb.FDBCLIChangefeedStream
	(*FDBCLIChangefeedStreamPop)(nil),             // 21: Fdb.FDBCLIChangefeedStreamPop
	(*FDBCLIChangefeed)(nil),                      // 22: Fdb.FDBCLIChangefeed
	(*FDBCLIClear)(nil),                           // 23: Fdb.FDBCLIClear
	(*FDBCLIClearrange)(nil),                      // 24: Fdb.FDBCLIClearrange
	(*FDBCLICommit)(nil),                          // 25: Fdb.FDBCLICommit
	(*FDBCLIConfigure)(nil),                       // 26: Fdb.FDBCLIConfigure
	(*FDBCLIConsistencycheck)(nil),                // 27: Fdb.FDBCLIConsistencycheck
	(*FDBCLICoordinatorsAuto)(nil),                // 28: Fdb.FDBCLICoordinatorsAuto
	(*FDBCLICoordinatorsAddresses)(nil),           // 29: Fdb.FDBCLICoordinatorsAddresses
	(*FDBCLICoordinators)(nil),                    // 30: Fdb.FDBCLICoordinators
	(*FDBCLICreatetenant)(nil),                    // 31: Fdb.FDBCLICreatetenant
	(*FDBCLIDatadistributionOn)(nil),              // 32: Fdb.FDBCLIDatadistributionOn
	(*FDBCLIDatadistributionOff)(nil),             // 33: Fdb.FDBCLIDatadistributionOff
	(*FDBCLIDatadistributionEnable)(nil),          // 34: Fdb.FDBCLIDatadistributionEnable
	(*FDBCLIDatadistributionDisable)(nil),         // 35: Fdb.FDBCLIDatadistributionDisable
	(*FDBCLIDatadistribution)(nil),                // 36: Fdb.FDBCLIDatadistribution
	(*FDBCLIDefaulttenant)(nil),                   // 37: Fdb.FDBCLIDefaulttenant
	(*FDBCLIDeletetenant)(nil),                    // 38: Fdb.FDBCLIDeletetenant
	(*FDBCLIExclude)(nil),                         // 39: Fdb.FDBCLIExclude
	(*FDBCLIExpensiveDataCheckInit)(nil),          // 40: Fdb.FDBCLIExpensiveDataCheckInit
	(*FDBCLIExpensiveDataCheckList)(nil),          // 41: Fdb.FDBCLIExpensiveDataCheckList
	(*FDBCLIExpensiveDataCheckAll)(nil),           // 42: Fdb.FDBCLIExpensiveDataCheckAll
	(*FDBCLIExpensiveDataCheckCheck)(nil),         // 43: Fdb.FDBCLIExpensiveDataCheckCheck
	(*FDBCLIExpensiveDataCheck)(nil),              // 44: Fdb.FDBCLIExpensiveDataCheck
	(*FDBCLIFileconfigure)(nil),                   // 45: Fdb.FDBCLIFileconfigure
	(*FDBCLIForceRecoveryWithDataLoss)(nil),       // 46: Fdb.FDBCLIForceRecoveryWithDataLoss
	(*FDBCLIGet)(nil),                             // 47: Fdb.FDBCLIGet
	(*FDBCLIGetrange)(nil),                        // 48: Fdb.FDBCLIGetrange
	(*FDBCLIGetrangekeys)(nil),                    // 49: Fdb.FDBCLIGetrangekeys
	(*FDBCLIGettenant)(nil),                       // 50: Fdb.FDBCLIGettenant
	(*FDBCLIGetversion)(nil),                      // 51: Fdb.FDBCLIGetversion
	(*FDBCLIHelp)(nil),                            // 52: Fdb.FDBCLIHelp
	(*FDBCLIIncludeAddresses)(nil),                // 53: Fdb.FDBCLIIncludeAddresses
	(*FDBCLIInclude)(nil),                         // 54: Fdb.FDBCLIInclude
	(*FDBCLIKillInit)(nil),                        // 55: Fdb.FDBCLIKillInit
	(*FDBCLIKillList)(nil),                        // 56: Fdb.FDBCLIKillList
	(*FDBCLIKillAll)(nil),                         // 57: Fdb.FDBCLIKillAll
	(*FDBCLIKillTargets)(nil),                     // 58: Fdb.FDBCLIKillTargets
	(*FDBCLIKill)(nil),                            // 59: Fdb.FDBCLIKill
	(*FDBCLIListtenants)(nil),                     // 60: Fdb.FDBCLIListtenants
	(*FDBCLILock)(nil),                            // 61: Fdb.FDBCLILock
	(*FDBCLIMaintenanceStatus)(nil),               // 62: Fdb.FDBCLIMaintenanceStatus
	(*FDBCLIMaintenanceOn)(nil),                   // 63: Fdb.FDBCLIMaintenanceOn
	(*FDBCLIMaintenanceOff)(nil),                  // 64: Fdb.FDBCLIMaintenanceOff
	(*FDBCLIMaintenance)(nil),                     // 65: Fdb.FDBCLIMaintenance
	(*FDBCLIOptionBlank)(nil),                     // 66: Fdb.FDBCLIOptionBlank
	(*FDBCLIOptionArg)(nil),                       // 67: Fdb.FDBCLIOptionArg
	(*FDBCLIOption)(nil),                          // 68: Fdb.FDBCLIOption
	(*FDBCLIProfileActionClientDefault)(nil),      // 69: Fdb.FDBCLIProfileActionClientDefault
	(*FDBCLIProfileActionClientGet)(nil),          // 70: Fdb.FDBCLIProfileActionClientGet
	(*FDBCLIProfileActionClientSet)(nil),          // 71: Fdb.FDBCLIProfileActionClientSet
	(*FDBCLIProfileActionClient)(nil),             // 72: Fdb.FDBCLIProfileActionClient
	(*FDBCLIProfileActionList)(nil),               // 73: Fdb.FDBCLIProfileActionList
	(*FDBCLIProfileActionFlow)(nil),               // 74: Fdb.FDBCLIProfileActionFlow
	(*FDBCLIProfileActionHeap)(nil),               // 75: Fdb.FDBCLIProfileActionHeap
	(*FDBCLIProfile)(nil),                         // 76: Fdb.FDBCLIProfile
	(*FDBCLISet)(nil),                             // 77: Fdb.FDBCLISet
	(*FDBCLISetclassArg)(nil),                     // 78: Fdb.FDBCLISetclassArg
	(*FDBCLISetclassList)(nil),                    // 79: Fdb.FDBCLISetclassList
	(*FDBCLISetclass)(nil),                        // 80: Fdb.FDBCLISetclass
	(*FDBCLISleep)(nil),                           // 81: Fdb.FDBCLISleep
	(*FDBCLISnapshot)(nil),                        // 82: Fdb.FDBCLISnapshot
	(*FDBCLIStatus)(nil),                          // 83: Fdb.FDBCLIStatus
	(*FDBCLISuspendInit)(nil),                     // 84: Fdb.FDBCLISuspendInit
	(*FDBCLISuspendSuspend)(nil),                  // 85: Fdb.FDBCLISuspendSuspend
	(*FDBCLISuspend)(nil),                         // 86: Fdb.FDBCLISuspend
	(*FDBCLIThrottleActionOn)(nil),                // 87: Fdb.FDBCLIThrottleActionOn
	(*FDBCLIThrottleActionOff)(nil),               // 88: Fdb.FDBCLIThrottleActionOff
	(*FDBCLIThrottleActionEnable)(nil),            // 89: Fdb.FDBCLIThrottleActionEnable
	(*FDBCLIThrottleActionDisable)(nil),           // 90: Fdb.FDBCLIThrottleActionDisable
	(*FDBCLIThrottleActionList)(nil),              // 91: Fdb.FDBCLIThrottleActionList
	(*FDBCLIThrottle)(nil),                        // 92: Fdb.FDBCLIThrottle
	(*FDBCLITriggerddteaminfolog)(nil),            // 93: Fdb.FDBCLITriggerddteaminfolog
	(*FDBCLITssqStart)(nil),                       // 94: Fdb.FDBCLITssqStart
	(*FDBCLITssqStop)(nil),                        // 95: Fdb.FDBCLITssqStop
	(*FDBCLITssqList)(nil),                        // 96: Fdb.FDBCLITssqList
	(*FDBCLITssq)(nil),                            // 97: Fdb.FDBCLITssq
	(*FDBCLIUnlock)(nil),                          // 98: Fdb.FDBCLIUnlock
	(*FDBCLIUsetenant)(nil),                       // 99: Fdb.FDBCLIUsetenant
	(*FDBCLIWritemode)(nil),                       // 100: Fdb.FDBCLIWritemode
	(*FDBCLIVersionepochInfo)(nil),                // 101: Fdb.FDBCLIVersionepochInfo
	(*FDBCLIVersionepochGet)(nil),                 // 102: Fdb.FDBCLIVersionepochGet
	(*FDBCLIVersionepochDisable)(nil),             // 103: Fdb.FDBCLIVersionepochDisable
	(*FDBCLIVersionepochEnable)(nil),              // 104: Fdb.FDBCLIVersionepochEnable
	(*FDBCLIVersionepochCommit)(nil),              // 105: Fdb.FDBCLIVersionepochCommit
	(*FDBCLIVersionepochSet)(nil),                 // 106: Fdb.FDBCLIVersionepochSet
	(*FDBCLIVersionepoch)(nil),                    // 107: Fdb.FDBCLIVersionepoch
	(*FDBCLIWaitconnected)(nil),                   // 108: Fdb.FDBCLIWaitconnected
	(*FDBCLIWaitopen)(nil),                        // 109: Fdb.FDBCLIWaitopen
	(*FDBCLICommand)(nil),                         // 110: Fdb.FDBCLICommand
	(*FDBCLIUnknownAction)(nil),                   // 111: Fdb.FDBCLIUnknownAction
	(*FDBCLIRequest)(nil),                         // 112: Fdb.FDBCLIRequest
	(*Log)(nil),                                   // 113: Fdb.Log
	(*FDBCLIResponseOutput)(nil),                  // 114: Fdb.FDBCLIResponseOutput
	(*FDBCLIResponse)(nil),                        // 115: Fdb.FDBCLIResponse
	(*FDBServerRequest)(nil),                      // 116: Fdb.FDBServerRequest
	(*FDBServerCommand)(nil),                      // 117: Fdb.FDBServerCommand
	(*FDBServerVersion)(nil),                      // 118: Fdb.FDBServerVersion
	(*FDBServerUnknownAction)(nil),                // 119: Fdb.FDBServerUnknownAction
	(*FDBServerResponse)(nil),                     // 120: Fdb.FDBServerResponse
	(*wrapperspb.StringValue)(nil),                // 121: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                // 122: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                  // 123: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                   // 124: google.protobuf.Duration
	(*wrapperspb.Int32Value)(nil),                 // 125: google.protobuf.Int32Value
	(*emptypb.Empty)(nil),                         // 126: google.protobuf.Empty
}
var file_fdb_proto_depIdxs = []int32{
	0,   // 0: Fdb.ReadRequest.location:type_name -> Fdb.Location
	0,   // 1: Fdb.WriteRequest.location:type_name -> Fdb.Location
	0,   // 2: Fdb.DeleteRequest.location:type_name -> Fdb.Location
	7,   // 3: Fdb.FDBCLIBlobrange.start:type_name -> Fdb.FDBCLIBlobrangeStart
	8,   // 4: Fdb.FDBCLIBlobrange.stop:type_name -> Fdb.FDBCLIBlobrangeStop
	10,  // 5: Fdb.FDBCLICacheRange.set:type_name -> Fdb.FDBCLICacheRangeSet
	11,  // 6: Fdb.FDBCLICacheRange.clear:type_name -> Fdb.FDBCLICacheRangeClear
	17,  // 7: Fdb.FDBCLIChangefeedStream.no_version:type_name -> Fdb.FDBCLIChangefeedStreamNoVersion
	18,  // 8: Fdb.FDBCLIChangefeedStream.start_version:type_name -> Fdb.FDBCLIChangefeedStreamStartVersion
	19,  // 9: Fdb.FDBCLIChangefeedStream.start_end_version:type_name -> Fdb.FDBCLIChangefeedStreamStartEndVersion
	13,  // 10: Fdb.FDBCLIChangefeed.list:type_name -> Fdb.FDBCLIChangefeedList
	14,  // 11: Fdb.FDBCLIChangefeed.register:type_name -> Fdb.FDBCLIChangefeedRegister
	15,  // 12: Fdb.FDBCLIChangefeed.stop:type_name -> Fdb.FDBCLIChangefeedStop
	16,  // 13: Fdb.FDBCLIChangefeed.destroy:type_name -> Fdb.FDBCLIChangefeedDestroy
	20,  // 14: Fdb.FDBCLIChangefeed.stream:type_name -> Fdb.FDBCLIChangefeedStream
	21,  // 15: Fdb.FDBCLIChangefeed.pop:type_name -> Fdb.FDBCLIChangefeedStreamPop
	121, // 16: Fdb.FDBCLIConfigure.new_or_tss:type_name -> google.protobuf.StringValue
	121, // 17: Fdb.FDBCLIConfigure.redundancy_mode:type_name -> google.protobuf.StringValue
	121, // 18: Fdb.FDBCLIConfigure.storage_engine:type_name -> google.protobuf.StringValue
	122, // 19: Fdb.FDBCLIConfigure.grv_proxies:type_name -> google.protobuf.UInt32Value
	122, // 20: Fdb.FDBCLIConfigure.commit_proxies:type_name -> google.protobuf.UInt32Value
	122, // 21: Fdb.FDBCLIConfigure.resolvers:type_name -> google.protobuf.UInt32Value
	122, // 22: Fdb.FDBCLIConfigure.logs:type_name -> google.protobuf.UInt32Value
	122, // 23: Fdb.FDBCLIConfigure.count:type_name -> google.protobuf.UInt32Value
	122, // 24: Fdb.FDBCLIConfigure.perpetual_storage_wiggle:type_name -> google.protobuf.UInt32Value
	121, // 25: Fdb.FDBCLIConfigure.perpetual_storage_wiggle_locality:type_name -> google.protobuf.StringValue
	121, // 26: Fdb.FDBCLIConfigure.storage_migration_type:type_name -> google.protobuf.StringValue
	121, // 27: Fdb.FDBCLIConfigure.tenant_mode:type_name -> google.protobuf.StringValue
	123, // 28: Fdb.FDBCLIConsistencycheck.mode:type_name -> google.protobuf.BoolValue
	28,  // 29: Fdb.FDBCLICoordinators.auto:type_name -> Fdb.FDBCLICoordinatorsAuto
	29,  // 30: Fdb.FDBCLICoordinators.addresses:type_name -> Fdb.FDBCLICoordinatorsAddresses
	121, // 31: Fdb.FDBCLICoordinators.description:type_name -> google.protobuf.StringValue
	32,  // 32: Fdb.FDBCLIDatadistribution.on:type_name -> Fdb.FDBCLIDatadistributionOn
	33,  // 33: Fdb.FDBCLIDatadistribution.off:type_name -> Fdb.FDBCLIDatadistributionOff
	34,  // 34: Fdb.FDBCLIDatadistribution.enable:type_name -> Fdb.FDBCLIDatadistributionEnable
	35,  // 35: Fdb.FDBCLIDatadistribution.disable:type_name -> Fdb.FDBCLIDatadistributionDisable
	123, // 36: Fdb.FDBCLIExclude.failed:type_name -> google.protobuf.BoolValue
	40,  // 37: Fdb.FDBCLIExpensiveDataCheck.init:type_name -> Fdb.FDBCLIExpensiveDataCheckInit
	41,  // 38: Fdb.FDBCLIExpensiveDataCheck.list:type_name -> Fdb.FDBCLIExpensiveDataCheckList
	42,  // 39: Fdb.FDBCLIExpensiveDataCheck.all:type_name -> Fdb.FDBCLIExpensiveDataCheckAll
	43,  // 40: Fdb.FDBCLIExpensiveDataCheck.check:type_name -> Fdb.FDBCLIExpensiveDataCheckCheck
	123, // 41: Fdb.FDBCLIFileconfigure.new:type_name -> google.protobuf.BoolValue
	121, // 42: Fdb.FDBCLIGetrange.end_key:type_name -> google.protobuf.StringValue
	122, // 43: Fdb.FDBCLIGetrange.limit:type_name -> google.protobuf.UInt32Value
	121, // 44: Fdb.FDBCLIGetrangekeys.end_key:type_name -> google.protobuf.StringValue
	122, // 45: Fdb.FDBCLIGetrangekeys.limit:type_name -> google.protobuf.UInt32Value
	123, // 46: Fdb.FDBCLIInclude.failed:type_name -> google.protobuf.BoolValue
	53,  // 47: Fdb.FDBCLIInclude.addresses:type_name -> Fdb.FDBCLIIncludeAddresses
	55,  // 48: Fdb.FDBCLIKill.init:type_name -> Fdb.FDBCLIKillInit
	56,  // 49: Fdb.FDBCLIKill.list:type_name -> Fdb.FDBCLIKillList
	57,  // 50: Fdb.FDBCLIKill.all:type_name -> Fdb.FDBCLIKillAll
	58,  // 51: Fdb.FDBCLIKill.targets:type_name -> Fdb.FDBCLIKillTargets
	124, // 52: Fdb.FDBCLIKill.sleep:type_name -> google.protobuf.Duration
	121, // 53: Fdb.FDBCLIListtenants.begin:type_name -> google.protobuf.StringValue
	121, // 54: Fdb.FDBCLIListtenants.end:type_name -> google.protobuf.StringValue
	122, // 55: Fdb.FDBCLIListtenants.limit:type_name -> google.protobuf.UInt32Value
	62,  // 56: Fdb.FDBCLIMaintenance.status:type_name -> Fdb.FDBCLIMaintenanceStatus
	63,  // 57: Fdb.FDBCLIMaintenance.on:type_name -> Fdb.FDBCLIMaintenanceOn
	64,  // 58: Fdb.FDBCLIMaintenance.off:type_name -> Fdb.FDBCLIMaintenanceOff
	121, // 59: Fdb.FDBCLIOptionArg.arg:type_name -> google.protobuf.StringValue
	66,  // 60: Fdb.FDBCLIOption.blank:type_name -> Fdb.FDBCLIOptionBlank
	67,  // 61: Fdb.FDBCLIOption.arg:type_name -> Fdb.FDBCLIOptionArg
	69,  // 62: Fdb.FDBCLIProfileActionClientSet.default_rate:type_name -> Fdb.FDBCLIProfileActionClientDefault
	69,  // 63: Fdb.FDBCLIProfileActionClientSet.default_size:type_name -> Fdb.FDBCLIProfileActionClientDefault
	70,  // 64: Fdb.FDBCLIProfileActionClient.get:type_name -> Fdb.FDBCLIProfileActionClientGet
	71,  // 65: Fdb.FDBCLIProfileActionClient.set:type_name -> Fdb.FDBCLIProfileActionClientSet
	72,  // 66: Fdb.FDBCLIProfile.client:type_name -> Fdb.FDBCLIProfileActionClient
	73,  // 67: Fdb.FDBCLIProfile.list:type_name -> Fdb.FDBCLIProfileActionList
	74,  // 68: Fdb.FDBCLIProfile.flow:type_name -> Fdb.FDBCLIProfileActionFlow
	75,  // 69: Fdb.FDBCLIProfile.heap:type_name -> Fdb.FDBCLIProfileActionHeap
	79,  // 70: Fdb.FDBCLISetclass.list:type_name -> Fdb.FDBCLISetclassList
	78,  // 71: Fdb.FDBCLISetclass.arg:type_name -> Fdb.FDBCLISetclassArg
	121, // 72: Fdb.FDBCLIStatus.style:type_name -> google.protobuf.StringValue
	84,  // 73: Fdb.FDBCLISuspend.init:type_name -> Fdb.FDBCLISuspendInit
	85,  // 74: Fdb.FDBCLISuspend.suspend:type_name -> Fdb.FDBCLISuspendSuspend
	122, // 75: Fdb.FDBCLIThrottleActionOn.rate:type_name -> google.protobuf.UInt32Value
	121, // 76: Fdb.FDBCLIThrottleActionOn.duration:type_name -> google.protobuf.StringValue
	121, // 77: Fdb.FDBCLIThrottleActionOn.priority:type_name -> google.protobuf.StringValue
	121, // 78: Fdb.FDBCLIThrottleActionOff.type:type_name -> google.protobuf.StringValue
	121, // 79: Fdb.FDBCLIThrottleActionOff.tag:type_name -> google.protobuf.StringValue
	121, // 80: Fdb.FDBCLIThrottleActionOff.priority:type_name -> google.protobuf.StringValue
	121, // 81: Fdb.FDBCLIThrottleActionList.type:type_name -> google.protobuf.StringValue
	122, // 82: Fdb.FDBCLIThrottleActionList.limit:type_name -> google.protobuf.UInt32Value
	87,  // 83: Fdb.FDBCLIThrottle.on:type_name -> Fdb.FDBCLIThrottleActionOn
	88,  // 84: Fdb.FDBCLIThrottle.off:type_name -> Fdb.FDBCLIThrottleActionOff
	89,  // 85: Fdb.FDBCLIThrottle.enable:type_name -> Fdb.FDBCLIThrottleActionEnable
	90,  // 86: Fdb.FDBCLIThrottle.disable:type_name -> Fdb.FDBCLIThrottleActionDisable
	91,  // 87: Fdb.FDBCLIThrottle.list:type_name -> Fdb.FDBCLIThrottleActionList
	94,  // 88: Fdb.FDBCLITssq.start:type_name -> Fdb.FDBCLITssqStart
	95,  // 89: Fdb.FDBCLITssq.stop:type_name -> Fdb.FDBCLITssqStop
	96,  // 90: Fdb.FDBCLITssq.list:type_name -> Fdb.FDBCLITssqList
	101, // 91: Fdb.FDBCLIVersionepoch.info:type_name -> Fdb.FDBCLIVersionepochInfo
	102, // 92: Fdb.FDBCLIVersionepoch.get:type_name -> Fdb.FDBCLIVersionepochGet
	103, // 93: Fdb.FDBCLIVersionepoch.disable:type_name -> Fdb.FDBCLIVersionepochDisable
	104, // 94: Fdb.FDBCLIVersionepoch.enable:type_name -> Fdb.FDBCLIVersionepochEnable
	105, // 95: Fdb.FDBCLIVersionepoch.commit:type_name -> Fdb.FDBCLIVersionepochCommit
	106, // 96: Fdb.FDBCLIVersionepoch.set:type_name -> Fdb.FDBCLIVersionepochSet
	5,   // 97: Fdb.FDBCLICommand.advanceversion:type_name -> Fdb.FDBCLIAdvanceversion
	6,   // 98: Fdb.FDBCLICommand.begin:type_name -> Fdb.FDBCLIBegin
	9,   // 99: Fdb.FDBCLICommand.blobrange:type_name -> Fdb.FDBCLIBlobrange
	12,  // 100: Fdb.FDBCLICommand.cache_range:type_name -> Fdb.FDBCLICacheRange
	22,  // 101: Fdb.FDBCLICommand.changefeed:type_name -> Fdb.FDBCLIChangefeed
	23,  // 102: Fdb.FDBCLICommand.clear:type_name -> Fdb.FDBCLIClear
	24,  // 103: Fdb.FDBCLICommand.clearrange:type_name -> Fdb.FDBCLIClearrange
	25,  // 104: Fdb.FDBCLICommand.commit:type_name -> Fdb.FDBCLICommit
	26,  // 105: Fdb.FDBCLICommand.configure:type_name -> Fdb.FDBCLIConfigure
	27,  // 106: Fdb.FDBCLICommand.consistencycheck:type_name -> Fdb.FDBCLIConsistencycheck
	30,  // 107: Fdb.FDBCLICommand.coordinators:type_name -> Fdb.FDBCLICoordinators
	31,  // 108: Fdb.FDBCLICommand.createtenant:type_name -> Fdb.FDBCLICreatetenant
	36,  // 109: Fdb.FDBCLICommand.datadistribution:type_name -> Fdb.FDBCLIDatadistribution
	37,  // 110: Fdb.FDBCLICommand.defaulttenant:type_name -> Fdb.FDBCLIDefaulttenant
	38,  // 111: Fdb.FDBCLICommand.deletetenant:type_name -> Fdb.FDBCLIDeletetenant
	39,  // 112: Fdb.FDBCLICommand.exclude:type_name -> Fdb.FDBCLIExclude
	44,  // 113: Fdb.FDBCLICommand.expensive_data_check:type_name -> Fdb.FDBCLIExpensiveDataCheck
	45,  // 114: Fdb.FDBCLICommand.fileconfigure:type_name -> Fdb.FDBCLIFileconfigure
	46,  // 115: Fdb.FDBCLICommand.force_recovery_with_data_loss:type_name -> Fdb.FDBCLIForceRecoveryWithDataLoss
	47,  // 116: Fdb.FDBCLICommand.get:type_name -> Fdb.FDBCLIGet
	48,  // 117: Fdb.FDBCLICommand.getrange:type_name -> Fdb.FDBCLIGetrange
	49,  // 118: Fdb.FDBCLICommand.getrangekeys:type_name -> Fdb.FDBCLIGetrangekeys
	50,  // 119: Fdb.FDBCLICommand.gettenant:type_name -> Fdb.FDBCLIGettenant
	51,  // 120: Fdb.FDBCLICommand.getversion:type_name -> Fdb.FDBCLIGetversion
	52,  // 121: Fdb.FDBCLICommand.help:type_name -> Fdb.FDBCLIHelp
	54,  // 122: Fdb.FDBCLICommand.include:type_name -> Fdb.FDBCLIInclude
	59,  // 123: Fdb.FDBCLICommand.kill:type_name -> Fdb.FDBCLIKill
	60,  // 124: Fdb.FDBCLICommand.listtenants:type_name -> Fdb.FDBCLIListtenants
	61,  // 125: Fdb.FDBCLICommand.lock:type_name -> Fdb.FDBCLILock
	65,  // 126: Fdb.FDBCLICommand.maintenance:type_name -> Fdb.FDBCLIMaintenance
	68,  // 127: Fdb.FDBCLICommand.option:type_name -> Fdb.FDBCLIOption
	76,  // 128: Fdb.FDBCLICommand.profile:type_name -> Fdb.FDBCLIProfile
	77,  // 129: Fdb.FDBCLICommand.set:type_name -> Fdb.FDBCLISet
	80,  // 130: Fdb.FDBCLICommand.setclass:type_name -> Fdb.FDBCLISetclass
	82,  // 131: Fdb.FDBCLICommand.snapshot:type_name -> Fdb.FDBCLISnapshot
	81,  // 132: Fdb.FDBCLICommand.sleep:type_name -> Fdb.FDBCLISleep
	83,  // 133: Fdb.FDBCLICommand.status:type_name -> Fdb.FDBCLIStatus
	86,  // 134: Fdb.FDBCLICommand.suspend:type_name -> Fdb.FDBCLISuspend
	92,  // 135: Fdb.FDBCLICommand.throttle:type_name -> Fdb.FDBCLIThrottle
	93,  // 136: Fdb.FDBCLICommand.triggerddteaminfolog:type_name -> Fdb.FDBCLITriggerddteaminfolog
	97,  // 137: Fdb.FDBCLICommand.tssq:type_name -> Fdb.FDBCLITssq
	98,  // 138: Fdb.FDBCLICommand.unlock:type_name -> Fdb.FDBCLIUnlock
	99,  // 139: Fdb.FDBCLICommand.usetenant:type_name -> Fdb.FDBCLIUsetenant
	100, // 140: Fdb.FDBCLICommand.writemode:type_name -> Fdb.FDBCLIWritemode
	107, // 141: Fdb.FDBCLICommand.versionepoch:type_name -> Fdb.FDBCLIVersionepoch
	108, // 142: Fdb.FDBCLICommand.waitconnected:type_name -> Fdb.FDBCLIWaitconnected
	109, // 143: Fdb.FDBCLICommand.waitopen:type_name -> Fdb.FDBCLIWaitopen
	111, // 144: Fdb.FDBCLICommand.unknown:type_name -> Fdb.FDBCLIUnknownAction
	121, // 145: Fdb.FDBCLIRequest.config:type_name -> google.protobuf.StringValue
	123, // 146: Fdb.FDBCLIRequest.log:type_name -> google.protobuf.BoolValue
	121, // 147: Fdb.FDBCLIRequest.trace_format:type_name -> google.protobuf.StringValue
	121, // 148: Fdb.FDBCLIRequest.tls_certificate_file:type_name -> google.protobuf.StringValue
	121, // 149: Fdb.FDBCLIRequest.tls_ca_file:type_name -> google.protobuf.StringValue
	121, // 150: Fdb.FDBCLIRequest.tls_key_file:type_name -> google.protobuf.StringValue
	121, // 151: Fdb.FDBCLIRequest.tls_password:type_name -> google.protobuf.StringValue
	121, // 152: Fdb.FDBCLIRequest.tls_verify_peers:type_name -> google.protobuf.StringValue
	123, // 153: Fdb.FDBCLIRequest.debug_tls:type_name -> google.protobuf.BoolValue
	123, // 154: Fdb.FDBCLIRequest.version:type_name -> google.protobuf.BoolValue
	121, // 155: Fdb.FDBCLIRequest.log_group:type_name -> google.protobuf.StringValue
	123, // 156: Fdb.FDBCLIRequest.no_status:type_name -> google.protobuf.BoolValue
	121, // 157: Fdb.FDBCLIRequest.memory:type_name -> google.protobuf.StringValue
	123, // 158: Fdb.FDBCLIRequest.build_flags:type_name -> google.protobuf.BoolValue
	125, // 159: Fdb.FDBCLIRequest.timeout:type_name -> google.protobuf.Int32Value
	110, // 160: Fdb.FDBCLIRequest.commands:type_name -> Fdb.FDBCLICommand
	114, // 161: Fdb.FDBCLIResponse.output:type_name -> Fdb.FDBCLIResponseOutput
	113, // 162: Fdb.FDBCLIResponse.log:type_name -> Fdb.Log
	117, // 163: Fdb.FDBServerRequest.commands:type_name -> Fdb.FDBServerCommand
	118, // 164: Fdb.FDBServerCommand.version:type_name -> Fdb.FDBServerVersion
	119, // 165: Fdb.FDBServerCommand.unknown:type_name -> Fdb.FDBServerUnknownAction
	1,   // 166: Fdb.Conf.Read:input_type -> Fdb.ReadRequest
	2,   // 167: Fdb.Conf.Write:input_type -> Fdb.WriteRequest
	3,   // 168: Fdb.Conf.Delete:input_type -> Fdb.DeleteRequest
	112, // 169: Fdb.CLI.FDBCLI:input_type -> Fdb.FDBCLIRequest
	116, // 170: Fdb.Server.FDBServer:input_type -> Fdb.FDBServerRequest
	4,   // 171: Fdb.Conf.Read:output_type -> Fdb.FdbConfResponse
	126, // 172: Fdb.Conf.Write:output_type -> google.protobuf.Empty
	126, // 173: Fdb.Conf.Delete:output_type -> google.protobuf.Empty
	115, // 174: Fdb.CLI.FDBCLI:output_type -> Fdb.FDBCLIResponse
	120, // 175: Fdb.Server.FDBServer:output_type -> Fdb.FDBServerResponse
	171, // [171:176] is the sub-list for method output_type
	166, // [166:171] is the sub-list for method input_type
	166, // [166:166] is the sub-list for extension type_name
	166, // [166:166] is the sub-list for extension extendee
	0,   // [0:166] is the sub-list for field type_name
}

func init() { file_fdb_proto_init() }
func file_fdb_proto_init() {
	if File_fdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbConfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIAdvanceversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIBlobrangeStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIBlobrangeStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIBlobrange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICacheRangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICacheRangeClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICacheRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedDestroy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStreamNoVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStreamStartVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStreamStartEndVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeedStreamPop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIChangefeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIClearrange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIConfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIConsistencycheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICoordinatorsAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICoordinatorsAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICoordinators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICreatetenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDatadistributionOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDatadistributionOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDatadistributionEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDatadistributionDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDatadistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDefaulttenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIDeletetenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExclude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExpensiveDataCheckInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExpensiveDataCheckList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExpensiveDataCheckAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExpensiveDataCheckCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIExpensiveDataCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIFileconfigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIForceRecoveryWithDataLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIGetrange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIGetrangekeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIGettenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIGetversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIIncludeAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIInclude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIKillInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIKillList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIKillAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIKillTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIKill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIListtenants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLILock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIMaintenanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIMaintenanceOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIMaintenanceOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIOptionBlank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIOptionArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionClientDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionClientGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionClientSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfileActionHeap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISetclassArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISetclassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISetclass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISuspendInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISuspendSuspend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLISuspend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottleActionOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottleActionOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottleActionEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottleActionDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottleActionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIThrottle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLITriggerddteaminfolog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLITssqStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLITssqStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLITssqList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLITssq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIUsetenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIWritemode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochDisable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepochSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIVersionepoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIWaitconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIWaitopen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLICommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIUnknownAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIResponseOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBCLIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBServerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBServerVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBServerUnknownAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fdb_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FDBServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fdb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FDBCLIBlobrange_Start)(nil),
		(*FDBCLIBlobrange_Stop)(nil),
	}
	file_fdb_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*FDBCLICacheRange_Set)(nil),
		(*FDBCLICacheRange_Clear)(nil),
	}
	file_fdb_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*FDBCLIChangefeedStream_NoVersion)(nil),
		(*FDBCLIChangefeedStream_StartVersion)(nil),
		(*FDBCLIChangefeedStream_StartEndVersion)(nil),
	}
	file_fdb_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*FDBCLIChangefeed_List)(nil),
		(*FDBCLIChangefeed_Register)(nil),
		(*FDBCLIChangefeed_Stop)(nil),
		(*FDBCLIChangefeed_Destroy)(nil),
		(*FDBCLIChangefeed_Stream)(nil),
		(*FDBCLIChangefeed_Pop)(nil),
	}
	file_fdb_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*FDBCLICoordinators_Auto)(nil),
		(*FDBCLICoordinators_Addresses)(nil),
	}
	file_fdb_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*FDBCLIDatadistribution_On)(nil),
		(*FDBCLIDatadistribution_Off)(nil),
		(*FDBCLIDatadistribution_Enable)(nil),
		(*FDBCLIDatadistribution_Disable)(nil),
	}
	file_fdb_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*FDBCLIExpensiveDataCheck_Init)(nil),
		(*FDBCLIExpensiveDataCheck_List)(nil),
		(*FDBCLIExpensiveDataCheck_All)(nil),
		(*FDBCLIExpensiveDataCheck_Check)(nil),
	}
	file_fdb_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*FDBCLIInclude_All)(nil),
		(*FDBCLIInclude_Addresses)(nil),
	}
	file_fdb_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*FDBCLIKill_Init)(nil),
		(*FDBCLIKill_List)(nil),
		(*FDBCLIKill_All)(nil),
		(*FDBCLIKill_Targets)(nil),
	}
	file_fdb_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*FDBCLIMaintenance_Status)(nil),
		(*FDBCLIMaintenance_On)(nil),
		(*FDBCLIMaintenance_Off)(nil),
	}
	file_fdb_proto_msgTypes[68].OneofWrappers = []interface{}{
		(*FDBCLIOption_Blank)(nil),
		(*FDBCLIOption_Arg)(nil),
	}
	file_fdb_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*FDBCLIProfileActionClientSet_DefaultRate)(nil),
		(*FDBCLIProfileActionClientSet_ValueRate)(nil),
		(*FDBCLIProfileActionClientSet_DefaultSize)(nil),
		(*FDBCLIProfileActionClientSet_ValueSize)(nil),
	}
	file_fdb_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*FDBCLIProfileActionClient_Get)(nil),
		(*FDBCLIProfileActionClient_Set)(nil),
	}
	file_fdb_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*FDBCLIProfile_Client)(nil),
		(*FDBCLIProfile_List)(nil),
		(*FDBCLIProfile_Flow)(nil),
		(*FDBCLIProfile_Heap)(nil),
	}
	file_fdb_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*FDBCLISetclass_List)(nil),
		(*FDBCLISetclass_Arg)(nil),
	}
	file_fdb_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*FDBCLISuspend_Init)(nil),
		(*FDBCLISuspend_Suspend)(nil),
	}
	file_fdb_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*FDBCLIThrottle_On)(nil),
		(*FDBCLIThrottle_Off)(nil),
		(*FDBCLIThrottle_Enable)(nil),
		(*FDBCLIThrottle_Disable)(nil),
		(*FDBCLIThrottle_List)(nil),
	}
	file_fdb_proto_msgTypes[97].OneofWrappers = []interface{}{
		(*FDBCLITssq_Start)(nil),
		(*FDBCLITssq_Stop)(nil),
		(*FDBCLITssq_List)(nil),
	}
	file_fdb_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*FDBCLIVersionepoch_Info)(nil),
		(*FDBCLIVersionepoch_Get)(nil),
		(*FDBCLIVersionepoch_Disable)(nil),
		(*FDBCLIVersionepoch_Enable)(nil),
		(*FDBCLIVersionepoch_Commit)(nil),
		(*FDBCLIVersionepoch_Set)(nil),
	}
	file_fdb_proto_msgTypes[110].OneofWrappers = []interface{}{
		(*FDBCLICommand_Advanceversion)(nil),
		(*FDBCLICommand_Begin)(nil),
		(*FDBCLICommand_Blobrange)(nil),
		(*FDBCLICommand_CacheRange)(nil),
		(*FDBCLICommand_Changefeed)(nil),
		(*FDBCLICommand_Clear)(nil),
		(*FDBCLICommand_Clearrange)(nil),
		(*FDBCLICommand_Commit)(nil),
		(*FDBCLICommand_Configure)(nil),
		(*FDBCLICommand_Consistencycheck)(nil),
		(*FDBCLICommand_Coordinators)(nil),
		(*FDBCLICommand_Createtenant)(nil),
		(*FDBCLICommand_Datadistribution)(nil),
		(*FDBCLICommand_Defaulttenant)(nil),
		(*FDBCLICommand_Deletetenant)(nil),
		(*FDBCLICommand_Exclude)(nil),
		(*FDBCLICommand_ExpensiveDataCheck)(nil),
		(*FDBCLICommand_Fileconfigure)(nil),
		(*FDBCLICommand_ForceRecoveryWithDataLoss)(nil),
		(*FDBCLICommand_Get)(nil),
		(*FDBCLICommand_Getrange)(nil),
		(*FDBCLICommand_Getrangekeys)(nil),
		(*FDBCLICommand_Gettenant)(nil),
		(*FDBCLICommand_Getversion)(nil),
		(*FDBCLICommand_Help)(nil),
		(*FDBCLICommand_Include)(nil),
		(*FDBCLICommand_Kill)(nil),
		(*FDBCLICommand_Listtenants)(nil),
		(*FDBCLICommand_Lock)(nil),
		(*FDBCLICommand_Maintenance)(nil),
		(*FDBCLICommand_Option)(nil),
		(*FDBCLICommand_Profile)(nil),
		(*FDBCLICommand_Set)(nil),
		(*FDBCLICommand_Setclass)(nil),
		(*FDBCLICommand_Snapshot)(nil),
		(*FDBCLICommand_Sleep)(nil),
		(*FDBCLICommand_Status)(nil),
		(*FDBCLICommand_Suspend)(nil),
		(*FDBCLICommand_Throttle)(nil),
		(*FDBCLICommand_Triggerddteaminfolog)(nil),
		(*FDBCLICommand_Tssq)(nil),
		(*FDBCLICommand_Unlock)(nil),
		(*FDBCLICommand_Usetenant)(nil),
		(*FDBCLICommand_Writemode)(nil),
		(*FDBCLICommand_Versionepoch)(nil),
		(*FDBCLICommand_Waitconnected)(nil),
		(*FDBCLICommand_Waitopen)(nil),
		(*FDBCLICommand_Unknown)(nil),
	}
	file_fdb_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*FDBCLIResponse_Output)(nil),
		(*FDBCLIResponse_Log)(nil),
	}
	file_fdb_proto_msgTypes[117].OneofWrappers = []interface{}{
		(*FDBServerCommand_Version)(nil),
		(*FDBServerCommand_Unknown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fdb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_fdb_proto_goTypes,
		DependencyIndexes: file_fdb_proto_depIdxs,
		MessageInfos:      file_fdb_proto_msgTypes,
	}.Build()
	File_fdb_proto = out.File
	file_fdb_proto_rawDesc = nil
	file_fdb_proto_goTypes = nil
	file_fdb_proto_depIdxs = nil
}
