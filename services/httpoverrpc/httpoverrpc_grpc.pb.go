// Copyright (c) 2022 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: httpoverrpc.proto

package httpoverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HTTPOverRPC_Host_FullMethodName = "/HTTPOverRPC.HTTPOverRPC/Host"
)

// HTTPOverRPCClient is the client API for HTTPOverRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The HTTPOverRPC service definition
type HTTPOverRPCClient interface {
	// Make an HTTP call to specified host
	Host(ctx context.Context, in *HostHTTPRequest, opts ...grpc.CallOption) (*HTTPReply, error)
}

type hTTPOverRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPOverRPCClient(cc grpc.ClientConnInterface) HTTPOverRPCClient {
	return &hTTPOverRPCClient{cc}
}

func (c *hTTPOverRPCClient) Host(ctx context.Context, in *HostHTTPRequest, opts ...grpc.CallOption) (*HTTPReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HTTPReply)
	err := c.cc.Invoke(ctx, HTTPOverRPC_Host_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPOverRPCServer is the server API for HTTPOverRPC service.
// All implementations should embed UnimplementedHTTPOverRPCServer
// for forward compatibility.
//
// The HTTPOverRPC service definition
type HTTPOverRPCServer interface {
	// Make an HTTP call to specified host
	Host(context.Context, *HostHTTPRequest) (*HTTPReply, error)
}

// UnimplementedHTTPOverRPCServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHTTPOverRPCServer struct{}

func (UnimplementedHTTPOverRPCServer) Host(context.Context, *HostHTTPRequest) (*HTTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedHTTPOverRPCServer) testEmbeddedByValue() {}

// UnsafeHTTPOverRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPOverRPCServer will
// result in compilation errors.
type UnsafeHTTPOverRPCServer interface {
	mustEmbedUnimplementedHTTPOverRPCServer()
}

func RegisterHTTPOverRPCServer(s grpc.ServiceRegistrar, srv HTTPOverRPCServer) {
	// If the following call pancis, it indicates UnimplementedHTTPOverRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HTTPOverRPC_ServiceDesc, srv)
}

func _HTTPOverRPC_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPOverRPCServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HTTPOverRPC_Host_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPOverRPCServer).Host(ctx, req.(*HostHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTPOverRPC_ServiceDesc is the grpc.ServiceDesc for HTTPOverRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPOverRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HTTPOverRPC.HTTPOverRPC",
	HandlerType: (*HTTPOverRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Host",
			Handler:    _HTTPOverRPC_Host_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpoverrpc.proto",
}
