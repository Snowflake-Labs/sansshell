// Copyright (c) 2022 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: mpa.proto

package mpa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mpa_Store_FullMethodName           = "/Mpa.Mpa/Store"
	Mpa_Approve_FullMethodName         = "/Mpa.Mpa/Approve"
	Mpa_WaitForApproval_FullMethodName = "/Mpa.Mpa/WaitForApproval"
	Mpa_List_FullMethodName            = "/Mpa.Mpa/List"
	Mpa_Get_FullMethodName             = "/Mpa.Mpa/Get"
	Mpa_Clear_FullMethodName           = "/Mpa.Mpa/Clear"
)

// MpaClient is the client API for Mpa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpaClient interface {
	// Store a request that we'd like to try running in the future. Requests
	// are stored in-memory and older requests may be cleared automatically.
	// This call is idempotent - requests from the same user with the same
	// contents will return the same id.
	//
	// The user for the request and any justification is implicitly passed in
	// via inspecting the peer of the RPC or via gRPC metadata.
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	// Approve a previously stored request. A request can have multiple approvals
	// and can be approved by anybody but the original user that stored the request.
	//
	// The user for the request is implicitly passed in via inspecting the
	// peer of the RPC or via gRPC metadata.
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	// Block until at least one approval has been granted. This is used
	// as an optimization to avoid needing to poll for MPA approval.
	WaitForApproval(ctx context.Context, in *WaitForApprovalRequest, opts ...grpc.CallOption) (*WaitForApprovalResponse, error)
	// List available requests.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get a request and all approvals associated with it.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Clear a stored request.
	//
	// This is typically unnecessary due to how requests are stored in memory
	// and forgotten after a process restart.
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
}

type mpaClient struct {
	cc grpc.ClientConnInterface
}

func NewMpaClient(cc grpc.ClientConnInterface) MpaClient {
	return &mpaClient{cc}
}

func (c *mpaClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, Mpa_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpaClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, Mpa_Approve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpaClient) WaitForApproval(ctx context.Context, in *WaitForApprovalRequest, opts ...grpc.CallOption) (*WaitForApprovalResponse, error) {
	out := new(WaitForApprovalResponse)
	err := c.cc.Invoke(ctx, Mpa_WaitForApproval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpaClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Mpa_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpaClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Mpa_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpaClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, Mpa_Clear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpaServer is the server API for Mpa service.
// All implementations should embed UnimplementedMpaServer
// for forward compatibility
type MpaServer interface {
	// Store a request that we'd like to try running in the future. Requests
	// are stored in-memory and older requests may be cleared automatically.
	// This call is idempotent - requests from the same user with the same
	// contents will return the same id.
	//
	// The user for the request and any justification is implicitly passed in
	// via inspecting the peer of the RPC or via gRPC metadata.
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	// Approve a previously stored request. A request can have multiple approvals
	// and can be approved by anybody but the original user that stored the request.
	//
	// The user for the request is implicitly passed in via inspecting the
	// peer of the RPC or via gRPC metadata.
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	// Block until at least one approval has been granted. This is used
	// as an optimization to avoid needing to poll for MPA approval.
	WaitForApproval(context.Context, *WaitForApprovalRequest) (*WaitForApprovalResponse, error)
	// List available requests.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get a request and all approvals associated with it.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Clear a stored request.
	//
	// This is typically unnecessary due to how requests are stored in memory
	// and forgotten after a process restart.
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
}

// UnimplementedMpaServer should be embedded to have forward compatible implementations.
type UnimplementedMpaServer struct {
}

func (UnimplementedMpaServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedMpaServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedMpaServer) WaitForApproval(context.Context, *WaitForApprovalRequest) (*WaitForApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForApproval not implemented")
}
func (UnimplementedMpaServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMpaServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMpaServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}

// UnsafeMpaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpaServer will
// result in compilation errors.
type UnsafeMpaServer interface {
	mustEmbedUnimplementedMpaServer()
}

func RegisterMpaServer(s grpc.ServiceRegistrar, srv MpaServer) {
	s.RegisterService(&Mpa_ServiceDesc, srv)
}

func _Mpa_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpa_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpa_WaitForApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).WaitForApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_WaitForApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).WaitForApproval(ctx, req.(*WaitForApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpa_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpa_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpa_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpaServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpa_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpaServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mpa_ServiceDesc is the grpc.ServiceDesc for Mpa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mpa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mpa.Mpa",
	HandlerType: (*MpaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Mpa_Store_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Mpa_Approve_Handler,
		},
		{
			MethodName: "WaitForApproval",
			Handler:    _Mpa_WaitForApproval_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Mpa_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Mpa_Get_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Mpa_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpa.proto",
}
