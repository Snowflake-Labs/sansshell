// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: sansshell.proto

package sansshell

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggingClient is the client API for Logging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggingClient interface {
	// SetVerbosity will change the logging level of the stdr logger package.
	// This can be called concurrently with no guarentees on ordering so the
	// final level set is the last RPC processed. This will return the previous
	// verbosity setting that was in effect before setting.
	SetVerbosity(ctx context.Context, in *SetVerbosityRequest, opts ...grpc.CallOption) (*VerbosityReply, error)
	// GetVerbosity returns the latest verbosity level based on the most
	// recently processed SetVerbosity RPC.
	GetVerbosity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerbosityReply, error)
}

type loggingClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingClient(cc grpc.ClientConnInterface) LoggingClient {
	return &loggingClient{cc}
}

func (c *loggingClient) SetVerbosity(ctx context.Context, in *SetVerbosityRequest, opts ...grpc.CallOption) (*VerbosityReply, error) {
	out := new(VerbosityReply)
	err := c.cc.Invoke(ctx, "/Sansshell.Logging/SetVerbosity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingClient) GetVerbosity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerbosityReply, error) {
	out := new(VerbosityReply)
	err := c.cc.Invoke(ctx, "/Sansshell.Logging/GetVerbosity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingServer is the server API for Logging service.
// All implementations should embed UnimplementedLoggingServer
// for forward compatibility
type LoggingServer interface {
	// SetVerbosity will change the logging level of the stdr logger package.
	// This can be called concurrently with no guarentees on ordering so the
	// final level set is the last RPC processed. This will return the previous
	// verbosity setting that was in effect before setting.
	SetVerbosity(context.Context, *SetVerbosityRequest) (*VerbosityReply, error)
	// GetVerbosity returns the latest verbosity level based on the most
	// recently processed SetVerbosity RPC.
	GetVerbosity(context.Context, *emptypb.Empty) (*VerbosityReply, error)
}

// UnimplementedLoggingServer should be embedded to have forward compatible implementations.
type UnimplementedLoggingServer struct {
}

func (UnimplementedLoggingServer) SetVerbosity(context.Context, *SetVerbosityRequest) (*VerbosityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVerbosity not implemented")
}
func (UnimplementedLoggingServer) GetVerbosity(context.Context, *emptypb.Empty) (*VerbosityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerbosity not implemented")
}

// UnsafeLoggingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggingServer will
// result in compilation errors.
type UnsafeLoggingServer interface {
	mustEmbedUnimplementedLoggingServer()
}

func RegisterLoggingServer(s grpc.ServiceRegistrar, srv LoggingServer) {
	s.RegisterService(&Logging_ServiceDesc, srv)
}

func _Logging_SetVerbosity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVerbosityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServer).SetVerbosity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sansshell.Logging/SetVerbosity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServer).SetVerbosity(ctx, req.(*SetVerbosityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logging_GetVerbosity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServer).GetVerbosity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sansshell.Logging/GetVerbosity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServer).GetVerbosity(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Logging_ServiceDesc is the grpc.ServiceDesc for Logging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sansshell.Logging",
	HandlerType: (*LoggingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVerbosity",
			Handler:    _Logging_SetVerbosity_Handler,
		},
		{
			MethodName: "GetVerbosity",
			Handler:    _Logging_GetVerbosity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sansshell.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateClient interface {
	// Version will return the build version as embedded in the running
	// server.option
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/Sansshell.State/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
// All implementations should embed UnimplementedStateServer
// for forward compatibility
type StateServer interface {
	// Version will return the build version as embedded in the running
	// server.option
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
}

// UnimplementedStateServer should be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (UnimplementedStateServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

// UnsafeStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServer will
// result in compilation errors.
type UnsafeStateServer interface {
	mustEmbedUnimplementedStateServer()
}

func RegisterStateServer(s grpc.ServiceRegistrar, srv StateServer) {
	s.RegisterService(&State_ServiceDesc, srv)
}

func _State_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sansshell.State/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// State_ServiceDesc is the grpc.ServiceDesc for State service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var State_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sansshell.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _State_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sansshell.proto",
}
