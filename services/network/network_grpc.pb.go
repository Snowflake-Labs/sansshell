// Copyright (c) 2024 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: network.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PacketCapture_RawStream_FullMethodName      = "/Network.PacketCapture/RawStream"
	PacketCapture_ListInterfaces_FullMethodName = "/Network.PacketCapture/ListInterfaces"
)

// PacketCaptureClient is the client API for PacketCapture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketCaptureClient interface {
	RawStream(ctx context.Context, in *RawStreamRequest, opts ...grpc.CallOption) (PacketCapture_RawStreamClient, error)
	ListInterfaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInterfacesReply, error)
}

type packetCaptureClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketCaptureClient(cc grpc.ClientConnInterface) PacketCaptureClient {
	return &packetCaptureClient{cc}
}

func (c *packetCaptureClient) RawStream(ctx context.Context, in *RawStreamRequest, opts ...grpc.CallOption) (PacketCapture_RawStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PacketCapture_ServiceDesc.Streams[0], PacketCapture_RawStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &packetCaptureRawStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PacketCapture_RawStreamClient interface {
	Recv() (*RawStreamReply, error)
	grpc.ClientStream
}

type packetCaptureRawStreamClient struct {
	grpc.ClientStream
}

func (x *packetCaptureRawStreamClient) Recv() (*RawStreamReply, error) {
	m := new(RawStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetCaptureClient) ListInterfaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInterfacesReply, error) {
	out := new(ListInterfacesReply)
	err := c.cc.Invoke(ctx, PacketCapture_ListInterfaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketCaptureServer is the server API for PacketCapture service.
// All implementations should embed UnimplementedPacketCaptureServer
// for forward compatibility
type PacketCaptureServer interface {
	RawStream(*RawStreamRequest, PacketCapture_RawStreamServer) error
	ListInterfaces(context.Context, *emptypb.Empty) (*ListInterfacesReply, error)
}

// UnimplementedPacketCaptureServer should be embedded to have forward compatible implementations.
type UnimplementedPacketCaptureServer struct {
}

func (UnimplementedPacketCaptureServer) RawStream(*RawStreamRequest, PacketCapture_RawStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RawStream not implemented")
}
func (UnimplementedPacketCaptureServer) ListInterfaces(context.Context, *emptypb.Empty) (*ListInterfacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}

// UnsafePacketCaptureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketCaptureServer will
// result in compilation errors.
type UnsafePacketCaptureServer interface {
	mustEmbedUnimplementedPacketCaptureServer()
}

func RegisterPacketCaptureServer(s grpc.ServiceRegistrar, srv PacketCaptureServer) {
	s.RegisterService(&PacketCapture_ServiceDesc, srv)
}

func _PacketCapture_RawStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketCaptureServer).RawStream(m, &packetCaptureRawStreamServer{stream})
}

type PacketCapture_RawStreamServer interface {
	Send(*RawStreamReply) error
	grpc.ServerStream
}

type packetCaptureRawStreamServer struct {
	grpc.ServerStream
}

func (x *packetCaptureRawStreamServer) Send(m *RawStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _PacketCapture_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketCaptureServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketCapture_ListInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketCaptureServer).ListInterfaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketCapture_ServiceDesc is the grpc.ServiceDesc for PacketCapture service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketCapture_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Network.PacketCapture",
	HandlerType: (*PacketCaptureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInterfaces",
			Handler:    _PacketCapture_ListInterfaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RawStream",
			Handler:       _PacketCapture_RawStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}
