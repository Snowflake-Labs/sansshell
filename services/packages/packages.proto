/* Copyright (c) 2019 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

syntax = "proto3";

option go_package = "github.com/Snowflake-Labs/sansshell/services/packages";

package Packages;

// The Packages service definition.
service Packages {
  rpc Install(InstallRequest) returns (InstallReply) {}
  rpc Remove(RemoveRequest) returns (RemoveReply) {}
  rpc Update(UpdateRequest) returns (UpdateReply) {}
  rpc ListInstalled(ListInstalledRequest) returns (ListInstalledReply) {}
  rpc RepoList(RepoListRequest) returns (RepoListReply) {}
  // Cleanup executes any package system specific cleanup such as
  // yum-complete-transaction for YUM systems. If a given package system doesn't
  // have this API this is a no-op.
  rpc Cleanup(CleanupRequest) returns (CleanupResponse) {}
}

// Allow different package systems as future proofing.
enum PackageSystem {
  // The remote side will attempt to pick the appropriate one.
  PACKAGE_SYSTEM_UNKNOWN = 0;
  PACKAGE_SYSTEM_YUM = 1;
}

message InstallRequest {
  PackageSystem package_system = 1;
  string name = 2;
  // Version must be the full nevra version if this is YUM:
  //
  // i.e. epoch:version.arch
  string version = 3;
  // If set enables this repo for resolving package/version.
  string repo = 4;
  // If set disables this repo before resolving package/version.
  string disable_repo = 5;
}

message InstallReply { string debug_output = 1; }

message RemoveRequest {
  PackageSystem package_system = 1;
  string name = 2;
  // Version must be the full nevra version if this is YUM:
  //
  // i.e. epoch:version.arch
  string version = 3;
}

message RemoveReply { string debug_output = 1;}

message UpdateRequest {
  PackageSystem package_system = 1;
  string name = 2;
  // This version must be installed for update to execute.
  // As with install above for YUM this must be a full nevra version.
  string old_version = 3;
  string new_version = 4;
  // If set enables this repo as well for resolving package/version.
  string repo = 5;
  // If set disables this repo before resolving package/version.
  string disable_repo = 6;
}

message UpdateReply { string debug_output = 1; }

message ListInstalledRequest { PackageSystem package_system = 1; }

message PackageInfo {
  string name = 1;
  string version = 2;
  string repo = 3;
}

message ListInstalledReply { repeated PackageInfo packages = 1; }

message RepoListRequest { PackageSystem package_system = 1; }

enum RepoStatus {
  REPO_STATUS_UNKNOWN = 0;
  REPO_STATUS_ENABLED = 1;
  REPO_STATUS_DISABLED = 2;
}

message Repo {
  string id = 1;
  string name = 2;
  RepoStatus status = 3;
  string filename = 4;
  string url = 5;
}

message RepoListReply { repeated Repo repos = 1; }

message CleanupRequest { PackageSystem package_system = 1; }

message CleanupResponse { string debug_output = 1; }
