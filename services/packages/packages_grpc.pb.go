// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package packages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackagesClient is the client API for Packages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesClient interface {
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	ListInstalled(ctx context.Context, in *ListInstalledRequest, opts ...grpc.CallOption) (*ListInstalledReply, error)
	RepoList(ctx context.Context, in *RepoListRequest, opts ...grpc.CallOption) (*RepoListReply, error)
	// Cleanup executes any package system specific cleanup such as
	// yum-complete-transaction for YUM systems. If a given package system doesn't
	// have this API this is a no-op.
	Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error)
}

type packagesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesClient(cc grpc.ClientConnInterface) PackagesClient {
	return &packagesClient{cc}
}

func (c *packagesClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallReply, error) {
	out := new(InstallReply)
	err := c.cc.Invoke(ctx, "/Packages.Packages/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/Packages.Packages/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) ListInstalled(ctx context.Context, in *ListInstalledRequest, opts ...grpc.CallOption) (*ListInstalledReply, error) {
	out := new(ListInstalledReply)
	err := c.cc.Invoke(ctx, "/Packages.Packages/ListInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) RepoList(ctx context.Context, in *RepoListRequest, opts ...grpc.CallOption) (*RepoListReply, error) {
	out := new(RepoListReply)
	err := c.cc.Invoke(ctx, "/Packages.Packages/RepoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error) {
	out := new(CleanupResponse)
	err := c.cc.Invoke(ctx, "/Packages.Packages/Cleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackagesServer is the server API for Packages service.
// All implementations should embed UnimplementedPackagesServer
// for forward compatibility
type PackagesServer interface {
	Install(context.Context, *InstallRequest) (*InstallReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	ListInstalled(context.Context, *ListInstalledRequest) (*ListInstalledReply, error)
	RepoList(context.Context, *RepoListRequest) (*RepoListReply, error)
	// Cleanup executes any package system specific cleanup such as
	// yum-complete-transaction for YUM systems. If a given package system doesn't
	// have this API this is a no-op.
	Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error)
}

// UnimplementedPackagesServer should be embedded to have forward compatible implementations.
type UnimplementedPackagesServer struct {
}

func (UnimplementedPackagesServer) Install(context.Context, *InstallRequest) (*InstallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedPackagesServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPackagesServer) ListInstalled(context.Context, *ListInstalledRequest) (*ListInstalledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstalled not implemented")
}
func (UnimplementedPackagesServer) RepoList(context.Context, *RepoListRequest) (*RepoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoList not implemented")
}
func (UnimplementedPackagesServer) Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}

// UnsafePackagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServer will
// result in compilation errors.
type UnsafePackagesServer interface {
	mustEmbedUnimplementedPackagesServer()
}

func RegisterPackagesServer(s grpc.ServiceRegistrar, srv PackagesServer) {
	s.RegisterService(&Packages_ServiceDesc, srv)
}

func _Packages_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages.Packages/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages.Packages/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_ListInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstalledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).ListInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages.Packages/ListInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).ListInstalled(ctx, req.(*ListInstalledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_RepoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).RepoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages.Packages/RepoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).RepoList(ctx, req.(*RepoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages.Packages/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).Cleanup(ctx, req.(*CleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Packages_ServiceDesc is the grpc.ServiceDesc for Packages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Packages.Packages",
	HandlerType: (*PackagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _Packages_Install_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Packages_Update_Handler,
		},
		{
			MethodName: "ListInstalled",
			Handler:    _Packages_ListInstalled_Handler,
		},
		{
			MethodName: "RepoList",
			Handler:    _Packages_RepoList_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _Packages_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packages.proto",
}
