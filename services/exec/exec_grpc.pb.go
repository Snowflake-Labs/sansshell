// Copyright (c) 2019 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: exec.proto

package exec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exec_Run_FullMethodName          = "/Exec.Exec/Run"
	Exec_StreamingRun_FullMethodName = "/Exec.Exec/StreamingRun"
)

// ExecClient is the client API for Exec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecClient interface {
	// Run takes input, executes it and returns result of input execution
	Run(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	// StreamingRun takes input, executes it and streams back execution information
	//
	// The return code can only be nonzero in the final response. Intermediate
	// responses may contain stdout and/or stderr.
	StreamingRun(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (Exec_StreamingRunClient, error)
}

type execClient struct {
	cc grpc.ClientConnInterface
}

func NewExecClient(cc grpc.ClientConnInterface) ExecClient {
	return &execClient{cc}
}

func (c *execClient) Run(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Exec_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execClient) StreamingRun(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (Exec_StreamingRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exec_ServiceDesc.Streams[0], Exec_StreamingRun_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &execStreamingRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exec_StreamingRunClient interface {
	Recv() (*ExecResponse, error)
	grpc.ClientStream
}

type execStreamingRunClient struct {
	grpc.ClientStream
}

func (x *execStreamingRunClient) Recv() (*ExecResponse, error) {
	m := new(ExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecServer is the server API for Exec service.
// All implementations should embed UnimplementedExecServer
// for forward compatibility
type ExecServer interface {
	// Run takes input, executes it and returns result of input execution
	Run(context.Context, *ExecRequest) (*ExecResponse, error)
	// StreamingRun takes input, executes it and streams back execution information
	//
	// The return code can only be nonzero in the final response. Intermediate
	// responses may contain stdout and/or stderr.
	StreamingRun(*ExecRequest, Exec_StreamingRunServer) error
}

// UnimplementedExecServer should be embedded to have forward compatible implementations.
type UnimplementedExecServer struct {
}

func (UnimplementedExecServer) Run(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedExecServer) StreamingRun(*ExecRequest, Exec_StreamingRunServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRun not implemented")
}

// UnsafeExecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecServer will
// result in compilation errors.
type UnsafeExecServer interface {
	mustEmbedUnimplementedExecServer()
}

func RegisterExecServer(s grpc.ServiceRegistrar, srv ExecServer) {
	s.RegisterService(&Exec_ServiceDesc, srv)
}

func _Exec_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exec_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServer).Run(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exec_StreamingRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecServer).StreamingRun(m, &execStreamingRunServer{stream})
}

type Exec_StreamingRunServer interface {
	Send(*ExecResponse) error
	grpc.ServerStream
}

type execStreamingRunServer struct {
	grpc.ServerStream
}

func (x *execStreamingRunServer) Send(m *ExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Exec_ServiceDesc is the grpc.ServiceDesc for Exec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Exec.Exec",
	HandlerType: (*ExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Exec_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRun",
			Handler:       _Exec_StreamingRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exec.proto",
}
