// Copyright (c) 2019 Snowflake Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: exec.proto

package exec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Exec_Run_FullMethodName          = "/Exec.Exec/Run"
	Exec_StreamingRun_FullMethodName = "/Exec.Exec/StreamingRun"
)

// ExecClient is the client API for Exec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Exec service definition.
type ExecClient interface {
	// Run takes input, executes it and returns result of input execution
	Run(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	// StreamingRun takes input, executes it and streams back execution information
	//
	// A nonzero return code, if any, will be in the final response. Intermediate
	// responses may contain stdout and/or stderr.
	StreamingRun(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecResponse], error)
}

type execClient struct {
	cc grpc.ClientConnInterface
}

func NewExecClient(cc grpc.ClientConnInterface) ExecClient {
	return &execClient{cc}
}

func (c *execClient) Run(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Exec_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execClient) StreamingRun(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Exec_ServiceDesc.Streams[0], Exec_StreamingRun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecRequest, ExecResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exec_StreamingRunClient = grpc.ServerStreamingClient[ExecResponse]

// ExecServer is the server API for Exec service.
// All implementations should embed UnimplementedExecServer
// for forward compatibility.
//
// The Exec service definition.
type ExecServer interface {
	// Run takes input, executes it and returns result of input execution
	Run(context.Context, *ExecRequest) (*ExecResponse, error)
	// StreamingRun takes input, executes it and streams back execution information
	//
	// A nonzero return code, if any, will be in the final response. Intermediate
	// responses may contain stdout and/or stderr.
	StreamingRun(*ExecRequest, grpc.ServerStreamingServer[ExecResponse]) error
}

// UnimplementedExecServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecServer struct{}

func (UnimplementedExecServer) Run(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedExecServer) StreamingRun(*ExecRequest, grpc.ServerStreamingServer[ExecResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRun not implemented")
}
func (UnimplementedExecServer) testEmbeddedByValue() {}

// UnsafeExecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecServer will
// result in compilation errors.
type UnsafeExecServer interface {
	mustEmbedUnimplementedExecServer()
}

func RegisterExecServer(s grpc.ServiceRegistrar, srv ExecServer) {
	// If the following call pancis, it indicates UnimplementedExecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Exec_ServiceDesc, srv)
}

func _Exec_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exec_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServer).Run(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exec_StreamingRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecServer).StreamingRun(m, &grpc.GenericServerStream[ExecRequest, ExecResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Exec_StreamingRunServer = grpc.ServerStreamingServer[ExecResponse]

// Exec_ServiceDesc is the grpc.ServiceDesc for Exec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Exec.Exec",
	HandlerType: (*ExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Exec_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRun",
			Handler:       _Exec_StreamingRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exec.proto",
}
