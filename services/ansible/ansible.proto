/* Copyright (c) 2019 Snowflake Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
*/

syntax = "proto3";

option go_package = "github.com/Snowflake-Labs/unshelled/services/ansible";

package Ansible;

// The Playbook service definition.
service Playbook {
  // Will run ansible-playbook only on the local host using the args passed.
  rpc Run(RunRequest) returns (RunReply) {}
}

message Var {
  string key = 1;
  string value = 2;
}

message RunRequest {
  // The playbook to execute. Needs to be a fully qualified path.
  string playbook = 1;

  // Will become N -e options to ansible-playbook
  repeated Var vars = 2;

  // The user to use for exection.
  string user = 3;

  // If set --check is passed to ansible. Depending on playbook settings
  // this may still execute tasks.
  bool check = 4;

  // If set --diff is passed to ansible
  bool diff = 5;

  // If true, execute ansible with verbose output enabled (equivilant to -vvv)
  bool verbose = 6;
}

message RunReply {
  // All output sent to stdout.
  string stdout = 1;

  // All output sent to stderr.
  string stderr = 2;

  // The return code from the ansible command. Ansible returning non-zero will
  // not be an RPC failure as exec'ing is all we guarentee and some playbooks
  // are designed to return non-zero.
  int32 return_code = 3;
}
